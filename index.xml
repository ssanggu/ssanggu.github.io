<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>블로그소개 on salgunamu&#39;s LAB Blog</title>
    <link>http://ssanggu.github.io/</link>
    <description>Recent content in 블로그소개 on salgunamu&#39;s LAB Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sun, 10 Mar 2019 18:41:29 +0900</lastBuildDate>
    
	<atom:link href="http://ssanggu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.9 우분투머신에 하드디스크 추가</title>
      <link>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</link>
      <pubDate>Thu, 14 Mar 2019 22:01:43 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</guid>
      <description> [LAB의 목적] UnetLaB을 돌리기 위하여 우분투 가상머신을 생성할때 20G하드디스크를 생성했는데 이미지를 몇개 추가하다보니 디스트의 용량부족발생. 리눅스에 신규로 하드디스크를 추가했을때 수행되는 작업 익히기 
[습득해야할 내용]  VMWare가상머신 설정에서 20GB SCSI HDD 한개 추가하기 우분투머신을 부팅하고 dmesg|grep sd명령으로 하드디스크 인식된거 확인 fdisk -l명령으로 디스크 목록 확인하기 fdisk명령으로 추가된 하드디스크 파티션하는 방법 방법익히기 신규로 생성된 파티션을 포맷하는 방법 익히기. 이 부분에서 리눅스의 파티션의 종류에 대해서 알아보기(ext2, ext3, ext4등등) 신규 파티션 마운트할 디렉토리 생성과 수동 마운트 진행해보기 fstab에 부팅시에 자동으로 마운트 되도록 설정하기  </description>
    </item>
    
    <item>
      <title>2.8 VyOS이미지 등록</title>
      <link>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</link>
      <pubDate>Thu, 14 Mar 2019 21:50:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</guid>
      <description> [LAB의 목적] LAB상에서 이용할 vyOS장비하나 추가하기. ova이미지에서 vmdk이미지를 추출하고, 그 추줄한 이미지를 리눅스 kvm상에서 실행할 수 있는 이미지로 변환하는 방법익히기 
[습득해야할 내용]  VyOS란? VyOS사용자 가이드로 기본 사용법 숙지하기 VyOS ova이미지 다운로드 디렉토리 생성(VyOS이미지의 디렉토리 이름은 vyos-로 시작해야함) mkdir -p /opt/unetlab/addons/qemu/vyos-117 ova 압축풀기 tar xf vyos-1.1.7-amd64-signed.ova vmdk이미지를 qemu이미지로 변환 /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 VyOS-1.1.7-signed-disk1.vmdk hda.qcow2 권한수정 /opt/unetlab/wrappers/unl-wrapper -a fixpermissions  </description>
    </item>
    
    <item>
      <title>2.7 스위치설정 템플릿2</title>
      <link>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</link>
      <pubDate>Thu, 14 Mar 2019 21:40:27 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</guid>
      <description>[LAB의 목적] 네트워크 장비를 설정할때 아래의 사항들은 기본적으로 설정이 필요하여 기본 설정템플릿으로 정의. LAB상에서 스위치나 라우터 설정할때 귀찮다 생각하지 말고 아래의 사항들을 기본적으로 설정하면서 습관을 들이는것이 목적. 
[습득해야할 내용]  장비의 이름(hostname)을 의미있게 부여하였는가? 도메인이름을 설정하였고, ip domain-lookup을 수행하지 않도록 설정하였는가? (no ip domain-lookup을 설정하지 않으면 프롬포트에 오타를 치는 경우 대기시간이 발생) Timezone설정을 수행하였는가? debug, log메시지에 대해서 timestamp를 localtime으로 지정하였는가? VTP domain을 지정하고 VTO mode를 transparent로 변경하였는가? password encryption서비스를 설정하였는가?</description>
    </item>
    
    <item>
      <title>2.6 Static Route 설정</title>
      <link>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</link>
      <pubDate>Thu, 14 Mar 2019 21:32:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1226_L3-Static-Route.zip 
[LAB의 목적] 본 LAB은 라우팅설정에 대한 이해를 돕기위한 LAB입니다. 
[습득해야할 내용]  모든 통신의 시작은 출발지 시스템의 라우팅테이블을 살펴본는것에서 출발한다는 사실 인지 라우팅테이블에 존재하지 않는 네트워크를 목적지로 하는 경우에는 default-gateway로 전달된다는것 default gateway를 정의하지 말고 LAB상의 모든 L3장비에서 사용하는 네트워크들에 대해서만 라우팅을 설정하여 모두 통신이 되도록 구성할것 supermasking으로 등록하는 라우팅 갯수를 줄일 수 있는 방안  </description>
    </item>
    
    <item>
      <title>2.5 Trunk환경설정</title>
      <link>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</link>
      <pubDate>Wed, 13 Mar 2019 21:15:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1227_VLAN-Trunk2.zip 
[LAB의 목적] 물리적인 단일 연결을 통해서 여러개의 VLAN통신이 가능하도록 하는 Trunk설정 익히기 
[습득해야할 내용]  떨어져 있는 건물에 있는 사용자들을 동일한 VLAN으로 묶어주기 위한 Trunk설정 익히기 설정할때 SW2스위치의 관리 IP는 VLAN100에서 할당하고 SW3스위치의 관리 IP는 VLAN200에서 할당하기 스위치에 trunk설정방법 익히기  </description>
    </item>
    
    <item>
      <title>2.4 스위치 기본설정 템플릿</title>
      <link>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</link>
      <pubDate>Wed, 13 Mar 2019 21:07:18 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</guid>
      <description> [구성도] 
[LAB의 목적] 2.3장의 LAB을 그대로 이용하여 LAB상의 스위치에 아래의 사항들을 설정해보고 시험하기 
[습득해야할 내용]  스위치에 Timezone을 설정하고 외부 NTP서버를 지정하여 시간동기화. NTP시간동기화 상태 통신확인하기 debug와 log메시지가 현재 장비시간으로 정확하게 표시되도록 설정하기 설정하는 password가 복호화가 안되도록 암호화 설정하기 원격에서 장비를 연결할때 username과 암호를 물어봐서 로그인하도록 구성하기 호스트OS에서 LAB상의 장비로 telnet연결가능하게 하기(호스트OS에서 LAB상의 장비들을 연결하기 위하여 라우팅을 추가하는 방법 익히기) 모든 스위치에 대해서 원격접속을 SSH로만 가능하도록 설정하기 모든 스위치에 대해서 SSH연결시에 호스트OS에서만 접근가능하도록 ACL설정해보기 호스트OS에 tftp나 ftp데몬을 구동하여 LAB에 구성한 모든 스위치의 config를 백업해보기  </description>
    </item>
    
    <item>
      <title>2.3 호스트OS에서 LAB환경 접속하기</title>
      <link>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 13 Mar 2019 20:42:40 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN_Cloud.zip 
[LAB의 목적] 2.2 LAB에서 구성한 환경을 VMWare에서 제공하는 Host-Only(VMNet1)네트워크에 연결해서 HostOS에서 LAB장비를 연결할 수 있는 방법 익히기 
[습득해야할 내용]  VMWare Plyaer에서 제공하는 Bridge, NAT, Host-only인터페이스 이해하기 자기의 VMWare Player버전에 맞는 vmnetcfg.exe를 받아서 네트워크를 재구성하는 방법 익히기 Bridge, NAT, Host-only인터페이스중 어떤것을 연결하더라도 LAB상의 장비를 연결하는 방법 익히기 
[VMWare어댑터관계 개념그림]   </description>
    </item>
    
    <item>
      <title>2.2 VLAN간 ip routing시험</title>
      <link>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</link>
      <pubDate>Wed, 13 Mar 2019 20:34:06 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN.zip 
[LAB의 목적] L3를 수행하는 백본스위치 1대를 놓고 서로 다른 VLAN간에 ip routing을 수행하여 서로 다른 VLAN간에 통신 시험 
[습득해야할 내용]  Cisco IOL에서 스위치 이미지를 사용할때  L3 라우팅기능을 사용하려면 ip routing L3 스위치에서 default gateway를 지정하려면 ip route 0.0.0.0 0.0.0.0 nexthop으로 지정 L2스위치로만 사용하려면 no ip routing L2 스위치에서 default gateway를 지정하려면 ip default-gateway nexthop으로 지정   </description>
    </item>
    
    <item>
      <title>2.1 L2스위치 기본LAB</title>
      <link>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</link>
      <pubDate>Wed, 13 Mar 2019 20:23:12 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</guid>
      <description> [구성도] LAB구성파일: 20161222_L2-VLAN.zip 
[LAB의 목적] UnetLAB에 등록한 Cisco IOL이미지가 정상적으로 동작하여 L2스위치의 기능을 수행하는지를 시험 
[습득해야할 내용]  Cisco스위치의 기본설정 (보안을 고려한 설정으로 기본적으로 설정하는 내용에 대한 설정 템플릿을 만들어 보기) VPC의 기본 IP설정방법과 통신명령 익히기 동일한 VLAN상의 노느들간의 통신확인하기  </description>
    </item>
    
    <item>
      <title>1.4 Cisco IOU/IOL 이미지 구성하기</title>
      <link>http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 11 Mar 2019 22:23:10 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> Cisco IOU/IOL 이란? Cisco IOU/IOL이미지 추가하기  구성방법은 How To Add Cisco IOU IOL iourc라이선스 파일 만들기 Cisco의 추적?? /etc/hosts에 xml.cisco.com확인 images파일 위치에 복사 permission수정 스크립트  LAB을 생성하고 장비를 추가하여 구동해보기 telnet 기본프로그램을 putty로 변경하기 Windows integration pack을 설치하여 putty를 포함해서 윈도우에서 LAB장비를 연결하는 클라이언트 프로그램들이 설정됨  </description>
    </item>
    
    <item>
      <title>1.3 UnetLab(EVE-NG) 설치하기</title>
      <link>http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 11 Mar 2019 22:01:36 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>Check if Virtualization Technology is available for UnetLab  설치한 VMware Player에 UnetLab을 위한 가상머신을 생성할때 Virtualize Intel VT-x/EPT or AMD-V/RVI기능이 활성화됨을 확인 Open-Source Routing and Network Simulation  Installing UnetLab on a Physical Server  VMWare Player에 가상머신으로 설치하지만 설치방법은 물리적인 서버에 설치하는 방법과 동일하게 설치 설치방법은 Open-Source Routing and Network Simulation를 참조 설치후에 grub를 수정하는 부분 주의할것!!!  설치후에 처음 부팅할때 UnetLab구성하기  설치한 후에 처음으로 부팅하면 UnetLab설정화면이 기본으로 구동되는데 우분투는 root암호를 넣는 부분이 없기때문에 자동으로 구동되는 프로세스를 찾아서 중지한후에 수동으로 설정하는 것을 진행할 필요가 있음  브라우저에서 UnetLab연결하고 기본 사용법 익히기 UnetLab에서 구성하는 장비들을 실제PC에서 자유롭게 접속하고 관리하기 위해서는 VMWare와 우분투, UnetLab간의 네트워크 어댑터 고나계를 정확하게 이해를 해야합니다.</description>
    </item>
    
    <item>
      <title>1.2 어떤 배포판을 설치할것인가?</title>
      <link>http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Mon, 11 Mar 2019 21:37:23 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/</guid>
      <description>UnetLab Requirement  처음 EVE-NG프로그램을 접했을때는 UnetLab이라는 이름으로 배포되었습니다. 시간이 흐르고 흘러 소프트웨어가 정교하게 다듬어지면서 EVE-NG라는 이름으로 변경되더군요. 지금도 Pro패키지가 있지만 완전 상용화가 될까봐 걱정을 하면서 사용중입니다. 초기 시스템 요구사항에 따라서 Ununtu 14.04 LTS버전을 사용했었지만 EVE-NG는 16.04버전을 권장하고 있습니다.  무료로 사용할 수 있는 VMWare Player에 Ubuntu 16.04 LTS버전 설치하기  4GB RAM과 4개의 Processor로 설치진행 향후 LAB을 크게 구성할때를 대비하여 8GB RAM을 사용하는것이 좋습니다.  우분투 일반버전과 LTS버전차이 우분투 Desktop버전과 Server버전차이 우분투리눅스 설치후에 putt로 원격연결하는 방법 우분투리눅스에 연결해서  우분투의 sudo개념 업데이트: apt=get update; apt-get upgrade dist upgrade는 하지말것!</description>
    </item>
    
    <item>
      <title>1.1 리눅스의 기본</title>
      <link>http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 11 Mar 2019 21:18:59 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/</guid>
      <description>운영체제란? (OS, Operating System) 커널과 shell Unix의 History: BSD계역과 System-V계열의 유닉스부터 전반적인 유닉스의 발전 히스토리를 설명 리눅스란? 리눅스 배포판이란? 리눅스의 배포판 History 리눅스의 init 왕데몬에 관하여 하지만, 이제는 Systemd가 대세 패키지 관리 명령어  Debian계열(Ubuntu): apt-get RedHat게열(CentOS): yum    리눅스라는 운영체제를 설명하기 위하여 운영체제에 대해서 간략하게 설명하고 사용자가 입력하는 명령어을 받아서 실행하는 명령어해독기(shell)에 대한 설명과 여러가지 shell별로 환경변수를 설정하는 방법을 살펴봅니다. 리눅스의 다양한 배포판들이 존재하는 것을 설명하고 배포판들의 뿌리를 설명할 것입니다.</description>
    </item>
    
    <item>
      <title>0.6 네트워크장비개요</title>
      <link>http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/</link>
      <pubDate>Mon, 11 Mar 2019 13:43:09 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/</guid>
      <description>네트워크에 사용되는 케이블을 알아보면서 모든 케이블마다 통신할 수 있는 거리제한이 있다는 것을 알게되었습니다. 한 세그먼트의 최대거리에 수용할 수 있는 PC들이 모두 수용되었을떄 추가적인 케이블 세그먼트를 만드는데 이 두 세그먼트간의 통신은 어떻게 할까요? 이렇게 케이블의 물리적인 거리의 한계를 극복하기 위하여 네트워크장비들이 등장하게 됩니다. 등장한 네트워크장비는 Repeater(리피터), Bridge(브리지), Router(라우터)입니다. 우리는 OSI 7 Layer중에서 아래 3계층만 다룬다고 했는데, 등장한 네트워크장비들이 이 3계층에 아래와 같이 매핑됩니다. Repeater &amp;nbsp;&amp;nbsp;:거리연장 + 신호증폭  리피터는 케이블의 물리적인 거리한계를 극복하도록 거리를 연장하는 기능과 감쇠된 신호를 증폭하여 다시 전달할 수 있는 기능을 제공합니다.</description>
    </item>
    
    <item>
      <title>0.5 Ethernet발전과 케이블 악세사리</title>
      <link>http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/</link>
      <pubDate>Mon, 11 Mar 2019 11:37:21 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/</guid>
      <description>이제까지 10Mbps Ethernet만 살펴봤는데 기본에 충실하면 이후는 동일합니다. 이후로는 Ethernet으로 쭈~~욱 발전한다고 얘기했습니다. 그렇다면 동일한 CSMA/CD방식에 broadcast네트워크라는 점만 알고 있으면 되겠네요. 10Mbps이후로 등장하는것이 100Mbps를 지원하는 FastEthernet방식입니다. FastEthernet에서는 사용하는 케이블 종류에 따라서 아래와 같은 표준안을 사용했는데 각 표준별로 케이블의 최대거리를 잘 살펴보세요.  A동과 B동간의 거리가 600M일때 100Mbps FastEthernet방식으로 구성해보세요.  FastEthernet이 보편화되면서 더 빠른 속도가 필요해서 등장하는것이 1Gbps를 제공하는 GigabitEthernet입니다. GigabitEthernet도 사용하는 케이블의 종류에 따라서 여러가지 표준안이 있으므로 표준별로 케이블의 최대거리를 잘 확인하세요.</description>
    </item>
    
    <item>
      <title>0.4 Cable에 대한 정리</title>
      <link>http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 11 Mar 2019 10:52:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/</guid>
      <description>이제까지 가상의 통신모델과 구성형태, 어떠한 방식으로 통신하는지를 정의했으니 이제는 직선으로 표시했던 케이블부분을 정의해보겠습니다. 위의 그림에서 보듯이 처음 교육을 시작할때부터 일직선으로 그린부분이 있는데, 이 일직선이 10Base5케이블을 의미하는 것입니다. 공유매체(공통으로 사용한다)인 케이블을 10Mbps Ethernet에서부터 출발을 해보겠습니다. 위의 그림에 나열된것은 10Mbps Ethernet에서 사용하는 케이블의 종류입니다.케이블 이름에서 맨앞의 10은 10Mbps를 의미하고 Base는 Baseband신호방식(저대역)을 의미하며, 맨 마지막은 케이블의 거리제한을 의미합니다.  Ethernet에서 사용하는 신호방식을 Baseband(저대역)신호방식이라고 하는데 방송국에서 사용하는 MBC, SBS, KBS의 B는 Broadband(광대역)신호방식 입니다. 저대역통신방식과 광대역통신방식간의 차이점이 무엇인지 간략하게 찾아보세요.</description>
    </item>
    
    <item>
      <title>0.3 Ethernet이란</title>
      <link>http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Mon, 11 Mar 2019 10:20:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/</guid>
      <description>구성도를 그리면서 Topology가 무엇인지 어떠한 형태로 연결되는구나&amp;hellip;하는식으로 이해가 좀 되었으면 합니다. 
우리가 앞으로 취급할 부분은 LAN이고&amp;hellip;. LAN에서 사용하는 통신규칙중에 Ethernet을 가장많이 다루게 될것입니다.  Ethernet이란 통신을 하고자 하는 PC들을 선으로 연결해야하는데 어떤선으로 어떤방식으로 연결할것인가, 연결된 PC들끼리 통신을 하려고 하면 어떻게 동작을 해서 통신을 할것인가와 같은 규칙을 정의해놓은것이라고 생각하면 됩니다. 제가 Ethernet을 설명할때는 아래와 같이 2가지로 설명하곤합니다.  Ethernet이란 무엇인가? 라는 질문을 받는다면 CSMA/CD방식의 broadcast네트워크이다. 라고 정의할 수 있습니다. CS(Carrier Sense) Ethernet은 케이블을 기본적으로 공유(share)한다는 개념을 가지고 있습니다.</description>
    </item>
    
    <item>
      <title>0.2 물리적인 연결정의</title>
      <link>http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/</link>
      <pubDate>Mon, 11 Mar 2019 10:03:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/</guid>
      <description>통신을 하고자 하는 PC의 내부에는 우리에게 보이지는 않지만 논리적인 통신모델이 만들어진다고 생각합시다. 그 통신모델 맨 꼭대기층(응용계층)에서 사용자 어떤 작업을(브라우저로 사이트 연결)수행하면 맨꼭대기층에서부터 차례로 아래층으로 내리는 작업을 수행하고 물리계층까지 도달해서 전기신호로 보내진다는 것입니다.  통신을 하고자하는 PC에는 네트워크에 연결하기 위해서 어떤 장치가 있어야 합니다. 그것이 유선이든 무선이든.. 그러한 장치를 네트워크카드라고 하는데 내 PC에 어떤 종류의 네트워크카드가 설치되어 있는지 확인할 줄 알아야 합니다. 설치된 네트워크카드는 고유한 하드웨어주소(MAC Address)를 가지는데 장치관리자에서 찾은 네트워크카드와 MAC주소를 연관시켜서 이 MAC은 내 PC에 설치된 어떤 네트워크 카드의 주소이다를 알 수 있어야 합니다.</description>
    </item>
    
    <item>
      <title>0.1 OSI 7 Layer</title>
      <link>http://ssanggu.github.io/ch0/osi-7-layer/</link>
      <pubDate>Sun, 10 Mar 2019 18:56:07 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/osi-7-layer/</guid>
      <description>PC A와 B간에 통신을 한다고 하면 아래의 그림처럼 각각의 PC상에 우리에 게 보이지 않는 논리적인 7층짜치 스택이 만들어진다고 보면 됩니다. 이것을 OSI 7 Layer Model이라고 하는데, 통신을 하고자 하는 서로간에 통신방법을 정의하고 체크하기 위한 논리적인 모델이라고 생각하면 될듯합니다. 7층짜리 스택의 맨 상단은 응용게층으로 우리가 일반적으로 인터넷을 접근하기 위하여 사용하는 프로그램들이 존재한다고 보면되는데, 가장많이 사용&amp;gt;하는 인터넷브라우저에서 수행되는 작업들이 이 7층에서 발생한다고 생각하며 됩니다. A &amp;ndash;&amp;gt; B한테 통신을 하려고 시도한다고 하면 아래의 그림처럼 보내는 측에서는 보자기로 짐을 싸는 행동(Encapsulation)을 하고, 받는측에서는 보자기 의 짐을 푸는 행동(Decapsulation)을 하게됩니다.</description>
    </item>
    
  </channel>
</rss>