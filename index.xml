<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>블로그소개 on salgunamu&#39;s LAB Blog</title>
    <link>http://ssanggu.github.io/</link>
    <description>Recent content in 블로그소개 on salgunamu&#39;s LAB Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sun, 10 Mar 2019 18:41:29 +0900</lastBuildDate>
    
	<atom:link href="http://ssanggu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.30 NTP서버구성 및 시간동기화</title>
      <link>http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/</link>
      <pubDate>Sat, 16 Mar 2019 23:28:31 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/</guid>
      <description>[구성도] LAB구성파일: 0207_NTP-Time-Sync.zip 
[LAB의 목적] 네트워크 장비나 보안장비등 로그를 모니터링 해야하는 시스템의 시간은 중요한 항목입니다. 따라서, 장비에 NTP서버를 통한 시간동기화는 필수라고 할 수 있습니다. 본 LAB은 Docker시스템에 NTP서버를 구성하여 장비들의 시간을 동기화하는 LAB입니다. 다양한 시스템별로 NTP시간동기화 설정을 어떻게 하는지 방법을 익혀보세요. 
[LAB수행조건]  R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server와 ubuntu-client는 우분투 클라이언트 이미지를 사용한 컨테이너로 동작 NTP-server에 인터넷으로부터 NTP패키지를 설치하여 time서버를 구동 Cisco장비(R1, SW1), Juniper(Olive-R), Ubuntu Linux(ubuntu-client)시스템별로 10.</description>
    </item>
    
    <item>
      <title>2.29 Extended ACL</title>
      <link>http://ssanggu.github.io/ch2/2.29-extended-acl/</link>
      <pubDate>Sat, 16 Mar 2019 23:19:14 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.29-extended-acl/</guid>
      <description>[구성도] LAB구성파일: 0206_Extended-ACL.zip 
[LAB의 목적] 단순한 ACL을 만들어봤으니 프로토콜과 서비스 포트번호를 포함하여 좀 더 복잡한 보안정책을 구성해보는 LAB입니다. 
[LAB수행조건]  R1 e0/0에 pnet0를 연결하고 NAT설정하여 LAB상의 시스템들이 인터넷 가능하도록 설정 아래 정책으로 Static NAT설정  192.168.234.90 80/TCP &amp;mdash;-&amp;gt; 10.0.100.10 80/TCP 192.168.234.90 10022/TCP &amp;mdash;-&amp;gt; 10.0.100.20 22/TCP  아래의 보안정책을 Extended ACL로 생성하고 인터페이스 적용하기  내부(10.0.100.0/24) &amp;mdash;-&amp;gt; 외부는 모든 통신 permit 외부 &amp;mdash;-&amp;gt; 10.0.100.10 80/TCP permit 외부 &amp;mdash;-&amp;gt; 10.</description>
    </item>
    
    <item>
      <title>2.28 Juniper의 Packet Filtering</title>
      <link>http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/</link>
      <pubDate>Sat, 16 Mar 2019 23:12:58 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/</guid>
      <description> [구성도] LAB구성파일: 2.27 Standard ACL에서 사용한 LAB에서 R1라우터를 Olive Router로 교체 
[LAB의 목적] 다양한 장비에서 보안정책 설정하는 방법을 경험하기를 추천합니다!!!

[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절   </description>
    </item>
    
    <item>
      <title>2.27 Standard ACL</title>
      <link>http://ssanggu.github.io/ch2/2.27-standard-acl/</link>
      <pubDate>Sat, 16 Mar 2019 22:58:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.27-standard-acl/</guid>
      <description>[구성도] LAB구성파일: 0206_Standard-ACL.zip 
[LAB의 목적] 향후 방화벽의 복잡한 보안정책을 무리없이 설정할 수 있도록 하기위해서 라우터의 IOS기반 ACL(Access Control List)기능을 사용하여 보안정책을 적용하는 방법을 배우고자하는 LAB입니다. ACL테이블을 작성하고 인터페이스의 inbound정책과 outbound정책에 따라 어떤 변화가 있는지 주의깊게 살펴보세요. 저의 생각으로는 보안정책을 적용받는 대상에 가장 가까운 인터페이스의 방향에 적용하는것이 효율적으로 봅니다.

[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.</description>
    </item>
    
    <item>
      <title>2.26 WireShark로 패킷캡처-II</title>
      <link>http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/</link>
      <pubDate>Sat, 16 Mar 2019 22:48:56 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/</guid>
      <description>[구성도] LAB구성파일: 0201_Docker-make-server.zip 
[LAB의 목적] 본 LAB은 2.25 Docker로 서버구현하기에서 구성한 LAB을 그대로 이용하여 클라이언트와 서버간에 TCP통신이 수행될때 WireShark로 패킷을 잡아보고 패킷을 분석해보는 LAB입니다. 패킷을 ASCII형태로 decode했을때 어떻게 보이는지와 Flow Graph에서 서버와 클라이언트가 사용하는 TCP Port번호를 주의깊게 살펴보세요.

[LAB수행조건]  WireShark캡처 실행하는 방법 다시한번 숙지하기 ubuntu-client(10.0.0.100)에서 SW1(10.0.0.5)로 telnet, ssh연결에 대한 capture ubuntu-client(10.0.0.100)에서 ftp-server(10.0.0.20)로 ftp, sftp연결에 대한 capture ubuntu-client(10.0.0.100)에서 www-server(10.0.0.10)로 http연결에 대한 capture    Attachments   31장_Wireshark로 패킷 Capture하기.</description>
    </item>
    
    <item>
      <title>2.25 Docker로 서버구현하기</title>
      <link>http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 22:37:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0201_Docker-make-server.zip 
[LAB의 목적] 본 LAB은 UnetLab에서 이용할 각종 서버를 Docker시스템을 통하여 구현하고 클라이언트에서 각 서버들을 연결할 수 있는 환경을 구성하는 LAB입니다.

[LAB수행조건]  R1라우터에 VMWare NAT인터페이스를 e0/0에 연결하고 NAT설정을 수행하여 LAB이 인터넷 사용이 가능하도록 구성 SW1스위치는 기본설정 ubuntu-client는 Docker 기본이미지로 만들어진 컨테이너를 사용. 인터넷까지 정상통신되는것을 확인 www-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 apache2, ssh서버를 패키지로 설치하여 서부구성하고 테스트계정 생성하기 ftp-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용.</description>
    </item>
    
    <item>
      <title>2.24 Docker에서 인터넷 사용하기</title>
      <link>http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 22:30:39 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0201_Docker-use-internet.zip 
[LAB의 목적] LAB에 추가하는 Docker시스템에 다른 패키지를 설치하거나 설치된 패키지를 업데이트 하기 위해서는 인터넷 연결이 필요합니다. 라우터의 NAT설정을 통해서 Docker에서 인터넷 연결이 가능하도록 설정해보세요.

[LAB수행조건]  LAB에서 생성하는 Docker시스템에서 인터넷을 접근해서 패키지 설치가 가능하도록 설정 R1라우터의 e0/0인터페이스를 VMWare의 NAT인터페이스(pnet0)에 연결하고 ip를 자동할당으로 받도록 설정 R1라우터에 NAT를 설정하여 내부네트워크(10.0.0.0/24)가 외부로 통신할때 e0/0인터페이스 IP로 PAT변환이 수행되도록 설정 우분투 클라이언트 시스템에서 패키지 업데이트를 수행  </description>
    </item>
    
    <item>
      <title>2.23 UnetLab에서 Docker활용하기</title>
      <link>http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 21:33:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0131_Use-Docker.zip 
[LAB의 목적] 컨테이너 기술을 사용하여 경량의 시스템을 구현해주는 도커시스템을 UnetLab에 추가함으로써 다수의 서버를 LAB상에 올릴수 있도록 합니다. 
도커(Docker)란? Docker에 대한 개념정리는 도커 무작정 따라하기를 참조했습니다. 
[LAB수행조건]  UnetLab이 설치된 우분투 리눅스에 Docker설치하기 본 LAB을 구성할때 참조한 How To Adding and Run Docker Container on UnetLab 문서는 여전히 참조할만 하지만 우분투에 docker설치하는 내용은 최근 우분투에 repository를 이용하여 설치하는 방법을 이용해야 합니다. 재검색을 통해서 Installing Docker in EVE-NG 사이트를 찾았습니다.</description>
    </item>
    
    <item>
      <title>2.22 Cisco IOS NAT 설정</title>
      <link>http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/</link>
      <pubDate>Sat, 16 Mar 2019 21:22:30 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/</guid>
      <description>[구성도] LAB구성파일: 0123_CiscoIOS-NAT.zip 
[LAB의 목적] 본 LAB에서는 Cisco IOS라우터에서 NAT설정하는 방법을 습득합니다. 내부의 노드들이 외부로 통신할때 TCP port기반의 NAT를 통해서 주소변환이 발생하도록 설정하고, 외부에서 내부측의 장비로 원격연결을 하기 위한 inside destination NAT를 설정하는 방법을 습득합니다. 
[LAB수행조건]  LAB상의 모든 노드가 통신이 가능하도록 설정 스위치가 원격접속이 가능하도록 설정 SW1에서 SW2로 telnet, SW2에서 SW1으로 telnet 접속하고 who명령을 통해서 출발지 IP주소를 확인하기 10.0.0.0/24대역에서 10.10.0.0/24대역으로 통신할때 192.168.200.200 IP로 PAT변환이 되어서 통신되도록 NAT설정 NAT설정후에 SW1스위치에서 SW2스위치로 telnet 연결하고 who명령으로 출발지 IP확인했을때 192.</description>
    </item>
    
    <item>
      <title>2.21 Cisco HSRP이중화 구성</title>
      <link>http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 16 Mar 2019 14:42:17 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] LAB구성파일: 0120_Cisco-HSRP-Networks.zip 
[LAB의 목적] Cisco IOS 백본스위치에 대한 장애를 대비하기 위하여 이중화로 구성하고 게이트웨이 이중화 프로토콜인 HSRP를 사용하여 이중화 네트워크를 구성합니다. 
[LAB수행조건]  VRRP(Virtual Router Redundancy Protocol)와 HSRP(Hot Stanby Router Protocol)는 동일하게 게이트웨이를 이중화하는 프로토콜로 VRRP는 모든 제조사에서 사용가능 하지만 HSRP는 Cisco에서만 사용 가능 HSRP 기본구성 문서를 참조하여 LAB장비를 설정 VLAN100은 BACKBONE1이 Master, VLAN200은 BACKBONE2가 Master가 되도록 설정 show stanby brief로 HSRP상태확인 모든 노드에서 LAB상의 모든 IP로(slave ip address를 포함) 통신이 되는것을 확인 BACKBONE2를 stop했을때 HSRP Master가 BACKBONE1으로 전환되면서 네트워크 끊김이 없음을 보이려 했으나 사용한 이미지상의 버그로 인하여 fail-over시험은 완료 못함</description>
    </item>
    
    <item>
      <title>2.20 WireShark로 패킷 캡처</title>
      <link>http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/</link>
      <pubDate>Sat, 16 Mar 2019 13:53:16 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/</guid>
      <description>[LAB의 목적] UnetLab에 구성하는 LAB자체에서 WireShark를 통한 패킷을 캡처가 가능합니다. LAB에서 WireShark를 사용할 수 있도록 구성하는 LAB입니다. 우분투에서는 sudo개념을 사용하고 있기때문에 root암호를 생성하는 과정이 필요합니다. 
[LAB수행조건]  네이버블로그에서 UNL에서 와이어샤크를 이용한 패킷캡처 라는 잘 정리된 글을 통해서 본 LAB을 잘 꾸밀 수 있읍니다. 원리: plink를 이용하여 UNL서버에 SSH터널을 구성하여 tcpdump데이터를 받아오는 구조
  UnetLab사이트에서 Windows Client Side을 다운로드해서 설치하면 기본프로그램에 대한 레지스크리 등록 수행 wireshark_wrapper.bat파일에 USERNAME과 PASSWORD항목이 있는데 ssh로 연결해서 tcpdump를 실행할 수 있는 권한이 있어야 하므로 root계정정보를 입력해야함 우분투는 sudo개념을 사용함으로 root에 대한 암호설정 필요 ssh데몬의 config파일에서 root로 로그인할 수 있도록 설정 변경 필요 윈도우에 Wireshark프로그램 설치하고, wireshark_wrapper.</description>
    </item>
    
    <item>
      <title>2.19 Remote Access VPN구성</title>
      <link>http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 16 Mar 2019 13:37:42 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] LAB구성파일: 0118_RemoteAccess-VPN.zip 
[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN연결을 고려하지 않고 사용하면 라우터에서 해당 대역의 IP에 대해서 암호화를 진행해줍니다. 출장을 나갔거나 외부에서 사용하는 사용자들 위한 Remote VPN을 Cisco IOS라우터에 구성해서 사용자별로 VPN환경을 사용할 수 있도록 구성해봅니다. 
[LAB수행조건]  라우터 R1, SW, VPC1,2에 기본 IP설정 참고파일에 올린 pdf문서를 기반으로 R1에 Remote Access VPN설정 Windows7에 Cisco IPSec VPN Client 5.0.07버전 설치. 한번에 정상적으로 설치 안되는 경우가 발생할 수 있는데, 그럴 경우에 Windows 7을 재시작후에 다시 설치해보세요.</description>
    </item>
    
    <item>
      <title>2.18 IPSec Site-to-Site VPN 구성</title>
      <link>http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 13:26:20 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0118_L2L-IPSec_Tunnel.zip 
[LAB의 목적] 본사와 지사간에 공중망을 통해서 데이터전송을 할때 암호화된 트래픽으로 전달하기 위하여 VPN을 사용합니다. 본 LAB은 Cisco IOS기반 라우터를 사용하여 두 지점간에 IPSec VPN터널을 구성하는 방법을 습득합니다. 
[LAB수행조건]  두개의 라우터(R1, R2)를 Cloud(pnet0) 네트워크에 연결해서 구성 두대의 라우터간에 Site-to-Site 터널구성 IPSec터널을 통해서 10.1.1.0/24네트워크와 172.16.20.0/24 네트워크가 통신됨을 확인 debug를 통해서 IPSec세션 로그 확인해보기    참고파일   LAN-to-LAN IPsec Tunnel Between Two Routers.pdf  (281 ko)    </description>
    </item>
    
    <item>
      <title>2.17 L3라우터의 Trunk인터페이스</title>
      <link>http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</link>
      <pubDate>Sat, 16 Mar 2019 13:18:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</guid>
      <description> [구성도] LAB구성파일: L3-Ro_Trunk.zip 
[LAB의 목적] 물리적으로 단일 링크를 통해서 여러개의 VLAN을 통신하도록 하기 위해서 Trunk를 사용합니다. L3라우터장비에서 Trunk인터페이스를 sub-interface롤 생성하는 방법을 습득하는 LAB입니다. 
[LAB수행조건]  SW1, SW2스위치는 L2스위치로 설정 SW1, SW2스위치 각각에 2개의 VLAN을 생성하고 각각의 VLAN에 VPC를 연결 SW스위치와 Cisco, Juniper라우터간에 trunk를 설정하고 L3인터페이스를 설정 L3라우터에서 trunk로 연결되는 L3인터페이스 생성방법 습득 2대의 라우터간에 라우팅 설정 모든 VPC간에 통신 가능한지 확인  </description>
    </item>
    
    <item>
      <title>2.16 Juniper Olive 기본명령어 학습</title>
      <link>http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 11:15:00 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0115_Juniper-Olive-1.zip 
[LAB의 목적] LAB에서 사용할 수 있는 장비들이 많다면 더 풍부한 테스트환경을 구현할 수 있습니다. Juniper장비를 LAB환경에서 사용하기 위해서 장비의 기본 명령어를 익혀보기위한 LAB입니다. 
[LAB수행조건]  Juniper Olive 이미지 업로드하고 압축해제하기 # tar xvpf Juniper*.ova 이미지 변환하기 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 JunOS\ Olive-disk1.vmdk hda.qcow2 디렉토리 생성. Juniper이미지는 olive-이름으로 시작해야함. # mkdir -p /opt/unetlab/addons/qemu/olive-12.1R1.9 변환한 이미지 move # mv hda.qcow2 /opt/unetlab/addons/qemu/olive-12.1R1.9 권한수정 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions 구성한 LAB에서 JunOS명령어를 익혀보세요    참고파일   0115_Basic Juniper Router Configuration.</description>
    </item>
    
    <item>
      <title>2.15 Null0 라우팅</title>
      <link>http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/</link>
      <pubDate>Sat, 16 Mar 2019 11:04:41 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/</guid>
      <description> [구성도] LAB구성파일: 0113_Routing확장-Lab.zip 
[LAB의 목적] 내부에서 외부로 유해사이트를 접근하는 문제를 급하게 차단을 해야 하는 경우에 방화벽설정이나 ACL설정을 하지 않고 라우팅을 해당사이트에 대해서 Null0로 설정함으로 차단을 설정할 수 있습니다. 본 Lab은 Null0 라우팅을 설정하여 패킷이 drop되는 방법을 습득합니다. 
[LAB수행조건]  Lab구성도는 2.6 Static route설정 LAB을 이용 모든 노드들이 통신이 되도록 구성하기 모든 노드들간에 통신이 정상적임을 확인한 후에 오로지 라우팅 조정으로만 VPC5가 통신이 안되도록 설정  </description>
    </item>
    
    <item>
      <title>2.14 Etherchannel 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 10:56:42 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0110_EtherChannel_Lab.zip 
[LAB의 목적] 물리적인 포트 여러개를 묶어서 대역폭을 확장해서 제공하고 물리적인 포트의 장애를 대비할 수 있는 Etherchannel기술을 습득하는 Lab으로서 동일장비에서 설정하는것도 중요하지만 서로다른 제조사의 제품간에 연동도 중요합니다. 따라서, 본 Lab에서는 Cisco스위치와 VyOS간의 설정을 수행합니다. 
[LAB수행조건]  VyOS 리눅스 이미지 추가하기 Lab을 설정할때 etherchannel mode를 여러가지로 변경해보고 debug메시지로 덤프보면서 어떻게 동작하는지 이해하기  </description>
    </item>
    
    <item>
      <title>2.13 rsyslogd로 중앙로그서버 구현</title>
      <link>http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/</link>
      <pubDate>Sat, 16 Mar 2019 10:48:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/</guid>
      <description> [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip 
[LAB의 목적] 네트워크장비의 로그는 버퍼의 사이즈때문에 일정시간 지나면 overwrite되버립니다. 따라서, 원격서버에 로그서버를 구성하여 네트워크 장비의 로그를 저장하는것을 중요합니다. 본 LAB에서는 리눅스에서 기본제공되는 rsyslog데몬을 설정하여 네트워크장비의 로그를 수집하는 방법을 습득합니다. 
[LAB수행조건]  우분투에 rsyslog라는 로그서버 데몬이 기본으로 설치되는데 기본적으로 네트워크에 대해서는 LISTEN하도록 설정되어 있지 않습니다. 네트워크에 대해서 LISTEN모드를 활성화하고 네트워크를 통해서 들어오는 syslog패킷을 수집할 수 있도록 구성 장비의 IP별로 로그파일이 별도로 만들어지도록 구성  </description>
    </item>
    
    <item>
      <title>2.12 DHCP서버와 DHCP네트워크</title>
      <link>http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</link>
      <pubDate>Sat, 16 Mar 2019 10:36:57 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</guid>
      <description>[구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip 
[LAB의 목적] 우분투서버에 DHCP서버를 구성하고 3개의 VLAN에 IP를 할당해주는 LAB 
[LAB수행조건]  UnetLab이 설치된 우분투시스템에 isc-dhcp-server패키지를 설치하고 DHCP서버를 구성하여 pnet1인터페이스에서만 LISTEN하도록 구성. pnet0인터페이스와 같이 물리적인 네트워크에 연결된 부분에서 LISTEN하게되면 실제 네트워크레 영향을 줄수 있으므로 반드시 UnetLab 가상머신 내부에서만 사용하는 pnet1에서만 LISTEN하도록 서버를 구성. 백본스위치에 3개 VLAN이 통신되도록 구성 각 VLAN별 스위치 설정 우분투서버에서 Lab환경의 네트워크와 통신할 수 있도록 라우팅설정 백본스위치의 각 VLAN인터페이스에 ip helper를 설정하여 DHCP패킷이 릴레이 되도록 설정 VPC 4,5,6은 DHCP서버에서 해당 네트워크 대역의 IP로 자동할당됨을 확인 VPC7은 DHCP서버에서 IP를 할당받는데 항상 고정된 10.</description>
    </item>
    
    <item>
      <title>2.11 TACACS&#43; 인증서버 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.11-tacacs&#43;-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 10:10:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.11-tacacs&#43;-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0104_TACACS-Lab.zip 
[LAB의 목적] TACACS+인증서버 패키지를 저장소설치가 아닌 소스파일로 컴파일해서 설치하는 방법익히기 TACACS+인증서버를 구성하고 장비 접근을 인증서버 통해서 인증하기 
[습득해야할 내용]  UnetLab이 설치된 우분투시스템에 TACACS+를 소스로 설치하는 방법.  소스로 설치하는 방법  apt-get install build-essential (우분투에서 소스컴파일을 위한 기본 환경설정) 압축풀기 소스파일 압축해제후 설치가이드를 해주는 README나 INSTALL파일을 확인하기 ./configure tac_plus 를 수행하면 시스템의 환경을 파악하여 컴파일 수행을 위한 Makefile생성 make 를 수행하면 만들어진 Makefile을 읽어서 내용대로 컴파일 수행됨 make install 을 수행하여 실행파일들 설치.</description>
    </item>
    
    <item>
      <title>2.10 윈도우이미지 등록하기</title>
      <link>http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Fri, 15 Mar 2019 21:29:52 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] 윈도우 가상머신을 LAB에서 활용할 수 있도록 이미지생성해서 넣기. 추가한 하드디스크영역에 생성한 이미지를 넣고 soft link를 설정하여 운영하는 방법 익히기 
[습득해야할 내용]  윈도우 가상머신 다운로드하기 90일동안 사용할 수 있는 윈도우 가상머신을 제공하는 사이트에서 적절한 윈도우를(IE10 on Win7, VMWare용) 선택하여 zip파일 다운로드 다운로드한 zip파일을 우분투서버에 업로드하고 압축해제. 사이즈가 큰 관계로 추가로 장착한 하드디스크에서 수행하기를 권고. # unzip IE10.Win7.For.Windows.VMware.ZIP 윈도우 이미지 넣어줄 디렉토리 준비 윈도우 이미지는 win-으로 디렉토리명이 시작해야 하고, /opt/unetlab/addons/qemu/디렉토리 하단에 위치해야 합니다.</description>
    </item>
    
    <item>
      <title>2.9 우분투머신에 하드디스크 추가</title>
      <link>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</link>
      <pubDate>Thu, 14 Mar 2019 22:01:43 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</guid>
      <description> [LAB의 목적] UnetLaB을 돌리기 위하여 우분투 가상머신을 생성할때 20G하드디스크를 생성했는데 이미지를 몇개 추가하다보니 디스트의 용량부족발생. 리눅스에 신규로 하드디스크를 추가했을때 수행되는 작업 익히기 
[습득해야할 내용]  VMWare가상머신 설정에서 20GB SCSI HDD 한개 추가하기 우분투머신을 부팅하고 dmesg|grep sd명령으로 하드디스크 인식된거 확인 fdisk -l명령으로 디스크 목록 확인하기 fdisk명령으로 추가된 하드디스크 파티션하는 방법 방법익히기 신규로 생성된 파티션을 포맷하는 방법 익히기. 이 부분에서 리눅스의 파티션의 종류에 대해서 알아보기(ext2, ext3, ext4등등) 신규 파티션 마운트할 디렉토리 생성과 수동 마운트 진행해보기 fstab에 부팅시에 자동으로 마운트 되도록 설정하기  </description>
    </item>
    
    <item>
      <title>2.8 VyOS이미지 등록</title>
      <link>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</link>
      <pubDate>Thu, 14 Mar 2019 21:50:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</guid>
      <description> [LAB의 목적] LAB상에서 이용할 vyOS장비하나 추가하기. ova이미지에서 vmdk이미지를 추출하고, 그 추줄한 이미지를 리눅스 kvm상에서 실행할 수 있는 이미지로 변환하는 방법익히기 
[습득해야할 내용]  VyOS란? VyOS사용자 가이드로 기본 사용법 숙지하기 VyOS ova이미지 다운로드 디렉토리 생성(VyOS이미지의 디렉토리 이름은 vyos-로 시작해야함) mkdir -p /opt/unetlab/addons/qemu/vyos-117 ova 압축풀기 tar xf vyos-1.1.7-amd64-signed.ova vmdk이미지를 qemu이미지로 변환 /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 VyOS-1.1.7-signed-disk1.vmdk hda.qcow2 권한수정 /opt/unetlab/wrappers/unl-wrapper -a fixpermissions  </description>
    </item>
    
    <item>
      <title>2.7 스위치설정 템플릿2</title>
      <link>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</link>
      <pubDate>Thu, 14 Mar 2019 21:40:27 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</guid>
      <description>[LAB의 목적] 네트워크 장비를 설정할때 아래의 사항들은 기본적으로 설정이 필요하여 기본 설정템플릿으로 정의. LAB상에서 스위치나 라우터 설정할때 귀찮다 생각하지 말고 아래의 사항들을 기본적으로 설정하면서 습관을 들이는것이 목적. 
[습득해야할 내용]  장비의 이름(hostname)을 의미있게 부여하였는가? 도메인이름을 설정하였고, ip domain-lookup을 수행하지 않도록 설정하였는가? (no ip domain-lookup을 설정하지 않으면 프롬포트에 오타를 치는 경우 대기시간이 발생) Timezone설정을 수행하였는가? debug, log메시지에 대해서 timestamp를 localtime으로 지정하였는가? VTP domain을 지정하고 VTO mode를 transparent로 변경하였는가? password encryption서비스를 설정하였는가?</description>
    </item>
    
    <item>
      <title>2.6 Static Route 설정</title>
      <link>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</link>
      <pubDate>Thu, 14 Mar 2019 21:32:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1226_L3-Static-Route.zip 
[LAB의 목적] 본 LAB은 라우팅설정에 대한 이해를 돕기위한 LAB입니다. 
[습득해야할 내용]  모든 통신의 시작은 출발지 시스템의 라우팅테이블을 살펴본는것에서 출발한다는 사실 인지 라우팅테이블에 존재하지 않는 네트워크를 목적지로 하는 경우에는 default-gateway로 전달된다는것 default gateway를 정의하지 말고 LAB상의 모든 L3장비에서 사용하는 네트워크들에 대해서만 라우팅을 설정하여 모두 통신이 되도록 구성할것 supermasking으로 등록하는 라우팅 갯수를 줄일 수 있는 방안  </description>
    </item>
    
    <item>
      <title>2.5 Trunk환경설정</title>
      <link>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</link>
      <pubDate>Wed, 13 Mar 2019 21:15:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1227_VLAN-Trunk2.zip 
[LAB의 목적] 물리적인 단일 연결을 통해서 여러개의 VLAN통신이 가능하도록 하는 Trunk설정 익히기 
[습득해야할 내용]  떨어져 있는 건물에 있는 사용자들을 동일한 VLAN으로 묶어주기 위한 Trunk설정 익히기 설정할때 SW2스위치의 관리 IP는 VLAN100에서 할당하고 SW3스위치의 관리 IP는 VLAN200에서 할당하기 스위치에 trunk설정방법 익히기  </description>
    </item>
    
    <item>
      <title>2.4 스위치 기본설정 템플릿</title>
      <link>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</link>
      <pubDate>Wed, 13 Mar 2019 21:07:18 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</guid>
      <description> [구성도] 
[LAB의 목적] 2.3장의 LAB을 그대로 이용하여 LAB상의 스위치에 아래의 사항들을 설정해보고 시험하기 
[습득해야할 내용]  스위치에 Timezone을 설정하고 외부 NTP서버를 지정하여 시간동기화. NTP시간동기화 상태 통신확인하기 debug와 log메시지가 현재 장비시간으로 정확하게 표시되도록 설정하기 설정하는 password가 복호화가 안되도록 암호화 설정하기 원격에서 장비를 연결할때 username과 암호를 물어봐서 로그인하도록 구성하기 호스트OS에서 LAB상의 장비로 telnet연결가능하게 하기(호스트OS에서 LAB상의 장비들을 연결하기 위하여 라우팅을 추가하는 방법 익히기) 모든 스위치에 대해서 원격접속을 SSH로만 가능하도록 설정하기 모든 스위치에 대해서 SSH연결시에 호스트OS에서만 접근가능하도록 ACL설정해보기 호스트OS에 tftp나 ftp데몬을 구동하여 LAB에 구성한 모든 스위치의 config를 백업해보기  </description>
    </item>
    
    <item>
      <title>2.3 호스트OS에서 LAB환경 접속하기</title>
      <link>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 13 Mar 2019 20:42:40 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN_Cloud.zip 
[LAB의 목적] 2.2 LAB에서 구성한 환경을 VMWare에서 제공하는 Host-Only(VMNet1)네트워크에 연결해서 HostOS에서 LAB장비를 연결할 수 있는 방법 익히기 
[습득해야할 내용]  VMWare Plyaer에서 제공하는 Bridge, NAT, Host-only인터페이스 이해하기 자기의 VMWare Player버전에 맞는 vmnetcfg.exe를 받아서 네트워크를 재구성하는 방법 익히기 Bridge, NAT, Host-only인터페이스중 어떤것을 연결하더라도 LAB상의 장비를 연결하는 방법 익히기 
[VMWare어댑터관계 개념그림]   </description>
    </item>
    
    <item>
      <title>2.2 VLAN간 ip routing시험</title>
      <link>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</link>
      <pubDate>Wed, 13 Mar 2019 20:34:06 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN.zip 
[LAB의 목적] L3를 수행하는 백본스위치 1대를 놓고 서로 다른 VLAN간에 ip routing을 수행하여 서로 다른 VLAN간에 통신 시험 
[습득해야할 내용]  Cisco IOL에서 스위치 이미지를 사용할때  L3 라우팅기능을 사용하려면 ip routing L3 스위치에서 default gateway를 지정하려면 ip route 0.0.0.0 0.0.0.0 nexthop으로 지정 L2스위치로만 사용하려면 no ip routing L2 스위치에서 default gateway를 지정하려면 ip default-gateway nexthop으로 지정   </description>
    </item>
    
    <item>
      <title>2.1 L2스위치 기본LAB</title>
      <link>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</link>
      <pubDate>Wed, 13 Mar 2019 20:23:12 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</guid>
      <description> [구성도] LAB구성파일: 20161222_L2-VLAN.zip 
[LAB의 목적] UnetLAB에 등록한 Cisco IOL이미지가 정상적으로 동작하여 L2스위치의 기능을 수행하는지를 시험 
[습득해야할 내용]  Cisco스위치의 기본설정 (보안을 고려한 설정으로 기본적으로 설정하는 내용에 대한 설정 템플릿을 만들어 보기) VPC의 기본 IP설정방법과 통신명령 익히기 동일한 VLAN상의 노느들간의 통신확인하기  </description>
    </item>
    
    <item>
      <title>1.4 Cisco IOU/IOL 이미지 구성하기</title>
      <link>http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 11 Mar 2019 22:23:10 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> Cisco IOU/IOL 이란? Cisco IOU/IOL이미지 추가하기  구성방법은 How To Add Cisco IOU IOL iourc라이선스 파일 만들기 Cisco의 추적?? /etc/hosts에 xml.cisco.com확인 images파일 위치에 복사 permission수정 스크립트  LAB을 생성하고 장비를 추가하여 구동해보기 telnet 기본프로그램을 putty로 변경하기 Windows integration pack을 설치하여 putty를 포함해서 윈도우에서 LAB장비를 연결하는 클라이언트 프로그램들이 설정됨  </description>
    </item>
    
    <item>
      <title>1.3 UnetLab(EVE-NG) 설치하기</title>
      <link>http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 11 Mar 2019 22:01:36 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>Check if Virtualization Technology is available for UnetLab  설치한 VMware Player에 UnetLab을 위한 가상머신을 생성할때 Virtualize Intel VT-x/EPT or AMD-V/RVI기능이 활성화됨을 확인 Open-Source Routing and Network Simulation  Installing UnetLab on a Physical Server  VMWare Player에 가상머신으로 설치하지만 설치방법은 물리적인 서버에 설치하는 방법과 동일하게 설치 설치방법은 Open-Source Routing and Network Simulation를 참조 설치후에 grub를 수정하는 부분 주의할것!!!  설치후에 처음 부팅할때 UnetLab구성하기  설치한 후에 처음으로 부팅하면 UnetLab설정화면이 기본으로 구동되는데 우분투는 root암호를 넣는 부분이 없기때문에 자동으로 구동되는 프로세스를 찾아서 중지한후에 수동으로 설정하는 것을 진행할 필요가 있음  브라우저에서 UnetLab연결하고 기본 사용법 익히기 UnetLab에서 구성하는 장비들을 실제PC에서 자유롭게 접속하고 관리하기 위해서는 VMWare와 우분투, UnetLab간의 네트워크 어댑터 고나계를 정확하게 이해를 해야합니다.</description>
    </item>
    
    <item>
      <title>1.2 어떤 배포판을 설치할것인가?</title>
      <link>http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Mon, 11 Mar 2019 21:37:23 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/</guid>
      <description>UnetLab Requirement  처음 EVE-NG프로그램을 접했을때는 UnetLab이라는 이름으로 배포되었습니다. 시간이 흐르고 흘러 소프트웨어가 정교하게 다듬어지면서 EVE-NG라는 이름으로 변경되더군요. 지금도 Pro패키지가 있지만 완전 상용화가 될까봐 걱정을 하면서 사용중입니다. 초기 시스템 요구사항에 따라서 Ununtu 14.04 LTS버전을 사용했었지만 EVE-NG는 16.04버전을 권장하고 있습니다.  무료로 사용할 수 있는 VMWare Player에 Ubuntu 16.04 LTS버전 설치하기  4GB RAM과 4개의 Processor로 설치진행 향후 LAB을 크게 구성할때를 대비하여 8GB RAM을 사용하는것이 좋습니다.  우분투 일반버전과 LTS버전차이 우분투 Desktop버전과 Server버전차이 우분투리눅스 설치후에 putt로 원격연결하는 방법 우분투리눅스에 연결해서  우분투의 sudo개념 업데이트: apt=get update; apt-get upgrade dist upgrade는 하지말것!</description>
    </item>
    
    <item>
      <title>1.1 리눅스의 기본</title>
      <link>http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 11 Mar 2019 21:18:59 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/</guid>
      <description>운영체제란? (OS, Operating System) 커널과 shell Unix의 History: BSD계역과 System-V계열의 유닉스부터 전반적인 유닉스의 발전 히스토리를 설명 리눅스란? 리눅스 배포판이란? 리눅스의 배포판 History 리눅스의 init 왕데몬에 관하여 하지만, 이제는 Systemd가 대세 패키지 관리 명령어  Debian계열(Ubuntu): apt-get RedHat게열(CentOS): yum   리눅스라는 운영체제를 설명하기 위하여 운영체제에 대해서 간략하게 설명하고 사용자가 입력하는 명령어을 받아서 실행하는 명령어해독기(shell)에 대한 설명과 여러가지 shell별로 환경변수를 설정하는 방법을 살펴봅니다. 리눅스의 다양한 배포판들이 존재하는 것을 설명하고 배포판들의 뿌리를 설명할 것입니다.</description>
    </item>
    
    <item>
      <title>0.6 네트워크장비개요</title>
      <link>http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/</link>
      <pubDate>Mon, 11 Mar 2019 13:43:09 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/</guid>
      <description>네트워크에 사용되는 케이블을 알아보면서 모든 케이블마다 통신할 수 있는 거리제한이 있다는 것을 알게되었습니다. 한 세그먼트의 최대거리에 수용할 수 있는 PC들이 모두 수용되었을떄 추가적인 케이블 세그먼트를 만드는데 이 두 세그먼트간의 통신은 어떻게 할까요? 이렇게 케이블의 물리적인 거리의 한계를 극복하기 위하여 네트워크장비들이 등장하게 됩니다. 등장한 네트워크장비는 Repeater(리피터), Bridge(브리지), Router(라우터)입니다. 우리는 OSI 7 Layer중에서 아래 3계층만 다룬다고 했는데, 등장한 네트워크장비들이 이 3계층에 아래와 같이 매핑됩니다. Repeater &amp;nbsp;&amp;nbsp;:거리연장 + 신호증폭  리피터는 케이블의 물리적인 거리한계를 극복하도록 거리를 연장하는 기능과 감쇠된 신호를 증폭하여 다시 전달할 수 있는 기능을 제공합니다.</description>
    </item>
    
    <item>
      <title>0.5 Ethernet발전과 케이블 악세사리</title>
      <link>http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/</link>
      <pubDate>Mon, 11 Mar 2019 11:37:21 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/</guid>
      <description>이제까지 10Mbps Ethernet만 살펴봤는데 기본에 충실하면 이후는 동일합니다. 이후로는 Ethernet으로 쭈~~욱 발전한다고 얘기했습니다. 그렇다면 동일한 CSMA/CD방식에 broadcast네트워크라는 점만 알고 있으면 되겠네요. 10Mbps이후로 등장하는것이 100Mbps를 지원하는 FastEthernet방식입니다. FastEthernet에서는 사용하는 케이블 종류에 따라서 아래와 같은 표준안을 사용했는데 각 표준별로 케이블의 최대거리를 잘 살펴보세요.  A동과 B동간의 거리가 600M일때 100Mbps FastEthernet방식으로 구성해보세요.  FastEthernet이 보편화되면서 더 빠른 속도가 필요해서 등장하는것이 1Gbps를 제공하는 GigabitEthernet입니다. GigabitEthernet도 사용하는 케이블의 종류에 따라서 여러가지 표준안이 있으므로 표준별로 케이블의 최대거리를 잘 확인하세요.</description>
    </item>
    
    <item>
      <title>0.4 Cable에 대한 정리</title>
      <link>http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 11 Mar 2019 10:52:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/</guid>
      <description>이제까지 가상의 통신모델과 구성형태, 어떠한 방식으로 통신하는지를 정의했으니 이제는 직선으로 표시했던 케이블부분을 정의해보겠습니다. 위의 그림에서 보듯이 처음 교육을 시작할때부터 일직선으로 그린부분이 있는데, 이 일직선이 10Base5케이블을 의미하는 것입니다. 공유매체(공통으로 사용한다)인 케이블을 10Mbps Ethernet에서부터 출발을 해보겠습니다. 위의 그림에 나열된것은 10Mbps Ethernet에서 사용하는 케이블의 종류입니다.케이블 이름에서 맨앞의 10은 10Mbps를 의미하고 Base는 Baseband신호방식(저대역)을 의미하며, 맨 마지막은 케이블의 거리제한을 의미합니다.  Ethernet에서 사용하는 신호방식을 Baseband(저대역)신호방식이라고 하는데 방송국에서 사용하는 MBC, SBS, KBS의 B는 Broadband(광대역)신호방식 입니다. 저대역통신방식과 광대역통신방식간의 차이점이 무엇인지 간략하게 찾아보세요.</description>
    </item>
    
    <item>
      <title>0.3 Ethernet이란</title>
      <link>http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/</link>
      <pubDate>Mon, 11 Mar 2019 10:20:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/</guid>
      <description>구성도를 그리면서 Topology가 무엇인지 어떠한 형태로 연결되는구나&amp;hellip;하는식으로 이해가 좀 되었으면 합니다. 
우리가 앞으로 취급할 부분은 LAN이고&amp;hellip;. LAN에서 사용하는 통신규칙중에 Ethernet을 가장많이 다루게 될것입니다.  Ethernet이란 통신을 하고자 하는 PC들을 선으로 연결해야하는데 어떤선으로 어떤방식으로 연결할것인가, 연결된 PC들끼리 통신을 하려고 하면 어떻게 동작을 해서 통신을 할것인가와 같은 규칙을 정의해놓은것이라고 생각하면 됩니다. 제가 Ethernet을 설명할때는 아래와 같이 2가지로 설명하곤합니다.  Ethernet이란 무엇인가? 라는 질문을 받는다면 CSMA/CD방식의 broadcast네트워크이다. 라고 정의할 수 있습니다. CS(Carrier Sense) Ethernet은 케이블을 기본적으로 공유(share)한다는 개념을 가지고 있습니다.</description>
    </item>
    
    <item>
      <title>0.2 물리적인 연결정의</title>
      <link>http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/</link>
      <pubDate>Mon, 11 Mar 2019 10:03:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/</guid>
      <description>통신을 하고자 하는 PC의 내부에는 우리에게 보이지는 않지만 논리적인 통신모델이 만들어진다고 생각합시다. 그 통신모델 맨 꼭대기층(응용계층)에서 사용자 어떤 작업을(브라우저로 사이트 연결)수행하면 맨꼭대기층에서부터 차례로 아래층으로 내리는 작업을 수행하고 물리계층까지 도달해서 전기신호로 보내진다는 것입니다.  통신을 하고자하는 PC에는 네트워크에 연결하기 위해서 어떤 장치가 있어야 합니다. 그것이 유선이든 무선이든.. 그러한 장치를 네트워크카드라고 하는데 내 PC에 어떤 종류의 네트워크카드가 설치되어 있는지 확인할 줄 알아야 합니다. 설치된 네트워크카드는 고유한 하드웨어주소(MAC Address)를 가지는데 장치관리자에서 찾은 네트워크카드와 MAC주소를 연관시켜서 이 MAC은 내 PC에 설치된 어떤 네트워크 카드의 주소이다를 알 수 있어야 합니다.</description>
    </item>
    
    <item>
      <title>0.1 OSI 7 Layer</title>
      <link>http://ssanggu.github.io/ch0/osi-7-layer/</link>
      <pubDate>Sun, 10 Mar 2019 18:56:07 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch0/osi-7-layer/</guid>
      <description>PC A와 B간에 통신을 한다고 하면 아래의 그림처럼 각각의 PC상에 우리에 게 보이지 않는 논리적인 7층짜치 스택이 만들어진다고 보면 됩니다. 이것을 OSI 7 Layer Model이라고 하는데, 통신을 하고자 하는 서로간에 통신방법을 정의하고 체크하기 위한 논리적인 모델이라고 생각하면 될듯합니다. 7층짜리 스택의 맨 상단은 응용게층으로 우리가 일반적으로 인터넷을 접근하기 위하여 사용하는 프로그램들이 존재한다고 보면되는데, 가장많이 사용&amp;gt;하는 인터넷브라우저에서 수행되는 작업들이 이 7층에서 발생한다고 생각하며 됩니다. A &amp;ndash;&amp;gt; B한테 통신을 하려고 시도한다고 하면 아래의 그림처럼 보내는 측에서는 보자기로 짐을 싸는 행동(Encapsulation)을 하고, 받는측에서는 보자기 의 짐을 푸는 행동(Decapsulation)을 하게됩니다.</description>
    </item>
    
  </channel>
</rss>