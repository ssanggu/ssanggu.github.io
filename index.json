[
{
	"uri": "http://ssanggu.github.io/ch2/",
	"title": "EVE-NG LAB",
	"tags": [],
	"description": "",
	"content": " Chapter 2 EVE-NG LAB  본 장은 그동안 구성해서 시험했던 EVE-NG LAB에 대한 환경을 정리합니다. LAB에 대한 설정파일을 자세하게 올리는 것이 아니고 구성했던 LAB의 구성도와 해당 LAB에서 습득해야하는 사항을 위주로 정리합니다. 해당 지식을 얻기위하여 본 LAB을 구성해서 실제로 설정을 해보세요. 가능하면 import해서 사용할 수 있는 LAB파일을 같이 올리겠지만 가능하면 실제적으로 LAB구성도를 꾸며보는것이 많은 도움이 될것입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch1/",
	"title": "준비단계",
	"tags": [],
	"description": "",
	"content": " Chapter 1 준비단계  본 장에서는 EVE-NG LAB을 사용하기 위해서 준비해야할 사항들을 정리하는 장입니다. LAB을 진행하는 동안 우분투 리눅스를 많이 접하게되지만 별도로 리눅스에 대한 자료를 정리하지 않습니다. 무료로 사용할 수 있는 VMWare Player를 설치하여 EVE-NG를 가상으로 설치하여 사용할 것입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch0/",
	"title": "네트워크 기초이론",
	"tags": [],
	"description": "",
	"content": " Chapter 0 네트워크 기초이론  본 장에서는 네트워크에 입문할때 기본적으로 알아야하는 기초이론에 대한 정리입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/",
	"title": "블로그소개",
	"tags": [],
	"description": "",
	"content": " 블로그 소개 한 상구(Han SangGu), 네트워크 필드 엔지니어, ssanggu@gmail.com\n \n 본 블로그는 EVE-NG(UnetLab)를 사용하여 구성하고 시험한 LAB환경을 정리하고, 각각의 LAB에서 어떤 지식을 습득해야하는지를 정리하는 블로그입니다. 가능한 다양한 네트워크 장비를 배치하여 구성함으로써 네트워크에 대한 개념을 좀더 효율적으로 정리할 수 있었습니다.    EVE-NG 가상화(VMWare Player, docker, kvm) 리눅스(Ubuntu, CentOS) 네트워크장비(Cisco, Juniper, Extreme VyOS) 보안장비(ASA, PaloAlto, SECUI MF2) IPSec VPN, OpenVPN, SSL VPN SDN(VxLAN)   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.37-configuring-basic-ospf-1/",
	"title": "2.37 Configuring Basic OSPF-1",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0304_Configure-OSPF1.zip \n[LAB의 목적] 본 LAB은 Frame Relay망과 Ethernet이 혼합된 네트워크상에서 OSPF라우팅 프로토콜의 기본동작을 숙지하기위한 LAB입니다. \n[LAB수행조건]  LAB구성도에 따라서 LAB상의 장비들을 설정하세요. 본 LAB에서는 인접한 장비끼리만 통신되도록 구성합니다.(R1, R2, R4, R5는 인접하니깐 서로 통신 가능, R1과 R3는 한단계 거쳐서 있으므로 통신불가. R4와 SW1은 통신가능 등) OSPF에 대한 기본개념과 기본용어를 찾아보고 시작하세요.  OSPF is a link state protocol and each router maintains a topology map of their configured area ABR, ASBR, DR, BDR DROTHER의 의미파악 ospf protocol number: 89 multicast address 사용용도(224.0.0.5, 224.0.0.6) OSPF interface type Link State Advertisement types  첨부파일 0304_Configuration Basic OSPF LAB가이트.pdf를 참조해서 아래의 사항을 설정해보세요.  R1, R2, R4, R5의 frame-relay hub-and-spoke인터페이스에 ospf area 0 구성하기 R1, R2, R4, R5의 frame-relay hub-and-spoke인터페이스의 OSPF network type변경하기 ospf adjacency확인하기 debug ip ospf 1 events를 설정하고 clear ip ospf 1 process로 ospf를 reset했을때 어떠한 이벤트가 발생하는지 확인하기 ospf에 대한 debug확인하기     Attachments   0304_Configuration Basic OSPF LAB가이드.pdf  (298 ko)   14193-frbacktoback.pdf  (16 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.36-frame-relay-switch/",
	"title": "2.36 Frame Relay Switch",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0302_Frame-Relay1.zip \n[LAB의 목적] 본 LAB은 WAN기술중에 Frame Relay망으로 라우터들을 연결하여 통신설정하는 방법을 습득하기 위한 LAB입니다. 하단에 참조한 페이지는 본 LAB을 설정하는 방법을 단계적으로 설명한 페이지입니다. 문서의 내용에 따라서 설정하면서 Frame Relay설정방법을 이해하시기 바랍니다. \n[LAB수행조건]  Frame Relay망에 대한 기본개념 이해하기 Frame Relay에서 사용하는 용어 이해하기  PVC(Permanent Cirtual Circuit) SVC(Switched Virtual Circuit) DLCI(Data-Link Connection Identifier) LMI(Local Management Interface)  Cisco IOL한대를 Frame Relay스위치로 설정하여 WAN구간으로 사용하므로 Cisco라우터를 Frame Relay스위치로 활용하는 방법을 이해하기  \n[추가 LAB] 위의 LAB을 설정완료하고 정확하게 이해했다면 아래 그림에서 표시하고 있는 네트워크 구성에 대해서 직접 Frame Relay스위치를 구성하고 LAB생성해서 설정을 해보세요. 참조한 페이지: Frame Relay Switch on a Cisco Router\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.35-port-security/",
	"title": "2.35 Port Security",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0228_port-Security.zip \n[LAB의 목적] 네트워크를 운영하다보면 특정포트에 허브를 연결해서 다수의 시스템을 사용하는것을 제어할 경우가 발생합니다. Cisco의 port secuirty기능을 사용하여 스위치 포트에 Learning되는 mac address갯수를 제한해서 하단에 허브사용을 제어해보는 LAB입니다. \n[LAB수행조건]  HUB2, HUB3장비는 SW1과 동일한 Cisco IOL이미지를 사용했지만, HUB처럼 생각하기 위해서 no ip routing설정만하고 다른 설정은 아무것도 하지 마세요. SW1스위치의 e0/0포트는 1개의 mac만 허락하도록 설정하고 VPC4, 5, 6중 가장 먼저 Learning되는 노드만 통신이 되고 나머지는 통신이 안되도록 구성하기 SW1스위치의 e0/1포트는 1개의 mac만 허락하도록 설정하고 상상 VPC8만 통신이 되도록 구성하기 HUB가 Cisco IOL이미지로 구성함에 다라서 의도하지 않은 문제가 발생할 것입니다. 어떠한 문제점이 발생하는지와 그것에 대한 해결책을 제시해 보세요.  참조한 페이지: Switchport Port Security Explained With Examples\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.34-ssl-vpn-with-asa/",
	"title": "2.34 SSL VPN with ASA",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0218_Use-ASA.zip \n[LAB의 목적] Cisco ASA에서 제공하는 AnyConnect SSL VPN기능을 활성화하여 SSL VPN을 시험하는 LAB입니다. 사용자가 IPSec VPN을 사용할때는 별도 IPSec VPn Client를 설치해야하지만 SSL VPN은 웹브라우저로 연결하여 Active-X로 내려받는 클라이언트를 설치하여 사용하는 방식에 대한 이해도 필요합니다. \n[LAB수행조건]  LAB구성도는 2.33 Cisco ASA이미지구성 LAB에서 사용한 구성도를 그대로 이용 ASDM 관리툴의 마법사(Wizard)기능을 사용하여 AnyConnect SSL VPN설정하기.(처음 설정시에 CLI방식으로 설정하는데 어려움이 있기때문에 마법사를 통하여 설정했을때 어떤부분이 config상에 들어가는지 확인하는것도 좋은 방법) VPN Pool은 10.0.200.100 ~ 10.0.200.110 사용 Split DNS설정으로 10.0.200.0/24네트워크만 VPN을 타도록 설정할것.(Split DNS는 VPN을 사용하는 사용자가 VPN을 연결한 시점에 모든 트래픽이 암호화된 VPN트래픽으로 VPN Peer로 전달되도록 하지 않고, 오직 통신하고자 정의한 대역하고만 암호화통신을 수행하고 그 이외의 통신은 현재 사용자 인터넷 연결상태를 사용하는 방식) 구성후 브라우저로 접속시 Java버전 때문에 차단되는 부분 해결해서 Avtive-X프로그램이 정상적으로 설치되도록 하기 AnyConnect 프로그램 다운로드 후 설치 AnyConnect SSL VPN 연결되고 통신됨을 확인하기    Attachments   01-Cisco ASDM 6.4 for ASA - 10.0.100.2.png  (53 ko)   02-AnyConnect VPN Connection Setup Wizard.png  (72 ko)   03-AnyConnect VPN Connection Setup Wizard.png  (13 ko)   04-AnyConnect VPN Connection Setup Wizard.png  (16 ko)   05-Add Identity Certificate.png  (12 ko)   06-Manage Identity Certificates.png  (13 ko)   07-AnyConnect VPN Connection Setup Wizard.png  (17 ko)   08-AnyConnect VPN Connection Setup Wizard.png  (18 ko)   09-AnyConnect VPN Connection Setup Wizard.png  (16 ko)   10-AnyConnect VPN Connection Setup Wizard.png  (17 ko)   11-AnyConnect VPN Connection Setup Wizard.png  (13 ko)   12-AnyConnect VPN Connection Setup Wizard.png  (12 ko)   13-AnyConnect VPN Connection Setup Wizard.png  (19 ko)   14-AnyConnect VPN Connection Setup Wizard.png  (72 ko)   15-SSL VPN Service.png  (10 ko)   16-Installation - Internet Explorer.png  (55 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.33-cisco-asa%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B5%AC%EC%84%B1/",
	"title": "2.33 Cisco ASA이미지구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0218_Use-ASA.zip \n[LAB의 목적] Cisco ASA이미지를 UnetLab에 구성하여 LAB상에서 방화벽장비로 이용하기 위한 LAB입니다. ASA이미지를 구성한후에 기본적인 설정과 ASDM을 통해서 ASA방화벽을 연결한후 기본적인 사용법을 익혀보세요. \n[LAB수행조건]  Cisco ASA이미지를 unetLab에 환경구성하기 모든 노드가 통신이 가능하도록 환경구성하기 ASA의 방화벽정책을 ALL Permit정책으로 설정하기 ASA 관리포트 연결이 호스트OS에서 가능하도록 구성하기  http server enable http 접근ip허용  호스트OS에서 ASA관리 연결 및 기본 사용법 숙지하기   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.32-ftp%EC%97%90-%EB%8C%80%ED%95%9C-acl%EC%84%A4%EC%A0%95/",
	"title": "2.32 FTP에 대한 ACL설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0212_FTP_mode-ACL.zip \n[LAB의 목적] FTP프로토콜은 passive mode와 active mode로 동작할때 사용되는 port번호가 다르고 요청하는 방향이 달라지기때문에 보안정책을 설정하는데 까다로운 프로토콜입니다. IOS라우터의 ACL기반에서 FTP프로토콜에 대한 ACL정책을 설정하면서 FTP프로토콜에 대한 이해를 돕고자하는 LAB입니다. \n[LAB수행조건]  FTP의 Active Mode와 Passive Mode이해하기 vsftpd환경설정에서 Active Mode와 Passive Mode설정하는 방법 익히기 ftp클라이언트 프로그램(우분투의 ftp명령어)에서 active mode와 passive mode전환 방법 익히기 두 시스템이 정상 통신 되도록 환경구성하기 FTP는 제어포트와 데이터포트를 다르게 사용하기 때문에 연결후에 디렉토리 목록 확인이 필요함 Active Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 Passive Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 R1 e0/1인터페이스 inbound에 ACL을 적용해서 FTP연결만 허용하도록 정책설정    Attachments   FTP Active 모드와 Passive 모드의 차이점.pdf  (252 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.31-cacti%EC%99%80-snmp-v3/",
	"title": "2.31 Cacti와 SNMP V3",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0207_NTP-Time-Sync.zip \n[LAB의 목적] 오픈소스 Cacti프로그램은 SNMP기반으로 장비의 상태모니터링과 누적 트래픽그래프를 제공할 수 있는 훌륭한 프로그램입니다. 우분투시스템에 Cacti프로그램으로 모니터링 시스템을 구축하는 방법을 습득하고 LAB상의 장비에 SNMP V3설정하는 방법과 Cacti에 장비를 등록하여 모니터링하는 방법을 배우고자 합니다. \n[LAB수행조건]  LAB구성도는 2.30 NTP서버구성 및 시간동기화에서 사용한 LAB을 그대로 이용 R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server에 cacti패키지를 설치하고 구성하기 R1에 Static NAT설정: R1 e0/0 80/TCP \u0026mdash;-\u0026gt; 10.0.10.10 80/TCP 호스트OS에서 R1의 e0/0인터페이스 IP(192.168.234.90)로 웹 연결하면 NTP-server에 구성한 cacti가 연결되어야 함 ubuntu-client에 net-snmp패키지를 설치하고 SNMP V3로 에이전트 구성 Cisco, Juniper에 SNMP V3구성 Cacti에 LAB상의 모든 시스템을 등록하고 정상 모니터링이 되는지 확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/",
	"title": "2.30 NTP서버구성 및 시간동기화",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0207_NTP-Time-Sync.zip \n[LAB의 목적] 네트워크 장비나 보안장비등 로그를 모니터링 해야하는 시스템의 시간은 중요한 항목입니다. 따라서, 장비에 NTP서버를 통한 시간동기화는 필수라고 할 수 있습니다. 본 LAB은 Docker시스템에 NTP서버를 구성하여 장비들의 시간을 동기화하는 LAB입니다. 다양한 시스템별로 NTP시간동기화 설정을 어떻게 하는지 방법을 익혀보세요. \n[LAB수행조건]  R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server와 ubuntu-client는 우분투 클라이언트 이미지를 사용한 컨테이너로 동작 NTP-server에 인터넷으로부터 NTP패키지를 설치하여 time서버를 구동 Cisco장비(R1, SW1), Juniper(Olive-R), Ubuntu Linux(ubuntu-client)시스템별로 10.0.10.10으로 NTP를 지정하여 시간동기화 확인  구성완료 안됨 도커 컨테이너에서 커널의 시간을 건드리는 문제로 인하여 NTP서버구동에 문제 발생. 향후 KVM환경의 리눅스시스템을 구현할때 다시 구성시도 필요!!!\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.29-extended-acl/",
	"title": "2.29 Extended ACL",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0206_Extended-ACL.zip \n[LAB의 목적] 단순한 ACL을 만들어봤으니 프로토콜과 서비스 포트번호를 포함하여 좀 더 복잡한 보안정책을 구성해보는 LAB입니다. \n[LAB수행조건]  R1 e0/0에 pnet0를 연결하고 NAT설정하여 LAB상의 시스템들이 인터넷 가능하도록 설정 아래 정책으로 Static NAT설정  192.168.234.90 80/TCP \u0026mdash;-\u0026gt; 10.0.100.10 80/TCP 192.168.234.90 10022/TCP \u0026mdash;-\u0026gt; 10.0.100.20 22/TCP  아래의 보안정책을 Extended ACL로 생성하고 인터페이스 적용하기  내부(10.0.100.0/24) \u0026mdash;-\u0026gt; 외부는 모든 통신 permit 외부 \u0026mdash;-\u0026gt; 10.0.100.10 80/TCP permit 외부 \u0026mdash;-\u0026gt; 10.0.100.20 22/TCP permit ALL DENY   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/",
	"title": "2.28 Juniper의 Packet Filtering",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 2.27 Standard ACL에서 사용한 LAB에서 R1라우터를 Olive Router로 교체 \n[LAB의 목적] 다양한 장비에서 보안정책 설정하는 방법을 경험하기를 추천합니다!!!\n\n[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.27-standard-acl/",
	"title": "2.27 Standard ACL",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0206_Standard-ACL.zip \n[LAB의 목적] 향후 방화벽의 복잡한 보안정책을 무리없이 설정할 수 있도록 하기위해서 라우터의 IOS기반 ACL(Access Control List)기능을 사용하여 보안정책을 적용하는 방법을 배우고자하는 LAB입니다. ACL테이블을 작성하고 인터페이스의 inbound정책과 outbound정책에 따라 어떤 변화가 있는지 주의깊게 살펴보세요. 저의 생각으로는 보안정책을 적용받는 대상에 가장 가까운 인터페이스의 방향에 적용하는것이 효율적으로 봅니다.\n\n[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절 두번째 ACL에 대한 통신확인을 수행할때 192.168.100.100 호스트만 통신허락을 했는데, 10.0.100.0/24 \u0026ndash;\u0026gt; 192.168.100.100이 통신이 되지 않은가요? 왜 그럴까요?? 한번 고민해보세요!!\n    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/",
	"title": "2.26 WireShark로 패킷캡처-II",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-make-server.zip \n[LAB의 목적] 본 LAB은 2.25 Docker로 서버구현하기에서 구성한 LAB을 그대로 이용하여 클라이언트와 서버간에 TCP통신이 수행될때 WireShark로 패킷을 잡아보고 패킷을 분석해보는 LAB입니다. 패킷을 ASCII형태로 decode했을때 어떻게 보이는지와 Flow Graph에서 서버와 클라이언트가 사용하는 TCP Port번호를 주의깊게 살펴보세요.\n\n[LAB수행조건]  WireShark캡처 실행하는 방법 다시한번 숙지하기 ubuntu-client(10.0.0.100)에서 SW1(10.0.0.5)로 telnet, ssh연결에 대한 capture ubuntu-client(10.0.0.100)에서 ftp-server(10.0.0.20)로 ftp, sftp연결에 대한 capture ubuntu-client(10.0.0.100)에서 www-server(10.0.0.10)로 http연결에 대한 capture    Attachments   31장_Wireshark로 패킷 Capture하기.pdf  (868 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/",
	"title": "2.25 Docker로 서버구현하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-make-server.zip \n[LAB의 목적] 본 LAB은 UnetLab에서 이용할 각종 서버를 Docker시스템을 통하여 구현하고 클라이언트에서 각 서버들을 연결할 수 있는 환경을 구성하는 LAB입니다.\n\n[LAB수행조건]  R1라우터에 VMWare NAT인터페이스를 e0/0에 연결하고 NAT설정을 수행하여 LAB이 인터넷 사용이 가능하도록 구성 SW1스위치는 기본설정 ubuntu-client는 Docker 기본이미지로 만들어진 컨테이너를 사용. 인터넷까지 정상통신되는것을 확인 www-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 apache2, ssh서버를 패키지로 설치하여 서부구성하고 테스트계정 생성하기 ftp-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 vsftpd, ssh서버를 패키지로 설치하여 서버를 구성하고 테스트계정 생성하기 ubuntu-client시스템에서 각 서버로 ssh연결, 웹연결, ftp연결 시험 수행  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.24 Docker에서 인터넷 사용하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-use-internet.zip \n[LAB의 목적] LAB에 추가하는 Docker시스템에 다른 패키지를 설치하거나 설치된 패키지를 업데이트 하기 위해서는 인터넷 연결이 필요합니다. 라우터의 NAT설정을 통해서 Docker에서 인터넷 연결이 가능하도록 설정해보세요.\n\n[LAB수행조건]  LAB에서 생성하는 Docker시스템에서 인터넷을 접근해서 패키지 설치가 가능하도록 설정 R1라우터의 e0/0인터페이스를 VMWare의 NAT인터페이스(pnet0)에 연결하고 ip를 자동할당으로 받도록 설정 R1라우터에 NAT를 설정하여 내부네트워크(10.0.0.0/24)가 외부로 통신할때 e0/0인터페이스 IP로 PAT변환이 수행되도록 설정 우분투 클라이언트 시스템에서 패키지 업데이트를 수행  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.23 UnetLab에서 Docker활용하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0131_Use-Docker.zip \n[LAB의 목적] 컨테이너 기술을 사용하여 경량의 시스템을 구현해주는 도커시스템을 UnetLab에 추가함으로써 다수의 서버를 LAB상에 올릴수 있도록 합니다. \n도커(Docker)란? Docker에 대한 개념정리는 도커 무작정 따라하기를 참조했습니다. \n[LAB수행조건]  UnetLab이 설치된 우분투 리눅스에 Docker설치하기 본 LAB을 구성할때 참조한 How To Adding and Run Docker Container on UnetLab 문서는 여전히 참조할만 하지만 우분투에 docker설치하는 내용은 최근 우분투에 repository를 이용하여 설치하는 방법을 이용해야 합니다. 재검색을 통해서 Installing Docker in EVE-NG 사이트를 찾았습니다. 우분투에 docker를 설치하는 방법과, unetlab에서 사용하는 docker LISTEN포트 수정하는것, unetlab 장비 템플릿에 docker가 기본으로 disable상태인데 활성화하는 방법등 수정이 필요한 내용이 같이 포함되어 있습니다.\n  Docker사용에 필요한 기본 명령 숙지하기  검색: # docker -H=tcp://localhost:4243 search --no-trunc ubuntu 설치: # docker -H=tcp://localhost:4243 pull ubuntu 설치된 이미지 목록 확인하기: # docker -H=tcp://localhost:4243 images 설치된 이미지 삭제하기: # docker -H=tcp://localhost:4243 rmi 이미지-ID 컨터이너 실행하기: # docker -H=tcp://localhost:4243 run 이미지-ID 실행중인 컨터이너 목록 확인하기: # docker -H=tcp://localhost:4243 ps 모든 컨테이너 목록 확인하기: # docker -H=tcp://localhost:4243 ps -a 컨테이너 삭제하기: # docker -H=tcp://localhost:4243 rm 컨테이너-ID 컨테이너 접속하기: # docker -H=tcp://localhost:4243 exec -it /bin/bash 이미지 빌드하기: (1). Dockerfile 작성하기 (2). # docker -H=tcp://localhost:4243 build --tag 이미지이름 - 이미지이름은 대문자 안됨. 소문자, 숫자, 언더바를 사용   참고파일로 앞으로 LAB에서 활용할 몇가지 Docker시스템을 build하는 방법의 문서와 Dockerfile을 올립니다. 문서를 참고하여 Apache2웹서버, exim4메일서버, Mysql서버, OpenSSH서버, 기본명령어를 포함한 OpenSSH클라이언트, vsftp서버를 build하여 준비해보세요.   참고파일   0205_UnetLab-Dockerfile작성하여이미지만들기.pdf  (274 ko)   Dockerfile_apache2-server  (0 ko)   Dockerfile_exim4-SMTP-server  (0 ko)   Dockerfile_mysqld-server  (0 ko)   Dockerfile_openssh-server  (0 ko)   Dockerfile_ubuntu-client  (0 ko)   Dockerfile_vsftpd-server  (1 ko)     우분투 클라이언트를 Docker이미지로 빌드하기. 빌드할때 클라이언트에서 사용하는 기본명령어와 expect스크립트를 사용 가능하도록 만들기 expect스크립를 사용하여 SW1스위치의 config를 백업하기 작성한 스크립트를 crontab에 추가하여 주기적으로 백업하도록 설정하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/",
	"title": "2.22 Cisco IOS NAT 설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0123_CiscoIOS-NAT.zip \n[LAB의 목적] 본 LAB에서는 Cisco IOS라우터에서 NAT설정하는 방법을 습득합니다. 내부의 노드들이 외부로 통신할때 TCP port기반의 NAT를 통해서 주소변환이 발생하도록 설정하고, 외부에서 내부측의 장비로 원격연결을 하기 위한 inside destination NAT를 설정하는 방법을 습득합니다. \n[LAB수행조건]  LAB상의 모든 노드가 통신이 가능하도록 설정 스위치가 원격접속이 가능하도록 설정 SW1에서 SW2로 telnet, SW2에서 SW1으로 telnet 접속하고 who명령을 통해서 출발지 IP주소를 확인하기 10.0.0.0/24대역에서 10.10.0.0/24대역으로 통신할때 192.168.200.200 IP로 PAT변환이 되어서 통신되도록 NAT설정 NAT설정후에 SW1스위치에서 SW2스위치로 telnet 연결하고 who명령으로 출발지 IP확인했을때 192.168.200.200으로 나오는지 확인 SW2스위치에서 telnet 192.168.200.200으로 연결하면 SW1스위치가 연결되도록 NAT설정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/",
	"title": "2.21 Cisco HSRP이중화 구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0120_Cisco-HSRP-Networks.zip \n[LAB의 목적] Cisco IOS 백본스위치에 대한 장애를 대비하기 위하여 이중화로 구성하고 게이트웨이 이중화 프로토콜인 HSRP를 사용하여 이중화 네트워크를 구성합니다. \n[LAB수행조건]  VRRP(Virtual Router Redundancy Protocol)와 HSRP(Hot Stanby Router Protocol)는 동일하게 게이트웨이를 이중화하는 프로토콜로 VRRP는 모든 제조사에서 사용가능 하지만 HSRP는 Cisco에서만 사용 가능 HSRP 기본구성 문서를 참조하여 LAB장비를 설정 VLAN100은 BACKBONE1이 Master, VLAN200은 BACKBONE2가 Master가 되도록 설정 show stanby brief로 HSRP상태확인 모든 노드에서 LAB상의 모든 IP로(slave ip address를 포함) 통신이 되는것을 확인 BACKBONE2를 stop했을때 HSRP Master가 BACKBONE1으로 전환되면서 네트워크 끊김이 없음을 보이려 했으나 사용한 이미지상의 버그로 인하여 fail-over시험은 완료 못함\n   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/",
	"title": "2.20 WireShark로 패킷 캡처",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] UnetLab에 구성하는 LAB자체에서 WireShark를 통한 패킷을 캡처가 가능합니다. LAB에서 WireShark를 사용할 수 있도록 구성하는 LAB입니다. 우분투에서는 sudo개념을 사용하고 있기때문에 root암호를 생성하는 과정이 필요합니다. \n[LAB수행조건]  네이버블로그에서 UNL에서 와이어샤크를 이용한 패킷캡처 라는 잘 정리된 글을 통해서 본 LAB을 잘 꾸밀 수 있읍니다. 원리: plink를 이용하여 UNL서버에 SSH터널을 구성하여 tcpdump데이터를 받아오는 구조\n  UnetLab사이트에서 Windows Client Side을 다운로드해서 설치하면 기본프로그램에 대한 레지스크리 등록 수행 wireshark_wrapper.bat파일에 USERNAME과 PASSWORD항목이 있는데 ssh로 연결해서 tcpdump를 실행할 수 있는 권한이 있어야 하므로 root계정정보를 입력해야함 우분투는 sudo개념을 사용함으로 root에 대한 암호설정 필요 ssh데몬의 config파일에서 root로 로그인할 수 있도록 설정 변경 필요 윈도우에 Wireshark프로그램 설치하고, wireshark_wrapper.bat파일의 내용중 wireshark프로그램의 경로를 수정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/",
	"title": "2.19 Remote Access VPN구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0118_RemoteAccess-VPN.zip \n[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN연결을 고려하지 않고 사용하면 라우터에서 해당 대역의 IP에 대해서 암호화를 진행해줍니다. 출장을 나갔거나 외부에서 사용하는 사용자들 위한 Remote VPN을 Cisco IOS라우터에 구성해서 사용자별로 VPN환경을 사용할 수 있도록 구성해봅니다. \n[LAB수행조건]  라우터 R1, SW, VPC1,2에 기본 IP설정 참고파일에 올린 pdf문서를 기반으로 R1에 Remote Access VPN설정 Windows7에 Cisco IPSec VPN Client 5.0.07버전 설치. 한번에 정상적으로 설치 안되는 경우가 발생할 수 있는데, 그럴 경우에 Windows 7을 재시작후에 다시 설치해보세요. Windows 7에서 192.168.234.100으로 IPSec연결 VPN Pool에서 IP할당 받아야 함 VPN 정상 연결후 Windows 7에서 10.2.1.0/24대역과 통신됨을 확인    참고파일   2017-01-18 15_19_43-QEMU (Win7).png  (87 ko)   2017-01-18 15_20_57-QEMU (Win7).png  (84 ko)   2017-01-18 15_21_25-.png  (71 ko)   2017-01-18 15_22_36-QEMU (Win7).png  (70 ko)   How to configure a Cisco IOS Remote Access IPSEC VPN.pdf  (227 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.18 IPSec Site-to-Site VPN 구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0118_L2L-IPSec_Tunnel.zip \n[LAB의 목적] 본사와 지사간에 공중망을 통해서 데이터전송을 할때 암호화된 트래픽으로 전달하기 위하여 VPN을 사용합니다. 본 LAB은 Cisco IOS기반 라우터를 사용하여 두 지점간에 IPSec VPN터널을 구성하는 방법을 습득합니다. \n[LAB수행조건]  두개의 라우터(R1, R2)를 Cloud(pnet0) 네트워크에 연결해서 구성 두대의 라우터간에 Site-to-Site 터널구성 IPSec터널을 통해서 10.1.1.0/24네트워크와 172.16.20.0/24 네트워크가 통신됨을 확인 debug를 통해서 IPSec세션 로그 확인해보기    참고파일   LAN-to-LAN IPsec Tunnel Between Two Routers.pdf  (281 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/",
	"title": "2.17 L3라우터의 Trunk인터페이스",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: L3-Ro_Trunk.zip \n[LAB의 목적] 물리적으로 단일 링크를 통해서 여러개의 VLAN을 통신하도록 하기 위해서 Trunk를 사용합니다. L3라우터장비에서 Trunk인터페이스를 sub-interface롤 생성하는 방법을 습득하는 LAB입니다. \n[LAB수행조건]  SW1, SW2스위치는 L2스위치로 설정 SW1, SW2스위치 각각에 2개의 VLAN을 생성하고 각각의 VLAN에 VPC를 연결 SW스위치와 Cisco, Juniper라우터간에 trunk를 설정하고 L3인터페이스를 설정 L3라우터에서 trunk로 연결되는 L3인터페이스 생성방법 습득 2대의 라우터간에 라우팅 설정 모든 VPC간에 통신 가능한지 확인  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/",
	"title": "2.16 Juniper Olive 기본명령어 학습",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0115_Juniper-Olive-1.zip \n[LAB의 목적] LAB에서 사용할 수 있는 장비들이 많다면 더 풍부한 테스트환경을 구현할 수 있습니다. Juniper장비를 LAB환경에서 사용하기 위해서 장비의 기본 명령어를 익혀보기위한 LAB입니다. \n[LAB수행조건]  Juniper Olive 이미지 업로드하고 압축해제하기 # tar xvpf Juniper*.ova 이미지 변환하기 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 JunOS\\ Olive-disk1.vmdk hda.qcow2 디렉토리 생성. Juniper이미지는 olive-이름으로 시작해야함. # mkdir -p /opt/unetlab/addons/qemu/olive-12.1R1.9 변환한 이미지 move # mv hda.qcow2 /opt/unetlab/addons/qemu/olive-12.1R1.9 권한수정 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions 구성한 LAB에서 JunOS명령어를 익혀보세요    참고파일   0115_Basic Juniper Router Configuration.pdf  (486 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/",
	"title": "2.15 Null0 라우팅",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0113_Routing확장-Lab.zip \n[LAB의 목적] 내부에서 외부로 유해사이트를 접근하는 문제를 급하게 차단을 해야 하는 경우에 방화벽설정이나 ACL설정을 하지 않고 라우팅을 해당사이트에 대해서 Null0로 설정함으로 차단을 설정할 수 있습니다. 본 Lab은 Null0 라우팅을 설정하여 패킷이 drop되는 방법을 습득합니다. \n[LAB수행조건]  Lab구성도는 2.6 Static route설정 LAB을 이용 모든 노드들이 통신이 되도록 구성하기 모든 노드들간에 통신이 정상적임을 확인한 후에 오로지 라우팅 조정으로만 VPC5가 통신이 안되도록 설정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.14 Etherchannel 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0110_EtherChannel_Lab.zip \n[LAB의 목적] 물리적인 포트 여러개를 묶어서 대역폭을 확장해서 제공하고 물리적인 포트의 장애를 대비할 수 있는 Etherchannel기술을 습득하는 Lab으로서 동일장비에서 설정하는것도 중요하지만 서로다른 제조사의 제품간에 연동도 중요합니다. 따라서, 본 Lab에서는 Cisco스위치와 VyOS간의 설정을 수행합니다. \n[LAB수행조건]  VyOS 리눅스 이미지 추가하기 Lab을 설정할때 etherchannel mode를 여러가지로 변경해보고 debug메시지로 덤프보면서 어떻게 동작하는지 이해하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/",
	"title": "2.13 rsyslogd로 중앙로그서버 구현",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip \n[LAB의 목적] 네트워크장비의 로그는 버퍼의 사이즈때문에 일정시간 지나면 overwrite되버립니다. 따라서, 원격서버에 로그서버를 구성하여 네트워크 장비의 로그를 저장하는것을 중요합니다. 본 LAB에서는 리눅스에서 기본제공되는 rsyslog데몬을 설정하여 네트워크장비의 로그를 수집하는 방법을 습득합니다. \n[LAB수행조건]  우분투에 rsyslog라는 로그서버 데몬이 기본으로 설치되는데 기본적으로 네트워크에 대해서는 LISTEN하도록 설정되어 있지 않습니다. 네트워크에 대해서 LISTEN모드를 활성화하고 네트워크를 통해서 들어오는 syslog패킷을 수집할 수 있도록 구성 장비의 IP별로 로그파일이 별도로 만들어지도록 구성  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/",
	"title": "2.12 DHCP서버와 DHCP네트워크",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip \n[LAB의 목적] 우분투서버에 DHCP서버를 구성하고 3개의 VLAN에 IP를 할당해주는 LAB \n[LAB수행조건]  UnetLab이 설치된 우분투시스템에 isc-dhcp-server패키지를 설치하고 DHCP서버를 구성하여 pnet1인터페이스에서만 LISTEN하도록 구성. pnet0인터페이스와 같이 물리적인 네트워크에 연결된 부분에서 LISTEN하게되면 실제 네트워크레 영향을 줄수 있으므로 반드시 UnetLab 가상머신 내부에서만 사용하는 pnet1에서만 LISTEN하도록 서버를 구성. 백본스위치에 3개 VLAN이 통신되도록 구성 각 VLAN별 스위치 설정 우분투서버에서 Lab환경의 네트워크와 통신할 수 있도록 라우팅설정 백본스위치의 각 VLAN인터페이스에 ip helper를 설정하여 DHCP패킷이 릴레이 되도록 설정 VPC 4,5,6은 DHCP서버에서 해당 네트워크 대역의 IP로 자동할당됨을 확인 VPC7은 DHCP서버에서 IP를 할당받는데 항상 고정된 10.4.4.100을 할당받도록 구성  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.11-tacacs+-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.11 TACACS+ 인증서버 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_TACACS-Lab.zip \n[LAB의 목적] TACACS+인증서버 패키지를 저장소설치가 아닌 소스파일로 컴파일해서 설치하는 방법익히기 TACACS+인증서버를 구성하고 장비 접근을 인증서버 통해서 인증하기 \n[습득해야할 내용]  UnetLab이 설치된 우분투시스템에 TACACS+를 소스로 설치하는 방법.  소스로 설치하는 방법  apt-get install build-essential (우분투에서 소스컴파일을 위한 기본 환경설정) 압축풀기 소스파일 압축해제후 설치가이드를 해주는 README나 INSTALL파일을 확인하기 ./configure tac_plus 를 수행하면 시스템의 환경을 파악하여 컴파일 수행을 위한 Makefile생성 make 를 수행하면 만들어진 Makefile을 읽어서 내용대로 컴파일 수행됨 make install 을 수행하여 실행파일들 설치. 설치되는 실행파일의 위치를 확인  pnet1에 IP주소 설정하고 tacacs+데몬을 debug 레벨15로 구동 SW스위치에서 TACACS+인증관련된 기본설정 tac_plus.conf 파일생성 (암호 MD5알고리즘) openssl passwd -l 스트링 tac_plus.conf파일에서 사용자 계정별로 사용할 수 있는 명령어를 제한하는 방법 익히기 인증로그, 수행명령 로그가 기록되는것을 확인   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/",
	"title": "2.10 윈도우이미지 등록하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 윈도우 가상머신을 LAB에서 활용할 수 있도록 이미지생성해서 넣기. 추가한 하드디스크영역에 생성한 이미지를 넣고 soft link를 설정하여 운영하는 방법 익히기 \n[습득해야할 내용]  윈도우 가상머신 다운로드하기 90일동안 사용할 수 있는 윈도우 가상머신을 제공하는 사이트에서 적절한 윈도우를(IE10 on Win7, VMWare용) 선택하여 zip파일 다운로드 다운로드한 zip파일을 우분투서버에 업로드하고 압축해제. 사이즈가 큰 관계로 추가로 장착한 하드디스크에서 수행하기를 권고. # unzip IE10.Win7.For.Windows.VMware.ZIP 윈도우 이미지 넣어줄 디렉토리 준비 윈도우 이미지는 win-으로 디렉토리명이 시작해야 하고, /opt/unetlab/addons/qemu/디렉토리 하단에 위치해야 합니다. 하지만, 하드디스크의 용량이 작은 관계로 추가한 하드디스크 영역에 이미지를 넣어주고 디렉토리 링크설정. 신규 HDD를 /data에 마운트한 상태임 \n# mkdir /data/qemu/win-7-IE10 # ln -s /data/qemu/win-7-IE10 /opt/unetlab/addons/qemu/win-7-IE10 # cd /opt/unetlab/addons/qemu/win-7-IE10  이미지 변환하기 다운로드한 zip파일을 /data/temp폴더에 압축해제 했다고 가정, 해당폴더에 *.vmdk이미지가 있음을 확인 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 /data/temp/IE10_-_Win7-disk1.vmdk hda.qcow2 이미지 변환작업이 끝나면 아래와 같이 hda.qcow2파일 있어야함. # ls -al /opt/unetlab/addons/qemu/win-7-IE10/hda.qcow2\n 권한수정하기 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions\n 윈도우 가상머신 LAB에 등록하기 사용해보기\n  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/",
	"title": "2.9 우분투머신에 하드디스크 추가",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] UnetLaB을 돌리기 위하여 우분투 가상머신을 생성할때 20G하드디스크를 생성했는데 이미지를 몇개 추가하다보니 디스트의 용량부족발생. 리눅스에 신규로 하드디스크를 추가했을때 수행되는 작업 익히기 \n[습득해야할 내용]  VMWare가상머신 설정에서 20GB SCSI HDD 한개 추가하기 우분투머신을 부팅하고 dmesg|grep sd명령으로 하드디스크 인식된거 확인 fdisk -l명령으로 디스크 목록 확인하기 fdisk명령으로 추가된 하드디스크 파티션하는 방법 방법익히기 신규로 생성된 파티션을 포맷하는 방법 익히기. 이 부분에서 리눅스의 파티션의 종류에 대해서 알아보기(ext2, ext3, ext4등등) 신규 파티션 마운트할 디렉토리 생성과 수동 마운트 진행해보기 fstab에 부팅시에 자동으로 마운트 되도록 설정하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/",
	"title": "2.8 VyOS이미지 등록",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] LAB상에서 이용할 vyOS장비하나 추가하기. ova이미지에서 vmdk이미지를 추출하고, 그 추줄한 이미지를 리눅스 kvm상에서 실행할 수 있는 이미지로 변환하는 방법익히기 \n[습득해야할 내용]  VyOS란? VyOS사용자 가이드로 기본 사용법 숙지하기 VyOS ova이미지 다운로드 디렉토리 생성(VyOS이미지의 디렉토리 이름은 vyos-로 시작해야함) mkdir -p /opt/unetlab/addons/qemu/vyos-117 ova 압축풀기 tar xf vyos-1.1.7-amd64-signed.ova vmdk이미지를 qemu이미지로 변환 /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 VyOS-1.1.7-signed-disk1.vmdk hda.qcow2 권한수정 /opt/unetlab/wrappers/unl-wrapper -a fixpermissions  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/",
	"title": "2.7 스위치설정 템플릿2",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 네트워크 장비를 설정할때 아래의 사항들은 기본적으로 설정이 필요하여 기본 설정템플릿으로 정의. LAB상에서 스위치나 라우터 설정할때 귀찮다 생각하지 말고 아래의 사항들을 기본적으로 설정하면서 습관을 들이는것이 목적. \n[습득해야할 내용]  장비의 이름(hostname)을 의미있게 부여하였는가? 도메인이름을 설정하였고, ip domain-lookup을 수행하지 않도록 설정하였는가? (no ip domain-lookup을 설정하지 않으면 프롬포트에 오타를 치는 경우 대기시간이 발생) Timezone설정을 수행하였는가? debug, log메시지에 대해서 timestamp를 localtime으로 지정하였는가? VTP domain을 지정하고 VTO mode를 transparent로 변경하였는가? password encryption서비스를 설정하였는가? aaa new-model을 설정하여 사용자계정을 통해서 장비 접근하도록 설정하였는가? 로컬관리자 계정을 생성할때 secret암호를 사용하였는가? enable암호를 설정할때 secret암호를 사용하였는가? 장비접근은 SSH만 가능하도록 하고 SSH Ver2로 설정했는가? 관리자 접근제한 ACL테이블을 생성했는가? SSH, HTTP(s), SNMP접근에 대해서 위에서 생성한 접근제한 ACL을 적용했는가? Login 배너를 설정했는가? 배너를 한글로 설정하는 방법은?  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/",
	"title": "2.6 Static Route 설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 1226_L3-Static-Route.zip \n[LAB의 목적] 본 LAB은 라우팅설정에 대한 이해를 돕기위한 LAB입니다. \n[습득해야할 내용]  모든 통신의 시작은 출발지 시스템의 라우팅테이블을 살펴본는것에서 출발한다는 사실 인지 라우팅테이블에 존재하지 않는 네트워크를 목적지로 하는 경우에는 default-gateway로 전달된다는것 default gateway를 정의하지 말고 LAB상의 모든 L3장비에서 사용하는 네트워크들에 대해서만 라우팅을 설정하여 모두 통신이 되도록 구성할것 supermasking으로 등록하는 라우팅 갯수를 줄일 수 있는 방안  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/",
	"title": "2.5 Trunk환경설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 1227_VLAN-Trunk2.zip \n[LAB의 목적] 물리적인 단일 연결을 통해서 여러개의 VLAN통신이 가능하도록 하는 Trunk설정 익히기 \n[습득해야할 내용]  떨어져 있는 건물에 있는 사용자들을 동일한 VLAN으로 묶어주기 위한 Trunk설정 익히기 설정할때 SW2스위치의 관리 IP는 VLAN100에서 할당하고 SW3스위치의 관리 IP는 VLAN200에서 할당하기 스위치에 trunk설정방법 익히기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/",
	"title": "2.4 스위치 기본설정 템플릿",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 2.3장의 LAB을 그대로 이용하여 LAB상의 스위치에 아래의 사항들을 설정해보고 시험하기 \n[습득해야할 내용]  스위치에 Timezone을 설정하고 외부 NTP서버를 지정하여 시간동기화. NTP시간동기화 상태 통신확인하기 debug와 log메시지가 현재 장비시간으로 정확하게 표시되도록 설정하기 설정하는 password가 복호화가 안되도록 암호화 설정하기 원격에서 장비를 연결할때 username과 암호를 물어봐서 로그인하도록 구성하기 호스트OS에서 LAB상의 장비로 telnet연결가능하게 하기(호스트OS에서 LAB상의 장비들을 연결하기 위하여 라우팅을 추가하는 방법 익히기) 모든 스위치에 대해서 원격접속을 SSH로만 가능하도록 설정하기 모든 스위치에 대해서 SSH연결시에 호스트OS에서만 접근가능하도록 ACL설정해보기 호스트OS에 tftp나 ftp데몬을 구동하여 LAB에 구성한 모든 스위치의 config를 백업해보기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/",
	"title": "2.3 호스트OS에서 LAB환경 접속하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L3-VLAN_Cloud.zip \n[LAB의 목적] 2.2 LAB에서 구성한 환경을 VMWare에서 제공하는 Host-Only(VMNet1)네트워크에 연결해서 HostOS에서 LAB장비를 연결할 수 있는 방법 익히기 \n[습득해야할 내용]  VMWare Plyaer에서 제공하는 Bridge, NAT, Host-only인터페이스 이해하기 자기의 VMWare Player버전에 맞는 vmnetcfg.exe를 받아서 네트워크를 재구성하는 방법 익히기 Bridge, NAT, Host-only인터페이스중 어떤것을 연결하더라도 LAB상의 장비를 연결하는 방법 익히기 \n[VMWare어댑터관계 개념그림]   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/",
	"title": "2.2 VLAN간 ip routing시험",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L3-VLAN.zip \n[LAB의 목적] L3를 수행하는 백본스위치 1대를 놓고 서로 다른 VLAN간에 ip routing을 수행하여 서로 다른 VLAN간에 통신 시험 \n[습득해야할 내용]  Cisco IOL에서 스위치 이미지를 사용할때  L3 라우팅기능을 사용하려면 ip routing L3 스위치에서 default gateway를 지정하려면 ip route 0.0.0.0 0.0.0.0 nexthop으로 지정 L2스위치로만 사용하려면 no ip routing L2 스위치에서 default gateway를 지정하려면 ip default-gateway nexthop으로 지정   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/",
	"title": "2.1 L2스위치 기본LAB",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L2-VLAN.zip \n[LAB의 목적] UnetLAB에 등록한 Cisco IOL이미지가 정상적으로 동작하여 L2스위치의 기능을 수행하는지를 시험 \n[습득해야할 내용]  Cisco스위치의 기본설정 (보안을 고려한 설정으로 기본적으로 설정하는 내용에 대한 설정 템플릿을 만들어 보기) VPC의 기본 IP설정방법과 통신명령 익히기 동일한 VLAN상의 노느들간의 통신확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "1.4 Cisco IOU/IOL 이미지 구성하기",
	"tags": [],
	"description": "",
	"content": " Cisco IOU/IOL 이란? Cisco IOU/IOL이미지 추가하기  구성방법은 How To Add Cisco IOU IOL iourc라이선스 파일 만들기 Cisco의 추적?? /etc/hosts에 xml.cisco.com확인 images파일 위치에 복사 permission수정 스크립트  LAB을 생성하고 장비를 추가하여 구동해보기 telnet 기본프로그램을 putty로 변경하기 Windows integration pack을 설치하여 putty를 포함해서 윈도우에서 LAB장비를 연결하는 클라이언트 프로그램들이 설정됨  "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
	"title": "1.3 UnetLab(EVE-NG) 설치하기",
	"tags": [],
	"description": "",
	"content": " Check if Virtualization Technology is available for UnetLab  설치한 VMware Player에 UnetLab을 위한 가상머신을 생성할때 Virtualize Intel VT-x/EPT or AMD-V/RVI기능이 활성화됨을 확인 Open-Source Routing and Network Simulation  Installing UnetLab on a Physical Server  VMWare Player에 가상머신으로 설치하지만 설치방법은 물리적인 서버에 설치하는 방법과 동일하게 설치 설치방법은 Open-Source Routing and Network Simulation를 참조 설치후에 grub를 수정하는 부분 주의할것!!!  설치후에 처음 부팅할때 UnetLab구성하기  설치한 후에 처음으로 부팅하면 UnetLab설정화면이 기본으로 구동되는데 우분투는 root암호를 넣는 부분이 없기때문에 자동으로 구동되는 프로세스를 찾아서 중지한후에 수동으로 설정하는 것을 진행할 필요가 있음  브라우저에서 UnetLab연결하고 기본 사용법 익히기 UnetLab에서 구성하는 장비들을 실제PC에서 자유롭게 접속하고 관리하기 위해서는 VMWare와 우분투, UnetLab간의 네트워크 어댑터 고나계를 정확하게 이해를 해야합니다. 아래의 그림은 Windows 10 PC에서 VMWare Player를 설치하고 우분투 가상머신을 설치하여 그 우분투에 UnetLab을 설치했을때 네트워크 어댑터의 관계를 그린 그림입니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/",
	"title": "1.2 어떤 배포판을 설치할것인가?",
	"tags": [],
	"description": "",
	"content": " UnetLab Requirement  처음 EVE-NG프로그램을 접했을때는 UnetLab이라는 이름으로 배포되었습니다. 시간이 흐르고 흘러 소프트웨어가 정교하게 다듬어지면서 EVE-NG라는 이름으로 변경되더군요. 지금도 Pro패키지가 있지만 완전 상용화가 될까봐 걱정을 하면서 사용중입니다. 초기 시스템 요구사항에 따라서 Ununtu 14.04 LTS버전을 사용했었지만 EVE-NG는 16.04버전을 권장하고 있습니다.  무료로 사용할 수 있는 VMWare Player에 Ubuntu 16.04 LTS버전 설치하기  4GB RAM과 4개의 Processor로 설치진행 향후 LAB을 크게 구성할때를 대비하여 8GB RAM을 사용하는것이 좋습니다.  우분투 일반버전과 LTS버전차이 우분투 Desktop버전과 Server버전차이 우분투리눅스 설치후에 putt로 원격연결하는 방법 우분투리눅스에 연결해서  우분투의 sudo개념 업데이트: apt=get update; apt-get upgrade dist upgrade는 하지말것!!!   "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/",
	"title": "1.1 리눅스의 기본",
	"tags": [],
	"description": "",
	"content": " 운영체제란? (OS, Operating System) 커널과 shell Unix의 History: BSD계역과 System-V계열의 유닉스부터 전반적인 유닉스의 발전 히스토리를 설명 리눅스란? 리눅스 배포판이란? 리눅스의 배포판 History 리눅스의 init 왕데몬에 관하여 하지만, 이제는 Systemd가 대세 패키지 관리 명령어  Debian계열(Ubuntu): apt-get RedHat게열(CentOS): yum   리눅스라는 운영체제를 설명하기 위하여 운영체제에 대해서 간략하게 설명하고 사용자가 입력하는 명령어을 받아서 실행하는 명령어해독기(shell)에 대한 설명과 여러가지 shell별로 환경변수를 설정하는 방법을 살펴봅니다. 리눅스의 다양한 배포판들이 존재하는 것을 설명하고 배포판들의 뿌리를 설명할 것입니다. 윈도를 처음 설치하면 반드시 업데이트를 수행해야 하는것처럼, 리눅스도 설치하면 필수적으로 업데이트를 수행해야 합니다. 요즘은 GUI환경으로 설치하면 자동으로 업데이트되지만 CLI환경에서 패키지 관리명령어를 사용하여 업데이트하는 방법을 설명합니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/",
	"title": "0.6 네트워크장비개요",
	"tags": [],
	"description": "",
	"content": "네트워크에 사용되는 케이블을 알아보면서 모든 케이블마다 통신할 수 있는 거리제한이 있다는 것을 알게되었습니다. 한 세그먼트의 최대거리에 수용할 수 있는 PC들이 모두 수용되었을떄 추가적인 케이블 세그먼트를 만드는데 이 두 세그먼트간의 통신은 어떻게 할까요? 이렇게 케이블의 물리적인 거리의 한계를 극복하기 위하여 네트워크장비들이 등장하게 됩니다. 등장한 네트워크장비는 Repeater(리피터), Bridge(브리지), Router(라우터)입니다. 우리는 OSI 7 Layer중에서 아래 3계층만 다룬다고 했는데, 등장한 네트워크장비들이 이 3계층에 아래와 같이 매핑됩니다. Repeater \u0026nbsp;\u0026nbsp;:거리연장 + 신호증폭  리피터는 케이블의 물리적인 거리한계를 극복하도록 거리를 연장하는 기능과 감쇠된 신호를 증폭하여 다시 전달할 수 있는 기능을 제공합니다. Bridge \u0026nbsp;\u0026nbsp;:Repeater기능 + MAC Address 필터링  브리지는 리피터가 제공하는 기능을 모두 수용하고 추가적으로 Layer2에서 사용하는 MAC Address에 대해서 테이블을 관리하고 필터링하는 기능을 제공합니다. MAC Address필터링을 통하여 불필요한 트래픽을 줄일 수 있습니다. Router \u0026nbsp;\u0026nbsp;:Bridge기능 + IP Address필터링  라우터는 브리지가 제공하는 기능을 모두 수용하고 추가적으로 Layer3에서 사용하는 IP Address에 대해서 테이블을 관리하고 필터링하는 기능을 제공합니다. 요즘은 HUB(허브)를 볼 수 없지만, 초장기때에는 HUB와 SWITCH를 구분이 필요했습니다. 건물별로 네트워크를 생각할때 어떤 케이블을 사용할 것인가를 선택하고, 사용하는 케이블의 거리제한을 고려하여 센터의 위치를 정해야합니다. 아래의 그림처럼 거리제한이 있는 케이블을 고려하여 통신센터의 위치를 선정하는것이 필요합니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/",
	"title": "0.5 Ethernet발전과 케이블 악세사리",
	"tags": [],
	"description": "",
	"content": "이제까지 10Mbps Ethernet만 살펴봤는데 기본에 충실하면 이후는 동일합니다. 이후로는 Ethernet으로 쭈~~욱 발전한다고 얘기했습니다. 그렇다면 동일한 CSMA/CD방식에 broadcast네트워크라는 점만 알고 있으면 되겠네요. 10Mbps이후로 등장하는것이 100Mbps를 지원하는 FastEthernet방식입니다. FastEthernet에서는 사용하는 케이블 종류에 따라서 아래와 같은 표준안을 사용했는데 각 표준별로 케이블의 최대거리를 잘 살펴보세요.  A동과 B동간의 거리가 600M일때 100Mbps FastEthernet방식으로 구성해보세요.  FastEthernet이 보편화되면서 더 빠른 속도가 필요해서 등장하는것이 1Gbps를 제공하는 GigabitEthernet입니다. GigabitEthernet도 사용하는 케이블의 종류에 따라서 여러가지 표준안이 있으므로 표준별로 케이블의 최대거리를 잘 확인하세요. 자\u0026hellip;이렇게 Ethernet에서 사용하는 케이블을 정리했읍니다. 케이블을 정리하는 마지막에서 언급해야하는것이 악세사리들\u0026hellip; 그중에서도 우리가 자주 접하는 patch panel와 outlet입니다. 아래 그림의 왼쪽처럼 처음 UTP를 사용할때는 센터의 스위치로부터 사용자까지 케이블을 설치하고 양쪽에 RJ45커넥터로 만들어서 사용자 PC를 직접 연결해주었습니다. 이렇게 많은 사용자들이 연결되어서 사용하다가 사용자 이동이 자주 발생하면서 케이블을 다시 포설하거나 커넥터를 다시 찍어주어야 하는 비효율적인 일들이 자주 발생하게 되었죠. 그래서 네트워크센터부터 사용자까지 포설되는 UTP케이블을 사용자의 가까운 위치까지 포설해서 종단처리하고 사용자가 그 부분에서부터 연결할 수 있도록 해준것이 outlet이라는 것이고 outlet에서 사용자 PC를 연결할때 사용하는 케이블을 사용자케이블 (user cable)이라고 불렀습니다.  사용자가 어떤 outlet에 연결할지 모르기 때문에 사용자 수보다 많은 갯수로 outlet을 설계할 수 밖에 없었습니다. 그런데 사용자 수보다 많은 outlet을 모두 연결하기 위해서 스위치를 많이 산다면 돈낭비 스위치의 포트낭비죠. 그래서 네트워크센터측에는 patch panel이라는 것을 설치해서 필요한 포트만 스위치에 연결할 수 있도록 한것이고 patch panel과 스위치를 연결하는 UTP케이블을 패치케이블이라고 부릅니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/",
	"title": "0.4 Cable에 대한 정리",
	"tags": [],
	"description": "",
	"content": "이제까지 가상의 통신모델과 구성형태, 어떠한 방식으로 통신하는지를 정의했으니 이제는 직선으로 표시했던 케이블부분을 정의해보겠습니다. 위의 그림에서 보듯이 처음 교육을 시작할때부터 일직선으로 그린부분이 있는데, 이 일직선이 10Base5케이블을 의미하는 것입니다. 공유매체(공통으로 사용한다)인 케이블을 10Mbps Ethernet에서부터 출발을 해보겠습니다. 위의 그림에 나열된것은 10Mbps Ethernet에서 사용하는 케이블의 종류입니다.케이블 이름에서 맨앞의 10은 10Mbps를 의미하고 Base는 Baseband신호방식(저대역)을 의미하며, 맨 마지막은 케이블의 거리제한을 의미합니다.  Ethernet에서 사용하는 신호방식을 Baseband(저대역)신호방식이라고 하는데 방송국에서 사용하는 MBC, SBS, KBS의 B는 Broadband(광대역)신호방식 입니다. 저대역통신방식과 광대역통신방식간의 차이점이 무엇인지 간략하게 찾아보세요.  10Base5케이블은 굵어서 그런지 Thick cable이라고도 불립니다. 500m의 거리제한이 있고, 2.5m간격마다 표시가 되어 있어서 노드를 연결할 수 있는 포인트가 정해져 있습니다. 끝부분에는 50오옴짜리 Terminator라는 저항을 달아서 전기신호가 소멸되는것을 막고 있습니다. 2.5m간격마다 노드를 연결할때 Tap이라는 것을 달아서 3개의 핀(pin)이 하나는 구리선에 닿고 2개는 피복에 닿도록 하여 연결하고 거기에 트랜시버를 연결해서 Carrier Sense를 하도록 합니다. Ethernet을 접하다보면 세그먼트(Segment)라는 용어를 자주 접하게 되는데요, 세그먼트라고 하면 케이블의 최대거리로 꾸며진 하나의 라인이라고 생각하면 될듯합니다. 아래의 10Base5의 경우에는 세그먼트를 표시하는 그림입니다. 10Base2케이블은 최대거리 182m를 지원하는 케이블로 Thin cable이라고 합니다. 이 케이블은 우리가 집에서 보는 동축 TV선하고 똑같이 생겼지만 규격이름은 다름니다. 어쨌든 모양은 TV선을 생각하면 됩니다. 이 케이블은 PC를 연결하기 위해서 케이블을 끊어서 T커넥터를 연결하고 그 커넥터에 PC의 NIC카드를 연결하는 구조입니다. Thick케이블보다 얇고 관리가 수월해서 초기에 확 도입되다가 사용자들이 자가 PC의 네트워크를 분리한다는것이 T커넥터를 끊는 행위를 많이 해서 전체 네트워크가 안되는 장애가 많이 발생하는 문제로 인하여 사용율이 급격하게 떨어졌습니다. 전기신호를 다루는 케이블을 다루다 보면 주파수라는 말이 많이 나옵니다. 주파수란 전기가 흘러갈때 파도처럼 파형을 그리는데 1초에 몇번의 파도가 치느냐 처럼 진동하는 수를 의미합니다. 10BaseT케이블이 나오면서 이더넷 사용이 활발해졌다고 생각이 듭니다.Thick, Thin케이블들은 관리가 어렵고 만들기도 힘들어서 사용이 어려웠는데 10BaseT케이블이 등장하니 전화선같이 얇고 쉽게 사용할 수 있어서 많이들 사용하게 됩니다. 사용의 편리성때문에 모든 Ethnet표준안이 만들어지면 UTP케이블을 이용하는 표준은 반드시 만들고 있는것입니다. 10BaseT케이블은 UTP케이블이라고도 불리는데 Unshield (쉴드가 되어 있지 않고, STP와 대조) Twisted(꼬여있다. 1쌍으로 케이블이 꼬여있음. 이 꼬임수가 기술. 케이블 끝까지 이 꼬임수를 유지하는것이 필요) Pair(쌍으로 되어 있음. 8가닥 4Pair)의 약자입니다.  10BaseT에서 사용한 UTP케이블은 Category 3케이블인데 이 케이블은 16MHz주파수를 지원하는 케이블입니다. 왜 앞에서 주파수 얘기를 한지 알겠죠.. 100Mbps, 1Gbps, 10Gbps Ethernet에서도 UTP케이블을 사용하는데 지원되는 Category가 틀립니다. 틀린 이유는 당연히 지원되는 주파수가 관건입니다.  STP(Shield Twisted Pair)케이블을 검색해보면서 Shield가 뭔지 찾아보고 UTP는 왜 Unshield라고 하는지 이해해보세요. 그리고, 지금 사용하는 UTP케이블의 피복에 보면 글씨가 써있는데, 그 글씨에서 Category가 뭐라고 쓰여있는지 확인해보고, 그 케이블은 지원되는 주파수가 얼마이고 어떤 Ethernet까지 지원되는지 찾아봅시다.  아래의 그림처럼 UTP는 2가지 타입(T568A, T568B)가 있읍니다. 우리는 T568B타입을 사용하고 있습니다. 오렌지색깔을 1,2번 핀에다 넣기 때문에 오렌지가 1번 pair라고 알고 있었는데..(저만 그럴지도 모르고\u0026hellip;) 1번Pair는 청색, 2번Pair는 오렌지, 3번 Pair는 녹색, 4번Pair는 갈색입니다. T568B표준은 2번 Pair 오렌지를 송신으로 3번 Pair 녹색을 수신으로 사용하는것입니다. UTP케이블은 4Pair중에 실제 통신용으로 2Pair만 사용하기 때문에 초창기에는 아래의 그림처럼 하나의 UTP케이블을 2Pair씩 갈라서 2개의 노드를 연결하는 구조를 많이 사용했었습니다. 하지만, 이 방식은 주파수의 차이때문에 1,3번 Pair를 사용하는 노드들의 연결이 불안정한 부분이 발생해서 요즘은 사용하지 않고 있읍니다. 아래의 그림처럼 A동과 B동을 연결할때 거리가 500m이내라면 10Base5케이블 1세그먼트로 연결하면 됩니다. 하지만 500m를 넘는다면요?? 10Base5케이블을 2개 이어서 하면 되는데(한동안 그런식으로 연결을 했었음), 안정적으로 더 먼거리를 지원하는 케이블이 필요하게 된거죠\u0026hellip; 그래서 등장하는 것이 10BaseF케이블로 MultiMode광케이블을 사용하여 2Km까지 지원을 합니다. 그래서 요즘 동간의 연결은 안정적인 광케이블을 많이 사용하게 됩니다. 광케이블에서 사용하는 용어를 살펴봅시가. 동간에 설치하는 검은색 광케이블은 아래 그림에서 보듯이 여러개의 광섬유 가닥을 묶어놓은 선이라고 보면됩니다. 우리가 사용하는 8Core, 16Core광케이블이다라고 하면 광섬유가닥을 8가닥, 16가닥을 묶어놓은것입니다. 그 묶음에서 광케이블을 이용해서 송신(tx), 수신(rx)을 해야하니깐 2가닥의 광섬유를 사용하는거죠\u0026hellip;하나의 광섬유는 코어와 클래딩이 있는데 광케이블 규격을 말할때 이것의 크기로 말합니다. 광케이블의 규격을 말할때 코어와 클래딩의 사이즈로 말한다고 했습니다. 아래 그림을 보면서 이해해보세요. 또한, 광케이블은 전송방식에 따라서 멀티모드와 싱글모드로 나눕니다. 멀티모드의 경우에는 파형을 크게 그리면서 전파되기때문에 짧은거리를 지원하고 싱글모드는 파형이 거의 직선에 가깝기때문에 장거리를 지원합니다.  8Core광케이블을 건물간에 포설했다면 그 안에 들어있는 8가닥의 광섬유에 대한 종단처리가 필요하겠죠. 그 종단처리를 위해서 필요한것이 FDF와 스플라이싱(splicing)인데요, FDF와 Splicing에 대해서 찾아봅시다.  FDF에 광케이블을 종단처리하면 그 종단처리된 FDF에서 장비를 연결할때 사용하는 광케이블 필요합니다. 광케이블에서 사용하는 케이블 커넥터의 종류는 다양하지만 우리가 주로 사용하는 것은 아래의 그림에서 SC, ST, LC타입을 주로 사용합니다. 커넥터의 모양을 잘 살펴보고 ST-LC타입 광케이블을 찾아오라고 한다면 바로 찾을 수 있어야 겠죠.  A동과 B동간의 광케이블 연결상태를 노트에 그려봅시다. 그림에는 두 건물간에 몇 Core인지, 어떤방식의 광케이블이 포설되었는지, FDF는 몇 Core로 종단처리되었는지, FDF는 무슨 커넥터 타입인지와 FDF에서 장비를 연결하는 광케이블은 어떤 커넥터 타입인지가 표시되도록 그려봅시다.  두 건물간에 8Core 싱글모드 광케이블이 설치되어서 FDF로 종단처리되어 있습니다. FDF에서 장비를 연결하는 광케이블을 멀티모드를 사용하여 연결하면 통신이 될까요?  UTP케이블과 광케이블은 이후 표준안에서 중요한 케이블로 계속 등장하므로 Ethernet규격에 따라서 각각의 타입과 거리제한을 명확하게 알아야 합니다. 이제까지 10Mbps Ethernet에서 사용하는 케이블을 정리했습니다. 말이 10Mbps Ethernet에서 사용하는 케이블이지 UTP와 광케이블의 경우에는 주파수만 틀려지고 이후에 등장하는 모든 Ethernet에서 사용됩니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/",
	"title": "0.3 Ethernet이란",
	"tags": [],
	"description": "",
	"content": "구성도를 그리면서 Topology가 무엇인지 어떠한 형태로 연결되는구나\u0026hellip;하는식으로 이해가 좀 되었으면 합니다. \n우리가 앞으로 취급할 부분은 LAN이고\u0026hellip;. LAN에서 사용하는 통신규칙중에 Ethernet을 가장많이 다루게 될것입니다.  Ethernet이란 통신을 하고자 하는 PC들을 선으로 연결해야하는데 어떤선으로 어떤방식으로 연결할것인가, 연결된 PC들끼리 통신을 하려고 하면 어떻게 동작을 해서 통신을 할것인가와 같은 규칙을 정의해놓은것이라고 생각하면 됩니다. 제가 Ethernet을 설명할때는 아래와 같이 2가지로 설명하곤합니다.  Ethernet이란 무엇인가? 라는 질문을 받는다면 CSMA/CD방식의 broadcast네트워크이다. 라고 정의할 수 있습니다. CS(Carrier Sense) Ethernet은 케이블을 기본적으로 공유(share)한다는 개념을 가지고 있습니다. 간단히 예를들면 8포트스위치에 8명을 연결했다면 8명이 스위치에 연결되는 메인라인을 공유하는 개념처럼 케이블 하나에 대해서 여러명을 같이쓴다는 개념을 기본적으로 가진다는 얘기입니다. 그렇다면 같이 사용하는 케이블을 내가 점유해서 쓰려면 다른사람이 사용하지 않는지를 알아야 하겠지요?  그래서 필요한것이 CS(Carrier Sense)입니다.  신호를 감지한다는것인 내가 연결된 물리적인 케이블상에 전기신호가 흐른다고 하면 누군가 데이터를 보내고 있는중이라는 얘기가 되는것입니다. 다른사람이 데이터를 보낼때 같이 사용하는 케이블에 나도 데이터를 보내면 안되니깐 케이블상에 전기신호가 없는지를 계속해서 체크하는 동작이 CS입니다. 그렇게 신호를 감지하다가 전기신호가 없으면 그때 내 데이터를 실어서 보내는것입니다. MA(Multiple Access) 동등권한을 줍니다. 같이 공유해서 사용하는 케이블에 A는 이쁘니깐 한 번 더 전기신호를 보낼수 있도록 해주고, B는 못보내게 하고 이렇게 할 수는 없죠? MA는 공유해서 사용하는 케이블을 여러사람이 동등한 권한으로 동시에 접근할 수 있다는 개념입니다. 누구든지 자신의 데이터를 보내기 위해서 공유로 사용하는 케이블을 동시에 접근할 수 있다..이것이 바로 MA의 개념입니다. CD(Collision Detect) 충돌발생. 동등한 권한으로 동시에 접근할 수 있는 권한이 있으니깐\u0026hellip; A라는 사용자가 케이블에 전기신호가 없다는 것을 감지하고 데이터를 실었는데, 동시에 B라는 사용자도 케이블에 전기신호가 없다는 것을 감지하고 데이터를 같이 보냈다고 했을때 두 신호가 일정한 거리를 흐르다가 만나는 지점이 있을것입니다. 이것을 바로 충돌(Colliosion)이라고 합니다. 충돌이 발생하면 네트워크상에 jam신호가 퍼지고 네트워크에 연결된 모든 PC들은 일정시간동안 기다렸다가 다시 CS부터 시작하는 동작을 합니다.  이렇게 말로 설명한 내용이 아래의 그림에서 플로우차트형식으로 설명하고 있읍니다.  Ethernet은 기본적으로 Collision이라는 개념을 포함하는데 오늘날 사용하는 스위치는 collision이 거의 없습니다. 이것은 반이중(half duplex)과 전이중(full duplex)의 개념때문인데, 반이중과 전이중에 대한 개념을 검색해보고 정리해보세요.  자\u0026hellip;물리적인 CSMA/CD방식의 이해가 되었나요?  그러면, 논리적인 부분으로 가서 Broadcast에 대해서 알아보겠습니다. 나중에 IP Address부분을 설명할때 이부분이 다시 언급이 되어야 하니깐 여기서는 주소의 bit가 1로 설정되면 모든 노드들을 의미한다고 정도 이해하면 될듯 합니다. Ethernet에는 기본적으로 통신을 하기 위해서 연결된 모든 PC들에게 보내야하는 정보들이 있습니다. 그럴때 사용하는 방식이 Broadcast\u0026hellip;  통신방식을 얘기하면 broadcast말고 unicast와 multicast방식도 있는데 3가지 통신방식에 대해서 간략하게 개념정리하고 이해해보세요.  본격적으로 케이블로 들어가기 전에 네트워크의 구성형태를 살펴보겠습니다. 구성형태의 변천에서 볼 수 있는것은 사용자 PC에 설치되는 네트워크카드의 발전이 사용자를 취합하는 백본스위치의 속도를 발전시키는 형태로 발전합니다. 변천사에서 보듯이 10Mbps Ethernet에서 출발해서 FDDI, ATM을 잠깐 사용했지만 그 이후로는 속도만 올라가고 모두 Ethernet방식이라는 것을 알 수 있습니다. 앞으로 발전하는것이 속도는 올라가지만 통신방식은 Ethernet입니다. 따라서, Ethernet의 동작원리를 충분히 이해하는 것이 중요합니다. Ethernet은 CSMA/CD방식이고 Broadcast네트워크 입니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/",
	"title": "0.2 물리적인 연결정의",
	"tags": [],
	"description": "",
	"content": " 통신을 하고자 하는 PC의 내부에는 우리에게 보이지는 않지만 논리적인 통신모델이 만들어진다고 생각합시다. 그 통신모델 맨 꼭대기층(응용계층)에서 사용자 어떤 작업을(브라우저로 사이트 연결)수행하면 맨꼭대기층에서부터 차례로 아래층으로 내리는 작업을 수행하고 물리계층까지 도달해서 전기신호로 보내진다는 것입니다.  통신을 하고자하는 PC에는 네트워크에 연결하기 위해서 어떤 장치가 있어야 합니다. 그것이 유선이든 무선이든.. 그러한 장치를 네트워크카드라고 하는데 내 PC에 어떤 종류의 네트워크카드가 설치되어 있는지 확인할 줄 알아야 합니다. 설치된 네트워크카드는 고유한 하드웨어주소(MAC Address)를 가지는데 장치관리자에서 찾은 네트워크카드와 MAC주소를 연관시켜서 이 MAC은 내 PC에 설치된 어떤 네트워크 카드의 주소이다를 알 수 있어야 합니다.   논리적인 통신모델이 만들어진다는것을 알았으니 이번에는 연결하는 물리적인 방법에 대해서 얘기해봅시다. 아래의 그림처럼 통신하는 2대의 노드사이의 일직선으로 그은 직선에 대해서 얘기할것인데요, 그림으로는 그냥 일직선으로 그렸지만 이 부분이 우리가 많이 다루게 될 물리적인 케이블 연결부분입니다.  케이블을 연결하는 방식을 설명할때 토플로지(Topology)라는 용어를 사용하는데 아래의 그림처럼 케이블을 어떠한 형태로 연결하는지 연결방법을 정의한것이라고 보면 됩니다.  이런식으로 연결된 토플로지들이 계속해서 연결되며서 LAN과 WAN을 구성하게 되는데 요즘은 Metro이터넷이 등장하면서 LAN과 WAN의 구분이 거의 없어졌다고 봐야할듯합니다. 어쨌든 아래의 그림처럼 LAN과 EAN을 나누어 본다면 한 기관의 네트워크를 LAN으로 보고 회선사업자가 연결되는 부분부터는 WAN이라고 구분하면 될듯합니다.  우리는 기관의 네트워크를 설계, 구축, 유지관리를 해주기 때문에 LAN에 국한된다고 생각하면 됩니다. LAN에서 사용하는 통신기술은 아래의 그림처럼 몇가지가 있는데 통신기술이라고 하면 물리적으로 어떻게 연결하고 어떤 방식으로 통신을 하는지 정의를 하는것입니다.  현재는 Ethernet방식만 취급하는데 TokenRing, FDDI가 어떤방식으로 연결하고 어떻게 동작하는지 간단한 기본원리만 찾아볼까요?\n"
},
{
	"uri": "http://ssanggu.github.io/ch0/osi-7-layer/",
	"title": "0.1 OSI 7 Layer",
	"tags": [],
	"description": "",
	"content": "PC A와 B간에 통신을 한다고 하면 아래의 그림처럼 각각의 PC상에 우리에 게 보이지 않는 논리적인 7층짜치 스택이 만들어진다고 보면 됩니다. 이것을 OSI 7 Layer Model이라고 하는데, 통신을 하고자 하는 서로간에 통신방법을 정의하고 체크하기 위한 논리적인 모델이라고 생각하면 될듯합니다. 7층짜리 스택의 맨 상단은 응용게층으로 우리가 일반적으로 인터넷을 접근하기 위하여 사용하는 프로그램들이 존재한다고 보면되는데, 가장많이 사용\u0026gt;하는 인터넷브라우저에서 수행되는 작업들이 이 7층에서 발생한다고 생각하며 됩니다. A \u0026ndash;\u0026gt; B한테 통신을 하려고 시도한다고 하면 아래의 그림처럼 보내는 측에서는 보자기로 짐을 싸는 행동(Encapsulation)을 하고, 받는측에서는 보자기 의 짐을 푸는 행동(Decapsulation)을 하게됩니다. A측의 7층에서 브라우저 데이터를 한층한층 아래로 내려보내면서 해당층을 정상적으로 통과했다는 표시를 하면서 짐을 싸는 작업을 수행하고, B측에서 는 1층부터 도착한 데이터의 보자기를 벗겨보면서 한층한층 올려서 7층까지 올리는 작업을 수행하게 됩니다. 이것이 Encapsulation과 Decapsulation입니다. 아래의 그림은 Encapsulation과 Decapsulation에대한 추가적인 설명인데, 데이터가 한층한층 통과할때마다 해당층을 정상적으로 통과했다는것을 데이\u0026gt;터에 헤더와 꼬리를 붙여서 바로 아래층으로 내려보내게됩니다. 그러면 받는측에서는 해당층에 맞는 헤더와 꼬리를 제거하고 데이터부분만 상단으로 \u0026gt;올리게 됩니다. 예를들어서 4층에서 데이터부분에 헤더와 꼬리를 붙여서 3층으로 내려보냈을때는 3층에서 인식하는 데이터부분은 \u0026ldquo;4층헤더+4층데이터+4층꼬리\u0026rdquo;를 통틀어서 3층에서 데이터로 인식하게됩니다. 통신을 하고자하는 서로간에 이러한 논리적인 모델이 만들어진다는 것을 이해했는지요? 우리눈에는 안보이지만 내부적으로 이러한 모델이 만들어져서 통신준비를 한다는 것을 이해해야 합니다. OSI 7 Layer model은 정말로 이론적인 모델이 어서 시장에서는 사용되지 않고 이론을 설명할때만 등장하는 모델입니다. 실제 시장에서(우리가 취급하는 네트워크 장비들)는 TCP/IP Layer model이 \u0026gt;많이 사용되어서 이것이 표준화가 된것입니다. 따라서, 우리가 보는것은 5계층짜리의 TCP/IP Layer Model입니다. 이론적인 모델에서 우리가 취급하는 장비는 아래의 그림과 같이 3개층만 주로 취급합니다. A \u0026ndash;\u0026gt; B로 통신을 하려고 한다면 사람인 우리는 목적지가 B라는 것을 바로 알수가 있지만, 컴퓨터는 내가 통신을 하려고 하는 목적지를 어떻게 판단할 까요? 컴퓨터가 통신을 하고자 하는 목적지 B라는 것을 판단하는 방법은 주소를 사용합니다. 주소라???? 당신의 집주소는? 우리나라에서 당신의 집주소는 유일한 주소인가요? 우리가 사용하는 집주소는 집을 찾아가기 위한 주소이고 우리나라 아니 전세계적으로 유일하겠죠. 마찬가지로 컴퓨터통신에서 사용하는 주소(Address)도 해당 컴퓨터를 찾아가기 위한 집주소라고 생각하면되고, IP Addres와 MAC Address라는 2가지 체계가 있습니다. 물론, IP Address와 MAC Address도 전세계적으로 유일해야합니다. 위의 2가지 주소(IP Address, MAC Address)는 아래의 그림처럼 OSI 7 Layer에서 2,3층에서 해당되는데 해당층에서 목적지를 판단하여 패킷을 만들때 \u0026gt;사용하게됩니다. 3층에서는 IP Address를 사용하는데 목적지에 대한 IP Address를 찾지 못하면 3층을 통과 못하고, 2층에서 목적지의 MAC Address를 \u0026gt;찾지못하면 2층을 통과하지 못합니다. 해당층을 통과하지 못하면 Encapsulation과정이 수행되지 않기 때문에 패킷이 만들어지지 않고 통신이 안되게 \u0026gt;됩니다. "
},
{
	"uri": "http://ssanggu.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://ssanggu.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]