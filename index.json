[
{
	"uri": "http://ssanggu.github.io/ch2/",
	"title": "EVE-NG LAB",
	"tags": [],
	"description": "",
	"content": " Chapter 2 EVE-NG LAB  본 장은 그동안 구성해서 시험했던 EVE-NG LAB에 대한 환경을 정리합니다. LAB에 대한 설정파일을 자세하게 올리는 것이 아니고 구성했던 LAB의 구성도와 해당 LAB에서 습득해야하는 사항을 위주로 정리합니다. 해당 지식을 얻기위하여 본 LAB을 구성해서 실제로 설정을 해보세요. 가능하면 import해서 사용할 수 있는 LAB파일을 같이 올리겠지만 가능하면 실제적으로 LAB구성도를 꾸며보는것이 많은 도움이 될것입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch1/",
	"title": "준비단계",
	"tags": [],
	"description": "",
	"content": " Chapter 1 준비단계  본 장에서는 EVE-NG LAB을 사용하기 위해서 준비해야할 사항들을 정리하는 장입니다. LAB을 진행하는 동안 우분투 리눅스를 많이 접하게되지만 별도로 리눅스에 대한 자료를 정리하지 않습니다. 무료로 사용할 수 있는 VMWare Player를 설치하여 EVE-NG를 가상으로 설치하여 사용할 것입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch0/",
	"title": "네트워크 기초이론",
	"tags": [],
	"description": "",
	"content": " Chapter 0 네트워크 기초이론  본 장에서는 네트워크에 입문할때 기본적으로 알아야하는 기초이론에 대한 정리입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/",
	"title": "블로그소개",
	"tags": [],
	"description": "",
	"content": " 블로그 소개 한 상구(Han SangGu), 네트워크 필드 엔지니어, ssanggu@gmail.com\n \n 본 블로그는 EVE-NG(UnetLab)를 사용하여 구성하고 시험한 LAB환경을 정리하고, 각각의 LAB에서 어떤 지식을 습득해야하는지를 정리하는 블로그입니다. 가능한 다양한 네트워크 장비를 배치하여 구성함으로써 네트워크에 대한 개념을 좀더 효율적으로 정리할 수 있었습니다.    EVE-NG 가상화(VMWare Player, docker, kvm) 리눅스(Ubuntu, CentOS) 네트워크장비(Cisco, Juniper, Extreme VyOS) 보안장비(ASA, PaloAlto, SECUI MF2) IPSec VPN, OpenVPN, SSL VPN SDN(VxLAN)   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.93-opendaylight%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/",
	"title": "2.93 OpenDaylight컨트롤러",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 이번 LAB의 가장 큰목적은 OpenDaylight SDN컨트롤러를 만드는 것입니다. 현재 상태에서는 정확하게 SDN컨트롤러와 openvSwitch간의 openflow를 통해서 동작하는 방법을 이해하지 못한 상태입니다. 이후로 SDN LAB을 계속 시험해보기 위해서 OpenDaylight컨트롤러를 만들고 그 시스템에 Cisco DevNet에서 제공한 OFM(OpenFlow Manager) App을 설치해서 openflow테이블을 웹상에서 관리할 수 있도록 준비합니다. \n[LAB구성도] LAB구성파일: Exports_unetlab_export-20190428-105231.zip [LAB 수행조건] 본 LAB은 OpenDaylight 컨트롤러 이미지 만들기, openvSwitch와 VPC시스템 설정하기, 컨트롤러 웹인터페이스에서 상태확인하기로 이루어집니다.\n OpenDaylight 컨트롤러 이미지 만들기 Floodlight컨트롤러 작업때와 동일하게 인터넷이 가능하도록 ubuntu서버를 LAB에 등록하고 필요한 패키지를 설치한 후에 정상적으로 동작됨을 확인한후에 다른 LAB에서도 사용할 수 있도록 이미지변환을 수행할 것입니다.\n Ubuntu 16.04에 OpenDaylight Oxygen 설치하기문서를 참고해서 진행했습니다. 우분투서버를 구동하고 apt-get update 명령을 수행하여 패키지 목록을 갱신 OpenDaylight 컨트롤러는 java를 사용하기 때문에 자바 개발키트인 JDK를 설치해야 합니다. Java를 배포하는 오라클의 정책때문에 PPA방식의 설치로는 안됩니다. 따라서, 수동으로 받아서 설치하는 방법을 선택해야 합니다. 그리고, 현재 Java버전이 12까지 나왔지만 호환문제때문에 Java 8버전을 설치하는것으로 보입니다. 그래서, Java SE Development Kit 8 Downloads에서 jdk-8u212-linux-x64.tar.gz버전을 받아서 /usr/local디렉토리에 압축을 풀어서 사용할 수 있도록 했습니다.  root@ubuntu:/home/sghan# cd /usr/local root@ubuntu:/home/sghan# tar zxvpf /root/jdk-8u212-linux-x64.tar.gz root@ubuntu:/home/sghan# ls /usr/local/jdk1.8.0_212 bin include jre LICENSE README.html src.zip THIRDPARTYLICENSEREADME.txt COPYRIGHT javafx-src.zip lib man release THIRDPARTYLICENSEREADME-JAVAFX.txt   JDK압축해제 후에 bash환경변수에 JDK관련설정을 수행하고 환경변수에 적용한 후에 버전확인하는 것으로 정상동작 여부를 확인합니다.  /etc/bash.bashrc파일에 환경변수값 추가 export JAVA_HOME=/usr/local/jdk1.8.0_212 export CLASSPATH=$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin root@ubuntu:/home/sghan# source /etc/bash.bashrc root@ubuntu:/home/sghan# echo $JAVA_HOME /usr/local/jdk1.8.0_212 root@ubuntu:/home/sghan# java -version java version \u0026quot;1.8.0_212\u0026quot; Java(TM) SE Runtime Environment (build 1.8.0_212-b10) Java HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode) root@ubuntu:/home/sghan# javac -version javac 1.8.0_212   OpenDaylight컨트롤러는 가장 최근 버전이 2019년 3월에 발표된 Neon버전입니다.  하지만, Fluorine와 Neon버전은 웹관리 인터페이스인 DLUX feature가 지원되지 않습니다. 웹관리 인터페이스가 지원되지 않으면 CLI모드로 설정하기가 더 어려울것으로 판단되어서 DLUX feature를 지원하는 Oxygen버전의 마지막 버전인 SR4를 설치했습니다. 소스파일을 가져다가 빌드하는 것은 개발자가 아니라 의미가 없는것 같아서 이미 빌드된 zip파일을 받아서 압축만 해제한 후에 사용하는 것으로 선택했습니다. OpenDaylight Oxygen-SR4 다운로드 unzip패키지 설치와 압축을 해제해서 /usr/local디렉토리에 위치하기  root@ubuntu:~# wget https://nexus.opendaylight.org/content/repositories/public/org/opendaylight/integration/karaf/0.8.4/karaf-0.8.4.zip root@ubuntu:~# apt-get install unzip lsof telnet root@ubuntu:~# cd /usr/local/ root@ubuntu:/usr/local# unzip /root/karaf-0.8.4.zip root@ubuntu:/usr/local# cd karaf-0.8.4/ root@ubuntu:/usr/local/karaf-0.8.4# ls bin build.url configuration CONTRIBUTING.markdown data deploy etc lib LICENSE README.markdown system taglist.log   OpenDaylight컨트롤러 시작할때는 /usr/local/karaf-0.8.4/bin/karaf를 실행하면 되고, 종료할때는 OpenDaylight프롬포트에서 system:shutdown 또는 logout을 하면 됩니다.  root@ubuntu:/usr/local/karaf-0.8.4# cd bin root@ubuntu:/usr/local/karaf-0.8.4/bin# ./karaf Apache Karaf starting up. Press Enter to open the shell now... 100% [========================================================================] Karaf started in 1s. Bundle stats: 13 active, 13 total ________ ________ .__ .__ .__ __ \\_____ \\ ______ ____ ____ \\______ \\ _____ ___.__.| | |__| ____ | |___/ |_ / | \\\\____ \\_/ __ \\ / \\ | | \\\\__ \\\u0026lt; | || | | |/ ___\\| | \\ __\\ / | \\ |_\u0026gt; \u0026gt; ___/| | \\| ` \\/ __ \\\\___ || |_| / /_/ \u0026gt; Y \\ | \\_______ / __/ \\___ \u0026gt;___| /_______ (____ / ____||____/__\\___ /|___| /__| \\/|__| \\/ \\/ \\/ \\/\\/ /_____/ \\/ Hit '\u0026lt;tab\u0026gt;' for a list of available commands and '[cmd] --help' for help on a specific command. Hit '\u0026lt;ctrl-d\u0026gt;' or type 'system:shutdown' or 'logout' to shutdown OpenDaylight. opendaylight-user@root\u0026gt;feature:list |grep odl-dlux odl-dluxapps-yangutils │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- yangutils │ ODL :: dluxapps :: odl-dluxapps-yangutils odl-dluxapps-nodes │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- nodes │ ODL :: dluxapps :: odl-dluxapps-nodes odl-dluxapps-yangman │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- yangman │ ODL :: dluxapps :: odl-dluxapps-yangman odl-dluxapps-yangui │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- yangui │ ODL :: dluxapps :: odl-dluxapps-yangui odl-dlux-core │ 0.7.4 │ │ Uninstalled │ odl-dlux- 0.7.4 │ Opendaylight dlux minimal feature odl-dluxapps-topology │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- topology │ ODL :: dluxapps :: odl-dluxapps-topology odl-dluxapps-yangvisualizer │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- yangvisualizer │ ODL :: dluxapps :: odl-dluxapps-yangvisualizer odl-dluxapps-applications │ 0.7.4 │ │ Uninstalled │ odl-dluxapps- applications │ ODL :: dluxapps :: odl-dluxapps-applications   OpenDaylight에서 DLUX feature를 설치하여 웹관리인터페이스를 접속할 수 있도록 준비합니다.  opendaylight-user@root\u0026gt;feature:install odl-dlux-core odl-dluxapps-nodes odl-dluxapps-yangui odl-dluxapps-yangman odl-dluxapps-topology odl-dluxapps-yangutils odl-dluxapps-applications odl-dluxapps-yangvisualizer opendaylight-user@root\u0026gt;   DLUX feature가 정상설치되면 lsof -i -n명령으로 8181/TCP포트에서 LISTEN이 구동되어있는지 확인합니다. 연결하는 웹관리 인터페이스는 http://\u0026lt;컨트롤러ip\u0026gt;:8181/index.html이고 계정과 암호는 admin/admin입니다.  root@ubuntu:/home/sghan# lsof -i -n COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME dhclient 951 root 6u IPv4 13397 0t0 UDP *:bootpc sshd 1010 root 3u IPv4 15289 0t0 TCP *:ssh (LISTEN) sshd 1010 root 4u IPv6 15302 0t0 TCP *:ssh (LISTEN) sshd 1156 root 3u IPv4 15708 0t0 TCP 192.168.130.182:ssh-\u0026gt;192.168.130.1:63643 (ESTABLISHED) sshd 1179 sghan 3u IPv4 15708 0t0 TCP 192.168.130.182:ssh-\u0026gt;192.168.130.1:63643 (ESTABLISHED) java 1672 root 22u IPv6 18099 0t0 TCP *:36399 (LISTEN) java 1672 root 50u IPv6 18102 0t0 TCP 127.0.0.1:38491 (LISTEN) java 1672 root 91u IPv6 18148 0t0 TCP *:8181 (LISTEN) java 1672 root 103u IPv6 18115 0t0 TCP 127.0.0.1:rmiregistry (LISTEN) java 1672 root 104u IPv6 18116 0t0 TCP *:44444 (LISTEN) java 1672 root 112u IPv6 18124 0t0 TCP *:8101 (LISTEN) java 1672 root 197u IPv6 18171 0t0 TCP *:8185 (LISTEN) java 1672 root 230u IPv6 18161 0t0 TCP 127.0.0.1:2550 (LISTEN) sshd 1968 root 3u IPv4 18183 0t0 TCP 192.168.130.182:ssh-\u0026gt;192.168.130.1:64009 (ESTABLISHED) sshd 1993 sghan 3u IPv4 18183 0t0 TCP 192.168.130.182:ssh-\u0026gt;192.168.130.1:64009 (ESTABLISHED) root@ubuntu:/home/sghan#   openvSwitch와 통신을 위하여 openflowplugin과 l2switch feature를 설치합니다.  opendaylight-user@root\u0026gt;feature:install odl-l2switch-all odl-l2switch-packethandler odl-l2switch-switch odl-l2switch-switch-ui odl-l2switch-addresstracker odl-l2switch-loopremover features-l2switch odl-l2switch-arphandler odl-l2switch-hosttracker odl-l2switch-switch-rest opendaylight-user@root\u0026gt;feature:install odl-openflowplugin-app-forwardingrules-sync odl-openflowplugin-app-table-miss-enforcer odl-openflowplugin-app-topology-manager odl-openflowplugin-nxm-extensions odl-openflowplugin-onf-extensions odl-openflowplugin-flow-services-rest   opwnflow를 지원하는 스위치와 컨트롤러간에 통신할때 사용하는 포트는 6653/TCP포트이므로 해당 포트가 LISTEN상태인지를 확인합니다.  root@ubuntu:/home/opendaylight# netstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1010/sshd tcp6 0 0 :::8101 :::* LISTEN 2842/java tcp6 0 0 127.0.0.1:40965 :::* LISTEN 2842/java tcp6 0 0 :::6886 :::* LISTEN 2842/java tcp6 0 0 :::6633 :::* LISTEN 2842/java tcp6 0 0 :::44873 :::* LISTEN 2842/java tcp6 0 0 127.0.0.1:1099 :::* LISTEN 2842/java tcp6 0 0 :::46133 :::* LISTEN 2842/java tcp6 0 0 :::8181 :::* LISTEN 2842/java tcp6 0 0 127.0.0.1:2550 :::* LISTEN 2842/java tcp6 0 0 :::22 :::* LISTEN 1010/sshd tcp6 0 0 :::8185 :::* LISTEN 2842/java tcp6 0 0 :::44444 :::* LISTEN 2842/java tcp6 0 0 :::6653 :::* LISTEN 2842/java root@ubuntu:/home/opendaylight#   여기까지 정상진행 되었다면 OpenDaylight컨트롤러 설치가 완료되었고, 웹관리 인터페이스로 연결할 수 있습니다. [SDN동향]SDN 제어기의 Reactive \u0026amp; Proactive 패킷처리방식 문서를 참고하니 SDN스위치에 미리 패킷의 Flow를 정의하는 Proactive방식과 Flow가 정의되지 않은 미지의 패킷이 SDN스위치로 유입되었을때 SDN컨트롤러에 의하여 최적의 경로를 결정하는 Reactive방식이 있다고 합니다. OpenDaylight는 기본으로 Reactive방식으로 동작하기 때문에 openvswitch에서 OpenDaylight로 정상적으로 연결만되면 하단의 호스트들이 통신이 되게됩니다. 이후에 Flow를 직접 조정하고 설정하기 위해서는 Flow를 관리하기 위한 인터페이스가 필요하여서 Cisco DevNet에서 제공한 OFM(OpenFlow Manager)을 설치하기로 했습니다. OFM은 별도의 App형태로 실행됩니다. 또한, nodejs로 개발되었고, grunt라는 태스크 실행기로 실행하기 때문에 해당 패키지들에 대한 설치가 필요합니다. Node.js설치는 NodeSource Node.js Binary Distributions를 참고하여 설치하였습니다.  root@ubuntu:~# curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - root@ubuntu:~# sudo apt-get install -y nodejs root@ubuntu:~# apt-get install gcc g++ make root@ubuntu:~# curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - root@ubuntu:~# echo \u0026quot;deb https://dl.yarnpkg.com/debian/ stable main\u0026quot; | sudo tee /etc/apt/sources.list.d/yarn.list root@ubuntu:~# sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install yarn root@ubuntu:~# npm -v 6.9.0 root@ubuntu:~# nodejs -v v12.0.0   grunt는 GRUNT Getting started를 참고해서 설치햤습니다.  root@ubuntu:~# npm install -g grunt-cli /usr/bin/grunt -\u0026gt; /usr/lib/node_modules/grunt-cli/bin/grunt - grunt-cli@1.3.2 added 152 packages from 122 contributors in 12.705s   이제 OFM소스를 git로 복사해서 가지고 온 후에 env.module.js파일에 OpenDaylight의 base url과 접근암호를 수정한 후에 grunt로 실행하면 9000/TCP에 서버가 구동되는것을 확인할 수 있고, 웹브라우저로 연결됨을 확인할 수 있습니다.  root@ubuntu:~# cd /usr/local root@ubuntu:/usr/local# git clone https://github.com/CiscoDevNet/OpenDaylight-Openflow-App.git root@ubuntu:/usr/local/OpenDaylight-Openflow-App/ofm/src/common/config# ls env.module.js - Opendaylight의 Base URL과 암호수정필요 root@ubuntu:/usr/local/OpenDaylight-Openflow-App# grunt Running \u0026quot;connect:def\u0026quot; (connect) task Waiting forever... Started connect web server on http://localhost:9000   이제까지 설치한 작업을 LAB마다 다시 하는 것은 의미가 없으니깐 이렇게 설치된 상태로 이미지를 만들어 놓으면 완전한 OpenDaylight컨트롤러 이미지가 만들어집니다. 현재 LAB의 tmp디렉토리에서 해당 서버의 이미지 디렉토리를 찾아서 qemu-img conver -c -pO qcow2 hda.qcow2 변환이미지디렉토리/hda.qcow2로 이미지를 생성해서 다른 LAB에서도 사용가능하도록 준비하세요.  openvSwitch와 VPC시스템 설정하기\n VPC시스템들을 구성도에 정의된 IP로 설정합니다. ovs-Switch2설정하기  ifconfig eth0 up ifconfig eth1 up ifconfig eth2 up ovs-vsctl add-br bridge0 ovs-vsctl add-port bridge0 eth0 ovs-vsctl add-port bridge0 eth1 ovs-vsctl add-port bridge0 eth2 ifconfig bridge0 192.168.130.210 netmask 255.255.255.0 up route add -net 0.0.0.0 gw 192.168.130.2 ovs-vsctl set-controller bridge0 tcp:192.168.130.200:6653   ovs-Switch3설정하기  ifconfig eth0 up ifconfig eth1 up ovs-vsctl add-br bridge0 ovs-vsctl add-port bridge0 eth0 ovs-vsctl add-port bridge0 eth1 ifconfig bridge0 192.168.130.220 netmask 255.255.255.0 up route add -net 0.0.0.0 gw 192.168.130.2 ovs-vsctl set-controller bridge0 tcp:192.168.130.200:6653   위와같이 설정한 후에 각각의 ovs-Switch에서 ovs-vsctl list controller명령으로 컨트롤러 연결상태를 확인했을때 ACTIVE상태임을 확인하고 VPC시스템들간에 ping이 수행되는지를 확인합니다.  컨트롤러 웹인터페이스에서 상태확인하기\n VPC들간에 정상적인 통신을 확인하고 http://192.168.130.200:8181/index.html DLUX인터페이스를 연결하고 Topolog를 확인했을때 아래와 같이 스위치와 호스트에 대한 자동 Topology가 구성되어서 보입니다.  VPC들간에 통신이 수행되어었으므로 flow table상에 정보들이 나타날 것입니다. http://192.168.130.200:9000으로 OFM을 연결해서 확인할 수 있습니다.    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.92-floodlight-sdn%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/",
	"title": "2.92 Floodlight SDN컨트롤러",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 이번 LAB은 OpenFlow프로토콜을 지원하는 Opensource SDN Controller인 Floodlight를 EVE-BG에서 이용할 수 있도록 이미지를 구성하는 LAB입니다. Floodlight VM이미지를 이용하여 시스템을 만들고 Floodlight컨트롤러와 OpenvSwitch 2대 정도를 Cloud망에 연결해서 컨트롤러 GUI화면상에 스위치가 보이는지까지 시험을 하도록 합니다. \n[LAB 수행조건]  Floodlight Install Guide문서를 참조하면 설치할 수 있습니다. 하지만, 수동으로 설치를 해보니 Floodlight가 Java 7 또는 8이 설치되어 있어야하는데 Oracle JDK8부터 설치가 쉽지 않았습니다. 그래서 모든것이 포함되어 있는 Floodlight VM이미지를 받아서 이 이미지를 KVM이미지로 변환해서 사용하기로 했습니다. VM이미지로 설치하는것은 Floodlight VM를 참조했습니다. Floodlight VM이미지 받아서 압축풀기  root@eve-ng:~# wget http://opennetlinux.org/binaries/floodlight-vm.zip --2019-04-26 15:38:03-- http://opennetlinux.org/binaries/floodlight-vm.zip Resolving opennetlinux.org (opennetlinux.org)... 165.227.87.248, 2604:a880:400:d0::383c:d001 Connecting to opennetlinux.org (opennetlinux.org)|165.227.87.248|:80... connected. HTTP request sent, awaiting response... 200 OK Length: unspecified [application/zip] Saving to: ‘floodlight-vm.zip’ floodlight-vm.zip [ \u0026lt;=\u0026gt; ] 1.29G 4.23MB/s in 4m 4s 2019-04-26 15:42:09 (5.41 MB/s) - ‘floodlight-vm.zip’ saved [1386953751] root@eve-ng:~# unzip floodlight-vm.zip Archive: floodlight-vm.zip inflating: Floodlight-v1.1+Mininet.vmdk root@eve-ng:~#   Floodlight이미지를 넣어줄 디렉토리를 만들고 해당디렉토리 이동. 디렉토리 이름은 linux-로 시작해야 합니다.  root@eve-ng:~# mkdir /opt/unetlab/addons/qemu/linux-Floodlight root@eve-ng:~# cd /opt/unetlab/addons/qemu/linux-Floodlight   압축을 해제한 vmdk파일을 qcow2로 이미지변환해서 linux-Floodlight디렉토리에 저장하고 권한조정 명령을 수행합니다.  root@eve-ng:/opt/unetlab/addons/qemu/linux-Floodlight# qemu-img convert -f vmdk -pO qcow2 /root/Floodlight-v1.1+Mininet.vmdk hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/linux-Floodlight# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions  [LAB구성도] LAB구성파일: Exports_unetlab_export-20190426-090759.zip  LAB을 구성할때 아래와 같이 linux-Floodlight이미지를 선택할 수 있어야 합니다.  모든장비를 구성하고나서 Start Floodkight-Controller시스템 시작하기\n 시스템을 연결하면 VNC로 화면이 연결됩니다. 사용자계정은 floodlight이고 암호도 floodlight입니다. 로그인을해서 네트워크설정에서 IP를 구성합니다.  Flooglight빌드하기. 정상적으로 빌드가 완료되면 \u0026ldquo;BUILD SUCCESFUL\u0026rdquo;메시지를 볼수 있습니다. cd /home/floodlight/floodlight; ant  Floodlight를 시작할때는 /home/floodlight/floodlight/floodlight.sh을 구동하면 됩니다. 포워그라운드로 프로세스가 구동됨으로 터미널을 종료하면 안됩니다. 구동되는 메시지에서 OpenFlow포트번호(6653/TCP)를 확인하세요.   ovs-Switch2, ovs-Switch3스위치 구성은 아래와 같은 절차로 설정합니다.\n 물리적인 인터페이스 활성화 bridge인터페이스 생성 bridge인터페이스에 포트추가 bridge인터페이스에 ip설정 스위치에서 컨트롤러로 통신시험(ping) 컨트롤러 설정 컨트롤러 연결상태 확인   컨트롤러 Web GUI연결하기\n 연결주소는 http://\u0026lt;컨트롤러ip:8080/ui/index.html DashBoard  Topology  Switches    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.91-openvswitch%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.91 OpenvSwitch기본구성하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 이번 LAB은 OpenvSwitch를 SDN네트워크에 이용하는 방법을 익히기 전에 기본 vlan스위치로 이용가능한지 시험을 하기 위하여 구성한 LAB입니다. ovs-vsctl명령으로 vlan설정하는 방법을 익혀야합니다. \n[구성도] LAB구성파일: Exports_unetlab_export-20190425-145827.zip \n[LAB수행조건]  OpenvSwitch에 VLAN설정하는 방법은 Isolating VM Traffic Using VLANs 문서를 참고했습니다. 호스트들이 연결된 물리적인 포트를 활성화하고, bridge0라는 브리지네트워크를 구성한 후에 물리적인 포트를 추가합니다.  ifconfig eth0 up ifconfig eth1 up ifconfig eth2 up ifconfig eth3 up ifconfig eth4 up ovs-vsctl add-br bridge0 ovs-vsctl add-port bridge0 eth0 ovs-vsctl add-port bridge0 eth1 ovs-vsctl add-port bridge0 eth4 ovs-vsctl add-port bridge0 eth2 tag=100 ovs-vsctl add-port bridge0 eth3 tag=100  위의 설정한 후에 결과를 확인해볼까요. 위와같이 구성을 완료하면 VPC2,3간의 통신 OK, VPC4,5간의 통신OK입니다. 하지만 VPC6은 trunk mode인데 tag가 지정되지 않아서 통신이 안됩니다. 이제 VPC노드들간의 통신을 할 수 있도록 L3스위치를 위쪽에 연결해봅시다. \n[구성도] LAB구성파일: Exports_unetlab_export-20190425-154720.zip \n[LAB수행조건]  L3스위치와 연결된 eth5인터페이스를 활성화하고 bridge0에 trunk포트로 추가합니다.  ifconfig eth5 up ovs-vsctl add-port bridge0 eth5  eth5를 설정한 후의 결과화면입니다. + L3스위치의 기본설정은 아래와 같습니다.\n! vlan 100 name VLAN100 ! vlan 200 name VLAN200 ! interface GigabitEthernet0/0 switchport trunk encapsulation dot1q switchport trunk native vlan 200 switchport mode trunk media-type rj45 negotiation auto ! interface Vlan100 ip address 172.16.100.1 255.255.255.0 ! interface Vlan200 ip address 10.0.10.1 255.255.255.0 !   설정을 완료하고 L3스위치에 VPC6을 제외한 모든 VPC시스템으로 ping이 됨을 확인할 수 있습니다.  L3스위치에서 모든 VPC시스템들까지 ping이 되지만 VLAN100과 VLAN200간의 VPC들끼리는 통신이 안되는 문제가 발생했습니다. 이것은 아마도 아래의 자료처럼 untagged패킷처리하는 부분의 설정이 정상적이지 않아서 발생하는 문제같습니다. 이 부분은 좀 더 시험이 필요한것으로 보입니다. 첨부 pdf파일을 통해서 ovs에서 trunk설정을 좀 더 찾아보고 이 문제에 대한 답변을 달도록 하겠습니다.\n     참고파일   ovs-vswitchd.conf.db.5.pdf  (173 ko)    [추가시험] VLAN100으로 지정된 VPC들을 제외한 시스템들을 L3스위치에서 native vlan을 200으로 설정하여 통신하도록 구현하려고 추가시험을 했지만 성공하지는 못했습니다. openvswitch에서 추가된 포트들은 기본적으로 trunk포트이고, tag을 지정한 포트는 access포트가 된다고 합니다. vlan_mode값에 access, native-tagged, native-untagged, trunk중에 한가지로 설정할 수 있다고하여 native-*로 설정해서 서로 다른 네트워크간에 통신이 되도록 설정하고자 했으나 설정을 완료하지 못했읍니다. 따라서, 아래와 같이 VPC2,3시스템을 VLAN200으로 소속시키고 L3스위치에서는 native vlan설정을 지워서 VLAN간의 통신이 정상적으로 수행되는것을 확인하고 이번 LAB을 종료합니다. "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.90-openvswitch%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
	"title": "2.90 OpenvSwitch설치하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 이번 LAB은 이후에 진행할 SDN(소프트웨어 정의 네트워크) LAB을 꾸밀때 이용할 OpenFlow를 지원하는 스위치를 만드는 LAN입니다. 2.48 우분루 리눅스이미지 생성 LAB에서 만들어놓은 우분투 이미지를 사용하여 OpenvSwitch패키지를 생성하여 별도의 리눅스 이미지를 만들것입니다. \n[LAB수행조건]  우선, 아래의 그리처럼 우분투서버를 인터넷연결이 가능하도록 Cloud에 연결해서 시스템을 구동합니다.  OpenvSwitch설치방법은 Debian패키지설치방법을 참조하여 설치하였습니다.  apt-get update apt-get install openvswitch-switch openvswitch-common openvswitch-switch-dpdk openvswitch-vtep   설치가 완료되면 아래와 같이 설치에 대한 확인을 수행합니다.   dpkg -l |grep openvswitch : openvsdwitch패키지들이 정상적으로 설치됨을 확인 systemctl status openvswitch-switch : openvswitch-switch서비스가 정상적으로 구동됨을 확인 ovs-vsctl show : openvswitch의 제어명령을 통해서 버전정보확인으로 정상적인 설치확인   패키지는 정상적으로 설치되었습니다. 이 설치된 이미지를 기반으로 앞으로 사용할 이미지를 만들것이기 때문에 아래와 같이 몇가지 네트워크 설정을 수정할 것입니다. 네트워크 설정부분을 수정하는것이기때문에 이 작업들은 SSH연결이 아닌 콘솔에서 수행해야 합니다.  우분투에서 네트워크 인터페이스명이 eth가 아닌 ens로 시작됩니다. LAB에서 일반적인 이미지로 사용할것이어서 ens디바이스명을 원래데로 eth로 변경하고자 합니다. Change default network name (ens33) to old “eth0” on Ubuntu 18.04 / Ubuntu 16.04문서를 참조하여 인터페이스명을 ens3에서 eth0로 변경하였습니다.  ens3의 ip를 지우고, 부팅할때 dhcp서버에서 ip를 받기위해서 시간이 지체되는것을 막기위해서 ens3의 설정을 dhcp에서 manual모드로 변경하고 디바이스명을 eth0로 변경할것입니다.  서버를 재부팅하고 부팅이 완료되면 아래와 같이 네트워크 디바이스명이 eth0로 변경된것과 openvswitch서비스가 정상적으로 구동된것을 확인한 후에 정상적이면 시스템을 shutdown합니다.   현재 설치한 이미지는 이 LAB에서만 의미를 가집니다. 이 LAB을 삭제하면 이제까지 설치한 작업이 모두 없어지기 때문에 다른 LAB에서 지금까지 구성한 openvswitch를 사용하려면 이미지화해야합니다. 아래와 같은 절차를 통해서 이미지를 생성하도록 하겠습니다.  현재 구성하고 있는 LAB의 번호를 확인. EVE-NG의 왼쪽메뉴에서 Lab Details를 선택하면 아래와 같이 LAB정보가 나옵니다.  LAB을생성하면 LAB에서 사용하는 이미지들은 /opt/unetlab/tmp/0/폴더에 만들어집니다. 이 디렉토리 하단에 LAB정보에서 나온 번호의 디렉토리로 들어가면 LAB에서 생성한 시스템의 이미지들이 있습니다. 현재 등록된 우분투서버는 LAB상에 id 2번으로 인식되고 있으므로 2번 디렉토리로 이동합니다. 2번디렉토리에보면 hdq.qcow2이미지가 있는데 이 이미지가 openvswitch패키지를 설치한 이미지이기 때문에 이것을 변환해서 사용할 것입니다.  qemu-img convert -c -pO qcow2 hda.qcow2 /data1/temp/hda.qcow2 명령을 실행하면 현재 hdq.qcow2이미지를 변환해서 /data1/temp디렉토리에 임시로 저장할것입니다.  100%로 완료되면 /data1/temp디렉토리에 해당 이미지가 정상적으로 있는지 확인하고 EVE-NG 이미지폴더(/opt/unetlab/addons/qemu)밑에 linux-로 시작하는 폴더(linux-OpenvSwitch)를 생성합니다. 그리고 변환한 이미지를 해당폴더로 이동합니다.  mv /data1/temp/hda.qcow2 /opt/unetlab/addons/qemu/linux-OpenvSwitch  이동한 폴더의 이미지를 확인하고 권한수정명령을 수행합니다.   완료되었습니다. 이제부터 Node추가할때 Linux를 선택하면 아래와 같이 Image목록에 linux-OpenvSwitch를 선택해서 사용할 수 있습니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.89-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-10/",
	"title": "2.89 VxLAN개념익히기-10",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190318-080046.zip \n[LAB의 목적] 본 LAB은 802.1X인증시험을 VxLAN환경에 적용하여 시험하는 LAB입니다. \n[LAB수행조건]  LAB구성도는 2.87 VxLAN개념익히기-9에서 정의한 LAB에 하단장비만 VPC에서 802.1X를 시험할 수 있는 라즈베리로 변경했으므로 상단 장비들의 설정은 동일하게 설정하면 됩니다. VyOS 백업한 config파일을 load명령으로 다시 넣어주는 명령들이 있으니깐 한번 기존 config를 받아서 넣어보세요. 각동의 메인스위와 지점의 VyOS-FireWall2장비를 벗어나는 트래픽은 모두 VxLAN터널로 통신해야 합니다. freeradius서버의 사용자구성은 아래와 같이 했읍니다.  각동에 연결된 라즈베리파이 시스템에서 등록된 사용자중 임의로 선택해서 wpa_supplicant를 구성하고 시험했을때 해당 사용자가 소속된 VLAN을 할당받고 해당 네트워크의 IP를 부여받아서 인터넷이 되는것을 확인합니다. 하나의 터미널에서 wpa_supplicant를 구동해놓고 다른 터미널에서 802.1X를 수행하기 이전에 IP할당시도를 했기때문에 IP를 할당받지 못한 상태인데, systemctl restart dhcpcd를 수행하고 좀 기달리면(약간걸림) IP를 정상적으로 받아옵니다.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.88-802.1x%EC%9D%B8%EC%A6%9D%EC%8B%9C%ED%97%98/",
	"title": "2.88 802.1X인증시험",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190314-064256.zip \n[LAB의 목적] VxLAN다음 단계를 진행하기 위해서 기능시험을 위한 LAB올립니다.  사용자들이 자유롭게 위치를 이동하더라도 자신에게 할당받은 고유한 IP주소를 계속 사용하려면 사용자에 대한 신원확인이 필수적입니다. Cisco ISE에서 동작하는 원리는 차후 더 찾아봐야 하겠지만, 현재 환경에서 RADIUS서버와 스위치의 802.1X인증을 통해서 이와 같은 환경을 구성해봅니다. \n[LAB수행조건]  Cisco 3725 Dynamips이미지가 필요합니다. Dynamips이미지를 만드는 과정을 수행했던것으로 기억하는데 이미지가 없다면 자료를 찾아서 가장 먼저 이 이미지를 올려주세요. 현재 LAB환경에서 802.1x기능을 지원하는것은 C3725라우터에 16포트 스위치모듈을 Slot에 장착해서 사용하는것 밖에 없습니다.  리눅스머신을 구동해서 인터넷이 되도록 만든후에 FreeRADIUS패키지를 설치해서 FreeRADIUS서버를 구성하세요. 서버를 구성할때 참조한 내용은 How To Install FreeRADIUS On Ubuntu Server - Packet6입니다. 참조문서에 따라서 설정했던 radius.conf, eap.conf, users파일은 첨부파일로 올렸으니 참고하세요. C3725라우터는 Cloud0를 연결, RADIUS서버연결하는 인터페이스는 라우터포트로 설정했고, 스위치 16포트는 모두 802.1X포트설정을 했읍니다. vlan 100, 200을 생성하고 L3인터페이스를 만들어놓았으면 라우터에 dhcp서버를 vlan100, vlan200에 대해서 생성했읍니다. 라우터의 config파일을 첨부파일로 올립니다. 설정할때 참조한 링크는 CCNP SWITCH and GNS3 – part 2.3 LAB - Configuring User AAA authentication and 802.1X port-based authentication 와 IEEE 802.1X VLAN Assignment\u0026nbsp; [Support]입니다. 802.1X인증시험을 Window7과 라즈베리파이 머신 2대로 진행했읍니다. Win7은 메모리를 많이 차지해서 여러대 구동하기가 어려울듯해서 좀 더 가벼운 라즈베리파이도 시험을 했읍니다. VxLAN환경에서 시험할때는 라즈베리파이를 사용해서 여러대 구동해볼 예정입니다. Windows 7의 유선NIC에서 802.1X를 사용하기 위해서 설정하는 부분은 Configuring 802.1X Wired Authentication on를 참고했읍니다. 라즈베리파일에서 802.1X를 설정하는 부분은 raspberry pi 3 Ethernet with 802.1X를 참고했고요, wpa_supplicant.conf파일을 첨부파일로 올렸읍니다. Windows 7에서 sghan으로 로그인하면 Windows 7이 연결된 Fa1/0이 VLAN100에 소속되고 VLAN100의 IP가 할당됩니다.  Windows 7에서 sghan1으로 로그인하면 Windows 7이 연결된 Fa1/0이 VLAN200에 소속되고 VLAN200의 IP가 할당됩니다.  라즈베리파이에서 sghan으로 로그인하면 라즈베리파이가 연결된 Fa1/1이 VLAN100에 소속되고 VLAN100의 IP가 할당됩니다.  라즈베리파이에서 sghan1으로 로그인하면 라즈베리파이가 연결된 Fa1/1이 VLAN200에 소속되고 VLAN200의 IP가 할당됩니다.     Attachments   R3725.cfg  (3 ko)   eap.conf  (21 ko)   radiusd.conf  (28 ko)   users  (6 ko)   wpa_supplicant.conf  (0 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.87-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-9/",
	"title": "2.87 VxLAN개념익히기-9",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190307-090516.zip \n[LAB의 목적] 본 LAB에서는 각동의 노드들이 IP를 자동으로 할당받도록 네트워크를 구성할때 어떤 장비에서 dhcp relay를 수행해야하는지를 이해하고 정상적으로 IP할당이 이루어지는지를 확인하는 것입니다. \n[LAB수행조건]  구성도는 2.86 VxLAN개념익히기-8에서 사용한 구성도에 DHCP서버를 추가한 것임 모든 VxLAN에 있는 VPC들이 dhcp서버를 통해서 IP를 자동할당 받도록 구성하기 VyOS에서 DHCP서버구성하는 것과 Broder-GW에서 dhcp relay를 설정해주는 것이 필요  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.86-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-8/",
	"title": "2.86 VxLAN개념익히기-8",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190304-060202.zip \n[LAB의 목적] 본 LAB을 설정하면서 언더레이 네트워크와 오버레이 네트워크에 대한 개념이해가 필요합니다. 각동의 단말들은 오버레이 네트워크를 통해서 Broder-GW까지 와서 다른 네트워크와 통신을 수행한다는 것을 이해하시기 바랍니다. 또한, 방화벽이 있을때 VxLAN캡슐화에 사용되는 UDP 포트만 허용되었을때 정상적인 통신이 되는지를 확인하고자 합니다. \n[LAB수행조건]  Border-GW와 A-Dong-Main, B-Dong-Main, C-Dong-Main, 지점의 VyOS-FireWall2장비간에 VxLAN터널링으로 10.0.100.0/24, 10.0.110.0/24, 10.0.120.0/24, 10.0.130.0/24대역이 서로간에 통신이 되고 Cloud0를 통해서 인터넷도 가능하도록 NAT설정도 해보세요. 추가로 VyOS-FireWall과 vyOS-FireWall2에서 VxLAN터널링이 사용하는 8472/UDP포트만 허락하는 방화벽정책을 설정했을때 정상적으로 통신이 되는지도 확인해보세요. VyOS에서 firewall정책을 interface기반으로 적용할때 in, out, local이 있습니다. 패킷이 VyOS자신의 인터페이스를 목적지로하는 패킷은 local에 적용해야됩니다.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.85-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-7/",
	"title": "2.85 VxLAN개념익히기-7",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190302-172116.zip \n[LAB의 목적] 엔터프라이즈 네트워크환경에서 peer가 한개 이상일때 peer로 설정할 수 없기때문에 multicast address를 사용하여 구성해야한다는 것을 이해하기 위한 LAB입니다. \n[LAB수행조건]  2.84 VxLAN개념익히기-6에서 설정했던 환경에 한개 동을 더 추가해서 확장한 것입니다. 현재 VyOS는 multicast routing을 지원하지 않아서 백본스위치 용도로 Cisco IOL스위치를 넣었습니다. 본 LAB은 VXLAN문서를 참고하여 설정하였습니다.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.84-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-6/",
	"title": "2.84 VxLAN개념익히기-6",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190302-135452.zip \n[LAB의 목적] 엔터프라이즈 네트워크환경에서 peer가 한개 이상일때 peer로 설정할 수 없기때문에 multicast address를 사용하여 구성해야한다는 것을 이해하기 위한 LAB입니다. \n[LAB수행조건]  VyOS1을 백본스위치로 간주하고, VyOS2는 동의 메인스위치로 생각했을때 둘간에 VxLAN캡슐화로 통신을 하도록 구성하려고 합니다. 기존까지는 VxLAN에 peer를 지정해서 설정을 했을것입니다. VyOS1 백본스위치에서 구성도처럼 동이 한개만 있다면 peer를 사용해도 되지만 여러개의 동이 구성되면 백본스위치입장에서 peer를 어떤것으로 지정을 해야할까요?? 이 고민으로 출발해보니 multicast를 사용해야하는 이유가 나오더군요. 본 LAB은 peer를 사용하지 마시고 multicast group주소를 사용해서 구성해보세요.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.83-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-5/",
	"title": "2.83 VxLAN개념익히기-5",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190226-045111.zip \n[LAB의 목적] 본 LAB은 하단에 시스코 스위치를 연결하여 VLAN과 VxLAN매핑관계를 이해하기 위한 LAB입니다. \n[개념도] 아래의 그림은 VxLAN과 VLAN이 묶이는 개념도입니다. \n[LAB수행조건] 이번 LAB에서는 기존의 구성을 하단 시스코스위치로 VLAN을 확장해보도록 합니다. VyOS에서 trunk로 tagging되는 vlan정보를 인터페이스에 연결해주는 방법을 이해해야합니다. 그리고, 172.16.241.0/24, 172.16.242.0/24대역에 대한 L3라우팅을 SW13스위치에 올렸는데 SW13에서 해야할지 VyOS2에서 해야할지 어떤것이 좋은 방법인지는 고민을 해봐야할듯합니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.82-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-4/",
	"title": "2.82 VxLAN개념익히기-4",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 본 LAB은 2.81 VxLAN개념익히기-3에서 설정한 모든 노드들이 인터넷이 되도록 설정하는것이 목적이고, default route정보를 OSPF로 재분재(redistribution)해주는 방법과 VyOS NAT설정에서 특정대역을 배제(exclude)시키는 방법에 대해서 익히기 위함입니다. \n[LAB수행조건]  ISP에 있는 R1라우터에 각 VMWare의 NAT인터페이스를 연결하고 LAB상의 모든 대역이 연결된 인터페이스로 NAT되도록 구성하기 R1에 설정된 default route정보가 OSPF로 모든 라우터에 뿌려지도록 구성하기(이렇게 구성하면 라우팅 테이블에 존재하지 않는 네트워크로 가는 패킷들은 모두 R1으로 오게되므로 인터넷 통신이 가능) 위와같이 구성이 되면 모든 라우터에서는 인터넷으로 통신이 가능하지만 도커에서는 인터넷 통신이 안됨. 왜냐하면 도커가 사용하는 172.16.241.0/24, 172.16.242.0/24대역은 ISP에 존재하는 라우터들이 모르는 네트워크들이기 때문입니다. 내부에서 임의로 사용하는 IP를 ISP쪽으로 라우팅을 뿌리거나 설정하는것은 안되므로 VyOS2라우터에서 NAT처리하도록 설정하세요. NAT설정할때 외부 연결인터페이스 eth1, eth3에서 어떤 것을 타고 나갈지 모르기 때문에 두 인터페이스 모두에 적용해야함. 또한, 172.16.241.0/24와 172.16.242.0/24대역끼리 통신하는것은 VxLAN UDP캡슐화가 되어야 하기 때문에 NAT룰에서 배제되어야 합니다. 이 두가지를 주의해서 NAT설정을 해보세요.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.81-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-3/",
	"title": "2.81 VxLAN개념익히기-3",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190225-093554.zip\n\n[LAB의 목적] 여러개의 L3장비를 통과하더라고 VxLAN UDP 캡슐화를 통해서 떨어져 있는 장비들을 동일대역으로 묶어서 통신할 수 있다는 것을 이해하기 위한 LAB입니다. \n[LAB수행조건] 두대의 VyOS사이에 조금 복잡해보이는 ISP를 한번 구성해볼까요.\n여러대의 라우터를 OSPF로 라우팅을 구성해보세요. 구성을 간단히 하기 위해서 OSPF는 area 0에만 연결하도록 구성합니다. 이 LAB의 목적은 여러개의 L3장비를 통과하더라도 VxLAN UDP캡슐화를 통해서 떨어져 있는 장비들을 동일대역으로 묶어서 통신할 수 있다는것을 이해하기 위함입니다. \n통신이 된다면 아래의 사항들을 수행해보세요.\n ISP의 라우터상에 패킷을 캡처했을때 UDP로 encapsulation이 되어서 보이나요? 통신되고 있는 라우터의 링크를 down시켜서 다른 path로 자동 복구되는지 시험해보세요. 라우터 인터페이스의 ospf cost를 조정해서 통신하는 path를 변경되도록 해보세요. [고민해볼까요??] VyOS에서 ISP연결이 2개의 인터페이스에 있는데 통신하고자 하는 상대방을 어떤 인터페이스를 선택해서 통신할 것인지? 두개중에 자동으로 선택해서 통신을 하도록 만들고 싶은데\u0026hellip; ==\u0026gt; 이 문제를 고민하면서 loopback인터페이스를 왜 사용하는지에 대한 이해를 하기 바랍니다. \n[LAB 구성후기] 이번 LAB은 여러대의 L3장비를 구성해서 ISP를 통과한다는 전제조건을 만들려고 했고요, VyOS장비가 외부로 2개의 회선을 가지고 있을때 VxLAN터널 peer주소를 물리적인 인터페이스 주소를 사용했을때 인터페이스 장애가 발생하면 통신이 안되기 때문에 회선의 이중화가 의미가 없어지게 됩니다. 따라서, 장비에 loopback주소를 사용해서 peer주소를 지정했습니다. 또한 언더레이 인터페이스를 지정하는 link명령을 사용하지 않아도 라우팅테이블로 peer주소가 올라오므로 정상적으로 통신이 됩니다.  각각의 라우터들은 인터페이스와 ospf네트워크만 정의를 했습니다. \n R1라우터 설정값\n  ! interface Ethernet0/0 ip address 10.10.1.2 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.17 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.21 255.255.255.252 ! router ospf 1 log-adjacency-changes network 10.10.1.0 0.0.0.3 area 0 network 10.10.1.16 0.0.0.3 area 0 network 10.10.1.20 0.0.0.3 area 0 ! R1#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et0/1 1 0 10.10.1.17/30 10 DR 1/1 Et0/2 1 0 10.10.1.21/30 10 DR 1/1 Et0/0 1 0 10.10.1.2/30 10 DR 1/1 R1#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.1.33 1 FULL/BDR 00:00:38 10.10.1.18 Ethernet0/1 10.10.1.41 1 FULL/BDR 00:00:37 10.10.1.22 Ethernet0/2 10.10.2.1 1 FULL/BDR 00:00:38 10.10.1.1 Ethernet0/0 R1#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 19 subnets, 2 masks C 10.10.1.0/30 is directly connected, Ethernet0/0 L 10.10.1.2/32 is directly connected, Ethernet0/0 O 10.10.1.4/30 [110/20] via 10.10.1.22, 00:38:48, Ethernet0/2 [110/20] via 10.10.1.1, 00:14:34, Ethernet0/0 O 10.10.1.8/30 [110/40] via 10.10.1.22, 00:09:23, Ethernet0/2 [110/40] via 10.10.1.18, 00:09:23, Ethernet0/1 O 10.10.1.12/30 [110/30] via 10.10.1.22, 00:25:05, Ethernet0/2 [110/30] via 10.10.1.18, 00:25:05, Ethernet0/1 C 10.10.1.16/30 is directly connected, Ethernet0/1 L 10.10.1.17/32 is directly connected, Ethernet0/1 C 10.10.1.20/30 is directly connected, Ethernet0/2 L 10.10.1.21/32 is directly connected, Ethernet0/2 O 10.10.1.24/30 [110/20] via 10.10.1.22, 00:39:30, Ethernet0/2 [110/20] via 10.10.1.18, 00:42:23, Ethernet0/1 O 10.10.1.28/30 [110/20] via 10.10.1.18, 00:42:23, Ethernet0/1 O 10.10.1.32/30 [110/20] via 10.10.1.18, 00:42:13, Ethernet0/1 O 10.10.1.36/30 [110/20] via 10.10.1.22, 00:39:20, Ethernet0/2 O 10.10.1.40/30 [110/20] via 10.10.1.22, 00:39:10, Ethernet0/2 O 10.10.1.44/30 [110/30] via 10.10.1.22, 00:25:35, Ethernet0/2 [110/30] via 10.10.1.18, 00:25:15, Ethernet0/1 O 10.10.1.48/30 [110/30] via 10.10.1.22, 00:25:05, Ethernet0/2 [110/30] via 10.10.1.18, 00:25:05, Ethernet0/1 O 10.10.1.52/30 [110/30] via 10.10.1.22, 00:33:30, Ethernet0/2 [110/30] via 10.10.1.18, 00:32:32, Ethernet0/1 O 10.10.2.1/32 [110/20] via 10.10.1.1, 00:14:34, Ethernet0/0 O 10.10.3.1/32 [110/40] via 10.10.1.22, 00:09:23, Ethernet0/2 [110/40] via 10.10.1.18, 00:09:23, Ethernet0/1   R8라우터 설정값  ! interface Ethernet0/0 ip address 10.10.1.18 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.25 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.29 255.255.255.252 ! interface Ethernet0/3 ip address 10.10.1.33 255.255.255.252 ! router ospf 1 log-adjacency-changes network 10.10.1.16 0.0.0.3 area 0 network 10.10.1.24 0.0.0.3 area 0 network 10.10.1.28 0.0.0.3 area 0 network 10.10.1.32 0.0.0.3 area 0 ! R8#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et0/3 1 0 10.10.1.33/30 10 DR 1/1 Et0/2 1 0 10.10.1.29/30 10 DR 1/1 Et0/1 1 0 10.10.1.25/30 10 DR 1/1 Et0/0 1 0 10.10.1.18/30 10 BDR 1/1 R8#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.1.53 1 FULL/BDR 00:00:39 10.10.1.34 Ethernet0/3 10.10.1.49 1 FULL/BDR 00:00:37 10.10.1.30 Ethernet0/2 10.10.1.41 1 FULL/BDR 00:00:35 10.10.1.26 Ethernet0/1 10.10.1.21 1 FULL/DR 00:00:35 10.10.1.17 Ethernet0/0 R8#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 20 subnets, 2 masks O 10.10.1.0/30 [110/20] via 10.10.1.17, 00:44:48, Ethernet0/0 O 10.10.1.4/30 [110/20] via 10.10.1.26, 00:41:09, Ethernet0/1 O 10.10.1.8/30 [110/30] via 10.10.1.34, 00:24:46, Ethernet0/3 [110/30] via 10.10.1.30, 00:11:44, Ethernet0/2 O 10.10.1.12/30 [110/20] via 10.10.1.30, 00:27:26, Ethernet0/2 C 10.10.1.16/30 is directly connected, Ethernet0/0 L 10.10.1.18/32 is directly connected, Ethernet0/0 O 10.10.1.20/30 [110/20] via 10.10.1.26, 00:41:50, Ethernet0/1 [110/20] via 10.10.1.17, 00:44:48, Ethernet0/0 C 10.10.1.24/30 is directly connected, Ethernet0/1 L 10.10.1.25/32 is directly connected, Ethernet0/1 C 10.10.1.28/30 is directly connected, Ethernet0/2 L 10.10.1.29/32 is directly connected, Ethernet0/2 C 10.10.1.32/30 is directly connected, Ethernet0/3 L 10.10.1.33/32 is directly connected, Ethernet0/3 O 10.10.1.36/30 [110/20] via 10.10.1.34, 00:34:53, Ethernet0/3 [110/20] via 10.10.1.26, 00:41:40, Ethernet0/1 O 10.10.1.40/30 [110/20] via 10.10.1.30, 00:27:36, Ethernet0/2 [110/20] via 10.10.1.26, 00:41:30, Ethernet0/1 O 10.10.1.44/30 [110/20] via 10.10.1.30, 00:27:36, Ethernet0/2 O 10.10.1.48/30 [110/20] via 10.10.1.34, 00:34:43, Ethernet0/3 [110/20] via 10.10.1.30, 00:27:26, Ethernet0/2 O 10.10.1.52/30 [110/20] via 10.10.1.34, 00:34:53, Ethernet0/3 O 10.10.2.1/32 [110/30] via 10.10.1.26, 00:17:04, Ethernet0/1 [110/30] via 10.10.1.17, 00:16:54, Ethernet0/0 O 10.10.3.1/32 [110/30] via 10.10.1.30, 00:11:44, Ethernet0/2 R8#   R9라우터 설정값  ! interface Ethernet0/0 ip address 10.10.1.22 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.26 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.37 255.255.255.252 ! interface Ethernet0/3 ip address 10.10.1.41 255.255.255.252 ! interface Ethernet1/0 ip address 10.10.1.6 255.255.255.252 ! router ospf 1 log-adjacency-changes network 10.10.1.4 0.0.0.3 area 0 network 10.10.1.20 0.0.0.3 area 0 network 10.10.1.24 0.0.0.3 area 0 network 10.10.1.36 0.0.0.3 area 0 network 10.10.1.40 0.0.0.3 area 0 ! R9#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et1/0 1 0 10.10.1.6/30 10 DR 1/1 Et0/3 1 0 10.10.1.41/30 10 DR 1/1 Et0/2 1 0 10.10.1.37/30 10 DR 1/1 Et0/1 1 0 10.10.1.26/30 10 BDR 1/1 Et0/0 1 0 10.10.1.22/30 10 BDR 1/1 R9#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.2.1 1 FULL/BDR 00:00:34 10.10.1.5 Ethernet1/0 10.10.1.49 1 FULL/BDR 00:00:30 10.10.1.42 Ethernet0/3 10.10.1.53 1 FULL/BDR 00:00:36 10.10.1.38 Ethernet0/2 10.10.1.33 1 FULL/DR 00:00:33 10.10.1.25 Ethernet0/1 10.10.1.21 1 FULL/DR 00:00:32 10.10.1.21 Ethernet0/0 R9#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 21 subnets, 2 masks O 10.10.1.0/30 [110/20] via 10.10.1.21, 00:43:27, Ethernet0/0 [110/20] via 10.10.1.5, 00:18:28, Ethernet1/0 C 10.10.1.4/30 is directly connected, Ethernet1/0 L 10.10.1.6/32 is directly connected, Ethernet1/0 O 10.10.1.8/30 [110/30] via 10.10.1.42, 00:13:17, Ethernet0/3 [110/30] via 10.10.1.38, 00:26:20, Ethernet0/2 O 10.10.1.12/30 [110/20] via 10.10.1.42, 00:28:59, Ethernet0/3 O 10.10.1.16/30 [110/20] via 10.10.1.25, 00:43:17, Ethernet0/1 [110/20] via 10.10.1.21, 00:43:27, Ethernet0/0 C 10.10.1.20/30 is directly connected, Ethernet0/0 L 10.10.1.22/32 is directly connected, Ethernet0/0 C 10.10.1.24/30 is directly connected, Ethernet0/1 L 10.10.1.26/32 is directly connected, Ethernet0/1 O 10.10.1.28/30 [110/20] via 10.10.1.42, 00:29:09, Ethernet0/3 [110/20] via 10.10.1.25, 00:43:17, Ethernet0/1 O 10.10.1.32/30 [110/20] via 10.10.1.38, 00:36:26, Ethernet0/2 [110/20] via 10.10.1.25, 00:43:17, Ethernet0/1 C 10.10.1.36/30 is directly connected, Ethernet0/2 L 10.10.1.37/32 is directly connected, Ethernet0/2 C 10.10.1.40/30 is directly connected, Ethernet0/3 L 10.10.1.41/32 is directly connected, Ethernet0/3 O 10.10.1.44/30 [110/20] via 10.10.1.42, 00:29:29, Ethernet0/3 O 10.10.1.48/30 [110/20] via 10.10.1.42, 00:28:59, Ethernet0/3 [110/20] via 10.10.1.38, 00:36:16, Ethernet0/2 O 10.10.1.52/30 [110/20] via 10.10.1.38, 00:37:24, Ethernet0/2 O 10.10.2.1/32 [110/20] via 10.10.1.5, 00:18:38, Ethernet1/0 O 10.10.3.1/32 [110/30] via 10.10.1.42, 00:13:17, Ethernet0/3 R9#   R10라우터 설정값  ! interface Ethernet0/0 ip address 10.10.1.42 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.45 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.30 255.255.255.252 ! interface Ethernet0/3 ip address 10.10.1.49 255.255.255.252 ! interface Ethernet1/0 ip address 10.10.1.14 255.255.255.252 ! interface Ethernet1/1 no ip address shutdown ! interface Ethernet1/2 no ip address shutdown ! interface Ethernet1/3 no ip address shutdown ! router ospf 1 log-adjacency-changes network 10.10.1.12 0.0.0.3 area 0 network 10.10.1.28 0.0.0.3 area 0 network 10.10.1.40 0.0.0.3 area 0 network 10.10.1.44 0.0.0.3 area 0 network 10.10.1.48 0.0.0.3 area 0 ! R10#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et1/0 1 0 10.10.1.14/30 10 DR 1/1 Et0/3 1 0 10.10.1.49/30 10 BDR 1/1 Et0/2 1 0 10.10.1.30/30 10 BDR 1/1 Et0/1 1 0 10.10.1.45/30 10 DR 1/1 Et0/0 1 0 10.10.1.42/30 10 BDR 1/1 R10#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.3.1 1 FULL/BDR 00:00:35 10.10.1.13 Ethernet1/0 10.10.1.53 1 FULL/DR 00:00:33 10.10.1.50 Ethernet0/3 10.10.1.33 1 FULL/DR 00:00:38 10.10.1.29 Ethernet0/2 10.10.1.54 1 FULL/BDR 00:00:35 10.10.1.46 Ethernet0/1 10.10.1.41 1 FULL/DR 00:00:32 10.10.1.41 Ethernet0/0 R10#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 21 subnets, 2 masks O 10.10.1.0/30 [110/30] via 10.10.1.41, 00:21:51, Ethernet0/0 [110/30] via 10.10.1.29, 00:32:26, Ethernet0/2 O 10.10.1.4/30 [110/20] via 10.10.1.41, 00:32:46, Ethernet0/0 O 10.10.1.8/30 [110/20] via 10.10.1.46, 00:29:52, Ethernet0/1 [110/20] via 10.10.1.13, 00:16:20, Ethernet1/0 C 10.10.1.12/30 is directly connected, Ethernet1/0 L 10.10.1.14/32 is directly connected, Ethernet1/0 O 10.10.1.16/30 [110/20] via 10.10.1.29, 00:32:26, Ethernet0/2 O 10.10.1.20/30 [110/20] via 10.10.1.41, 00:32:46, Ethernet0/0 O 10.10.1.24/30 [110/20] via 10.10.1.41, 00:32:46, Ethernet0/0 [110/20] via 10.10.1.29, 00:32:26, Ethernet0/2 C 10.10.1.28/30 is directly connected, Ethernet0/2 L 10.10.1.30/32 is directly connected, Ethernet0/2 O 10.10.1.32/30 [110/20] via 10.10.1.50, 00:32:16, Ethernet0/3 [110/20] via 10.10.1.29, 00:32:26, Ethernet0/2 O 10.10.1.36/30 [110/20] via 10.10.1.50, 00:32:16, Ethernet0/3 [110/20] via 10.10.1.41, 00:32:46, Ethernet0/0 C 10.10.1.40/30 is directly connected, Ethernet0/0 L 10.10.1.42/32 is directly connected, Ethernet0/0 C 10.10.1.44/30 is directly connected, Ethernet0/1 L 10.10.1.45/32 is directly connected, Ethernet0/1 C 10.10.1.48/30 is directly connected, Ethernet0/3 L 10.10.1.49/32 is directly connected, Ethernet0/3 O 10.10.1.52/30 [110/20] via 10.10.1.50, 00:32:16, Ethernet0/3 [110/20] via 10.10.1.46, 00:29:42, Ethernet0/1 O 10.10.2.1/32 [110/30] via 10.10.1.41, 00:21:51, Ethernet0/0 O 10.10.3.1/32 [110/20] via 10.10.1.13, 00:16:30, Ethernet1/0 R10#   R11라우터 설정값  ! interface Ethernet0/0 ip address 10.10.1.38 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.53 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.34 255.255.255.252 ! interface Ethernet0/3 ip address 10.10.1.50 255.255.255.252 ! router ospf 1 log-adjacency-changes network 10.10.1.32 0.0.0.3 area 0 network 10.10.1.36 0.0.0.3 area 0 network 10.10.1.48 0.0.0.3 area 0 network 10.10.1.52 0.0.0.3 area 0 ! R11#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et0/3 1 0 10.10.1.50/30 10 DR 1/1 Et0/2 1 0 10.10.1.34/30 10 BDR 1/1 Et0/1 1 0 10.10.1.53/30 10 DR 1/1 Et0/0 1 0 10.10.1.38/30 10 BDR 1/1 R11#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.1.49 1 FULL/BDR 00:00:35 10.10.1.49 Ethernet0/3 10.10.1.33 1 FULL/DR 00:00:34 10.10.1.33 Ethernet0/2 10.10.1.54 1 FULL/BDR 00:00:38 10.10.1.54 Ethernet0/1 10.10.1.41 1 FULL/DR 00:00:33 10.10.1.37 Ethernet0/0 R11#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 20 subnets, 2 masks O 10.10.1.0/30 [110/30] via 10.10.1.37, 00:20:49, Ethernet0/0 [110/30] via 10.10.1.33, 00:38:38, Ethernet0/2 O 10.10.1.4/30 [110/20] via 10.10.1.37, 00:39:40, Ethernet0/0 O 10.10.1.8/30 [110/20] via 10.10.1.54, 00:28:41, Ethernet0/1 O 10.10.1.12/30 [110/20] via 10.10.1.49, 00:31:11, Ethernet0/3 O 10.10.1.16/30 [110/20] via 10.10.1.33, 00:38:38, Ethernet0/2 O 10.10.1.20/30 [110/20] via 10.10.1.37, 00:39:40, Ethernet0/0 O 10.10.1.24/30 [110/20] via 10.10.1.37, 00:39:40, Ethernet0/0 [110/20] via 10.10.1.33, 00:38:38, Ethernet0/2 O 10.10.1.28/30 [110/20] via 10.10.1.49, 00:31:11, Ethernet0/3 [110/20] via 10.10.1.33, 00:38:38, Ethernet0/2 C 10.10.1.32/30 is directly connected, Ethernet0/2 L 10.10.1.34/32 is directly connected, Ethernet0/2 C 10.10.1.36/30 is directly connected, Ethernet0/0 L 10.10.1.38/32 is directly connected, Ethernet0/0 O 10.10.1.40/30 [110/20] via 10.10.1.49, 00:31:11, Ethernet0/3 [110/20] via 10.10.1.37, 00:39:40, Ethernet0/0 O 10.10.1.44/30 [110/20] via 10.10.1.54, 00:28:41, Ethernet0/1 [110/20] via 10.10.1.49, 00:31:11, Ethernet0/3 C 10.10.1.48/30 is directly connected, Ethernet0/3 L 10.10.1.50/32 is directly connected, Ethernet0/3 C 10.10.1.52/30 is directly connected, Ethernet0/1 L 10.10.1.53/32 is directly connected, Ethernet0/1 O 10.10.2.1/32 [110/30] via 10.10.1.37, 00:20:49, Ethernet0/0 O 10.10.3.1/32 [110/30] via 10.10.1.54, 00:15:19, Ethernet0/1 [110/30] via 10.10.1.49, 00:15:29, Ethernet0/3 R11#   R12라우터 설정값  ! interface Ethernet0/0 ip address 10.10.1.10 255.255.255.252 ! interface Ethernet0/1 ip address 10.10.1.46 255.255.255.252 ! interface Ethernet0/2 ip address 10.10.1.54 255.255.255.252 ! interface Ethernet0/3 no ip address shutdown ! router ospf 1 log-adjacency-changes network 10.10.1.8 0.0.0.3 area 0 network 10.10.1.44 0.0.0.3 area 0 network 10.10.1.52 0.0.0.3 area 0 ! R12#show ip ospf interface brief Interface PID Area IP Address/Mask Cost State Nbrs F/C Et0/2 1 0 10.10.1.54/30 10 BDR 1/1 Et0/1 1 0 10.10.1.46/30 10 BDR 1/1 Et0/0 1 0 10.10.1.10/30 10 DR 1/1 R12#show ip ospf neighbor Neighbor ID Pri State Dead Time Address Interface 10.10.1.53 1 FULL/DR 00:00:34 10.10.1.53 Ethernet0/2 10.10.1.49 1 FULL/DR 00:00:37 10.10.1.45 Ethernet0/1 10.10.3.1 1 FULL/BDR 00:00:39 10.10.1.9 Ethernet0/0 R12#show ip route Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2 ia - IS-IS inter area, * - candidate default, U - per-user static route o - ODR, P - periodic downloaded static route, + - replicated route Gateway of last resort is not set 10.0.0.0/8 is variably subnetted, 19 subnets, 2 masks O 10.10.1.0/30 [110/40] via 10.10.1.53, 00:22:47, Ethernet0/2 [110/40] via 10.10.1.45, 00:22:47, Ethernet0/1 O 10.10.1.4/30 [110/30] via 10.10.1.53, 00:30:35, Ethernet0/2 [110/30] via 10.10.1.45, 00:30:45, Ethernet0/1 C 10.10.1.8/30 is directly connected, Ethernet0/0 L 10.10.1.10/32 is directly connected, Ethernet0/0 O 10.10.1.12/30 [110/20] via 10.10.1.45, 00:30:45, Ethernet0/1 [110/20] via 10.10.1.9, 00:17:16, Ethernet0/0 O 10.10.1.16/30 [110/30] via 10.10.1.53, 00:30:35, Ethernet0/2 [110/30] via 10.10.1.45, 00:30:45, Ethernet0/1 O 10.10.1.20/30 [110/30] via 10.10.1.53, 00:30:35, Ethernet0/2 [110/30] via 10.10.1.45, 00:30:45, Ethernet0/1 O 10.10.1.24/30 [110/30] via 10.10.1.53, 00:30:35, Ethernet0/2 [110/30] via 10.10.1.45, 00:30:45, Ethernet0/1 O 10.10.1.28/30 [110/20] via 10.10.1.45, 00:30:45, Ethernet0/1 O 10.10.1.32/30 [110/20] via 10.10.1.53, 00:30:35, Ethernet0/2 O 10.10.1.36/30 [110/20] via 10.10.1.53, 00:30:35, Ethernet0/2 O 10.10.1.40/30 [110/20] via 10.10.1.45, 00:30:45, Ethernet0/1 C 10.10.1.44/30 is directly connected, Ethernet0/1 L 10.10.1.46/32 is directly connected, Ethernet0/1 O 10.10.1.48/30 [110/20] via 10.10.1.53, 00:30:35, Ethernet0/2 [110/20] via 10.10.1.45, 00:30:45, Ethernet0/1 C 10.10.1.52/30 is directly connected, Ethernet0/2 L 10.10.1.54/32 is directly connected, Ethernet0/2 O 10.10.2.1/32 [110/40] via 10.10.1.53, 00:22:47, Ethernet0/2 [110/40] via 10.10.1.45, 00:22:47, Ethernet0/1 O 10.10.3.1/32 [110/20] via 10.10.1.9, 00:17:16, Ethernet0/0 R12#   VyOS2장비 설정값  vyos@vyos:~$ show configuration commands set interfaces bridge 'br241' set interfaces bridge 'br242' set interfaces ethernet eth0 address '10.10.1.1/30' set interfaces ethernet eth0 hw-id '50:00:00:02:00:00' set interfaces ethernet eth1 bridge-group bridge 'br241' set interfaces ethernet eth1 hw-id '50:00:00:02:00:01' set interfaces ethernet eth2 bridge-group bridge 'br242' set interfaces ethernet eth2 hw-id '50:00:00:02:00:02' set interfaces ethernet eth3 address '10.10.1.5/30' set interfaces ethernet eth3 hw-id '50:00:00:02:00:03' set interfaces loopback lo address '10.10.2.1/30' set interfaces vxlan vxlan241 bridge-group bridge 'br241' set interfaces vxlan vxlan241 remote '10.10.3.1' set interfaces vxlan vxlan241 vni '241' set interfaces vxlan vxlan242 bridge-group bridge 'br242' set interfaces vxlan vxlan242 remote '10.10.3.1' set interfaces vxlan vxlan242 vni '242' set protocols ospf area 0 network '10.10.1.0/30' set protocols ospf area 0 network '10.10.1.4/30' set protocols ospf area 0 network '10.10.2.0/30' set system config-management commit-revisions '20' set system console device ttyS0 speed '9600' set system host-name 'VyOS1' set system login user vyos authentication encrypted-password '$1$K.GcN.UA$YmhyqIi7OmGozZR96WnNt/' set system login user vyos authentication plaintext-password '' set system login user vyos level 'admin' set system ntp server '0.pool.ntp.org' set system ntp server '1.pool.ntp.org' set system ntp server '2.pool.ntp.org' set system package repository community components 'main' set system package repository community distribution 'helium' set system package repository community url 'http://packages.vyos.net/vyos' set system syslog global facility all level 'notice' set system syslog global facility protocols level 'debug' vyos@vyos:~$ show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - ISIS, B - BGP, \u0026gt; - selected route, * - FIB route O 10.10.1.0/30 [110/10] is directly connected, eth0, 00:23:47 C\u0026gt;* 10.10.1.0/30 is directly connected, eth0 O 10.10.1.4/30 [110/10] is directly connected, eth3, 00:23:57 C\u0026gt;* 10.10.1.4/30 is directly connected, eth3 O\u0026gt;* 10.10.1.8/30 [110/40] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.12/30 [110/30] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.16/30 [110/20] via 10.10.1.2, eth0, 00:23:47 O\u0026gt;* 10.10.1.20/30 [110/20] via 10.10.1.2, eth0, 00:23:47 * via 10.10.1.6, eth3, 00:23:47 O\u0026gt;* 10.10.1.24/30 [110/20] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.28/30 [110/30] via 10.10.1.2, eth0, 00:23:47 * via 10.10.1.6, eth3, 00:23:47 O\u0026gt;* 10.10.1.32/30 [110/30] via 10.10.1.2, eth0, 00:23:47 * via 10.10.1.6, eth3, 00:23:47 O\u0026gt;* 10.10.1.36/30 [110/20] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.40/30 [110/20] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.44/30 [110/30] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.48/30 [110/30] via 10.10.1.6, eth3, 00:23:52 O\u0026gt;* 10.10.1.52/30 [110/30] via 10.10.1.6, eth3, 00:23:52 C\u0026gt;* 10.10.2.0/30 is directly connected, lo O\u0026gt;* 10.10.3.1/32 [110/40] via 10.10.1.6, eth3, 00:18:32 C\u0026gt;* 127.0.0.0/8 is directly connected, lo   VyOS3장비 설정값  vyos@vyos:~$ show configuration commands set interfaces bridge 'br241' set interfaces bridge 'br242' set interfaces ethernet eth0 address '10.10.1.9/30' set interfaces ethernet eth0 hw-id '50:00:00:03:00:00' set interfaces ethernet eth1 bridge-group bridge 'br241' set interfaces ethernet eth1 hw-id '50:00:00:03:00:01' set interfaces ethernet eth2 bridge-group bridge 'br242' set interfaces ethernet eth2 hw-id '50:00:00:03:00:02' set interfaces ethernet eth3 address '10.10.1.13/30' set interfaces ethernet eth3 hw-id '50:00:00:03:00:03' set interfaces loopback lo address '10.10.3.1/30' set interfaces vxlan vxlan241 bridge-group bridge 'br241' set interfaces vxlan vxlan241 remote '10.10.2.1' set interfaces vxlan vxlan241 vni '241' set interfaces vxlan vxlan242 bridge-group bridge 'br242' set interfaces vxlan vxlan242 remote '10.10.2.1' set interfaces vxlan vxlan242 vni '242' set protocols ospf area 0 network '10.10.1.12/30' set protocols ospf area 0 network '10.10.1.8/30' set protocols ospf area 0 network '10.10.3.0/30' set system config-management commit-revisions '20' set system console device ttyS0 speed '9600' set system host-name 'VyOS2' set system login user vyos authentication encrypted-password '$1$K.GcN.UA$YmhyqIi7OmGozZR96WnNt/' set system login user vyos authentication plaintext-password '' set system login user vyos level 'admin' set system ntp server '0.pool.ntp.org' set system ntp server '1.pool.ntp.org' set system ntp server '2.pool.ntp.org' set system package repository community components 'main' set system package repository community distribution 'helium' set system package repository community url 'http://packages.vyos.net/vyos' set system syslog global facility all level 'notice' set system syslog global facility protocols level 'debug' vyos@vyos:~$ show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - ISIS, B - BGP, \u0026gt; - selected route, * - FIB route O\u0026gt;* 10.10.1.0/30 [110/40] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.4/30 [110/30] via 10.10.1.14, eth3, 00:21:01 O 10.10.1.8/30 [110/10] is directly connected, eth0, 00:20:59 C\u0026gt;* 10.10.1.8/30 is directly connected, eth0 O 10.10.1.12/30 [110/10] is directly connected, eth3, 00:21:05 C\u0026gt;* 10.10.1.12/30 is directly connected, eth3 O\u0026gt;* 10.10.1.16/30 [110/30] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.20/30 [110/30] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.24/30 [110/30] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.28/30 [110/20] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.32/30 [110/30] via 10.10.1.14, eth3, 00:20:59 * via 10.10.1.10, eth0, 00:20:59 O\u0026gt;* 10.10.1.36/30 [110/30] via 10.10.1.14, eth3, 00:20:59 * via 10.10.1.10, eth0, 00:20:59 O\u0026gt;* 10.10.1.40/30 [110/20] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.44/30 [110/20] via 10.10.1.14, eth3, 00:20:59 * via 10.10.1.10, eth0, 00:20:59 O\u0026gt;* 10.10.1.48/30 [110/20] via 10.10.1.14, eth3, 00:21:01 O\u0026gt;* 10.10.1.52/30 [110/20] via 10.10.1.10, eth0, 00:20:59 O\u0026gt;* 10.10.2.1/32 [110/40] via 10.10.1.14, eth3, 00:21:01 C\u0026gt;* 10.10.3.0/30 is directly connected, lo C\u0026gt;* 127.0.0.0/8 is directly connected, lo vyos@vyos:~$   위와같이 장비를 설정하고 각각의 VyOS장비에서 상대방의 Loopback주소로 traceroute를 수행해보면 가장 cost가 짧은 VyOS2 - R9 - R10 - VyOS3경로로를 사용하여 통신하는 것을 확인할 수 있습니다.   Docker시스템에서 계속적으로 ping을 수행하면서 VyOS3장비에서 eth3를 disable해서 인터페이스 장애가 발생한것처럼 만들었읍니다. 통신은 끊김이 없고, 라우팅 경로가 VyOS2 - R9 - R10 - R12 - VyOS3로 변경된것을 볼 수 있습니다.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.80-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-2/",
	"title": "2.80 VxLAN개념익히기-2",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190401-102502.zip\n\n[LAB의 목적] 본 LAB에서는 VxLAN을 사용하기 위해서는 반드시 Multicast를 사용해야 하는가? 에 대한 해답을 찾기위한 LAB입니다. \n[LAB수행조건] 2.79 VxLAN개념익히기-1의 LAB은 잘 풀어보셨나요??\n혹시 Multicast를 사용해서 풀었나요? 그렇다면 아래와 같이 직접연결되었던 VyOS라우터를 L2스위치에 연결해서 통신이 가능한지 시험을 한번 해볼까요? L2스위치는 아무 설정도 없이 기본상태로 두어도 통신이 되어야합니다. 왜냐하면 기본 L2스위치는 IGMP snooping이 기본으로 enable되어있기때문에 multicast패킷을 넘겨야 하거든요.  이 시험의 목적은 VxLAN을 사용하기 위해서는 반드시 Multicast를 사용해야하는가?에 대한 답을 찾고자 하는것입니다. 단순히 L2스위치를 통과시켰지만 무수히 많이 거치는 ISP의 L3장비들 모두가 multicast를 무사히 잘 넘겨줄것인가 하는 의구심이 듭니다. \n통신을 성공하셨나요?? 그렇다면 위의 환경에서 172.16.241.0/24대역과 172.16.242.0/24대역이 서로 통신할 수 있도록 구성해보세요. \n[LAB 구성후기] 2.79 VxLAN개념익히기-1 LAB을 설정할때 vxlan설정부분에서 multicast group주소를 사용한것을 보았습니다. 그런데, 왜 사용하는지 첫번째 LAB에서 이해를 하지 못했고, 두 지점간에 무수히 많이 거치는 ISP L3라우터에서 multicast를 넘겨준다는 보장이 없는데, 왜 multicast를 사용하는지 의구심이 들었읍니다. 그래서, 본 LAB에서는 간단히 두 지점간에 L2스위치만 넣어서 통신이 되는지 확인을 해보는 LAB을 꾸몄습니다. \n실질적인 네트워크상에서 L2스위치는 IGMP Snooping기능이 기본으로 설정되기때문에 multicast를 자동으로 넘겨주고 더군다나 동일한 네트워크이기 때문에 아무런 문제가 없이 통신이 될것이라고 생각하고 LAB을 꾸몄습니다. 하지만, 결론적으로 통신이 되지 않았습니다. 설정한 VyOS장비의 설정값은 아래와 같습니다. \n VyOS1설정값  VyOS2설정값  위와같이 설정된 상태에서 Docker4(172.16.241.10)에서 Docker6(172.16.241.11)으로 ping을 수행하고 L2스위치의 e0/0인터페이스와 e0/1인터페이스에서 패킷을 잡아봤습니다. e0/0에서는 멀티캐스트그룹으로 패킷을 보내는것이 보이지만 e0/1인터페이스에서는 전혀 멀티캐스트 패킷이 보이지 않습니다. L2스위치가 멀티캐스트를 처리하지 못하는것이고 두 지점간의 Docker서버간의 통신이 안되는 상황이 발생합니다. \n L2스위치의 e0/0인터페이스에서 패킷수집  L2스위치의 e0/1인터페이스에서 패킷수집  L2스위치 한대만 추가했는데도 통신의 문제가 발생하기 때문에 외부로 연결되는 두지점간의 VxLAN통신에는 멀티캐스트가 아닌 유니캐스트로 통신할 방법을 사용하는것이 타당한것 같읍니다. 그래야, 여러개 거치는 L3장비의 멀티캐스트 설정여부를 신경쓰지 않을테니깐요. 그래서, VyOS장비에서 기존 VxLAN설정을 지우고 remote명령으로 상대방 peer address를 지정하는 방식으로 아래와 같이 다시 설정을 하였읍니다.\n VyOS1 재설정\n  vyos@VyOS1:~$ config [edit] vyos@VyOS1# delete interfaces vxlan [edit] vyos@VyOS1# commit [ interfaces vxlan vxlan241 bridge-group ] Removing interface vxlan241 from bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Removing interface vxlan242 from bridge br242 [edit] vyos@VyOS1# set interfaces vxlan vxlan241 bridge-group bridge 'br241' [edit] vyos@VyOS1# set interfaces vxlan vxlan241 remote 10.1.2.11 [edit] vyos@VyOS1# set interfaces vxlan vxlan241 link 'eth0' [edit] vyos@VyOS1# set interfaces vxlan vxlan241 vni '241' [edit] vyos@VyOS1# set interfaces vxlan vxlan242 bridge-group bridge 'br242' [edit] vyos@VyOS1# set interfaces vxlan vxlan242 remote 10.1.2.11 [edit] vyos@VyOS1# set interfaces vxlan vxlan242 link 'eth0' [edit] vyos@VyOS1# set interfaces vxlan vxlan242 vni '242' [edit] vyos@VyOS1# commit [ interfaces vxlan vxlan241 bridge-group ] Adding interface vxlan241 to bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Adding interface vxlan242 to bridge br242 [edit] vyos@VyOS1# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS1# exit exit vyos@VyOS1:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000010001 no eth1 vxlan241 br242 0000.2a00d70bfe9c no eth2 vxlan242 vyos@VyOS1:~$ show config commands set interfaces bridge 'br241' set interfaces bridge 'br242' set interfaces ethernet eth0 address '10.1.2.10/24' set interfaces ethernet eth0 hw-id '50:00:00:01:00:00' set interfaces ethernet eth1 bridge-group bridge 'br241' set interfaces ethernet eth1 hw-id '50:00:00:01:00:01' set interfaces ethernet eth2 bridge-group bridge 'br242' set interfaces ethernet eth2 hw-id '50:00:00:01:00:02' set interfaces ethernet eth3 hw-id '50:00:00:01:00:03' set interfaces loopback 'lo' set interfaces vxlan vxlan241 bridge-group bridge 'br241' set interfaces vxlan vxlan241 link 'eth0' set interfaces vxlan vxlan241 remote '10.1.2.11' set interfaces vxlan vxlan241 vni '241' set interfaces vxlan vxlan242 bridge-group bridge 'br242' set interfaces vxlan vxlan242 link 'eth0' set interfaces vxlan vxlan242 remote '10.1.2.11' set interfaces vxlan vxlan242 vni '242' set system config-management commit-revisions '20' set system console device ttyS0 speed '9600' set system host-name 'VyOS1' set system login user vyos authentication encrypted-password '$1$K.GcN.UA$YmhyqIi7OmGozZR96WnNt/' set system login user vyos authentication plaintext-password '' set system login user vyos level 'admin' set system ntp server '0.pool.ntp.org' set system ntp server '1.pool.ntp.org' set system ntp server '2.pool.ntp.org' set system package repository community components 'main' set system package repository community distribution 'helium' set system package repository community url 'http://packages.vyos.net/vyos' set system syslog global facility all level 'notice' set system syslog global facility protocols level 'debug' vyos@VyOS1:~$   VyOS2 재설정  vyos@VyOS2:~$ config [edit] vyos@VyOS2# delete interfaces vxlan [edit] vyos@VyOS2# commit [ interfaces vxlan vxlan241 bridge-group ] Removing interface vxlan241 from bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Removing interface vxlan242 from bridge br242 [edit] vyos@VyOS2# set interfaces vxlan vxlan241 bridge-group bridge 'br241' [edit] vyos@VyOS2# set interfaces vxlan vxlan241 remote 10.1.2.10 [edit] vyos@VyOS2# set interfaces vxlan vxlan241 link 'eth0' [edit] vyos@VyOS2# set interfaces vxlan vxlan241 vni '241' [edit] vyos@VyOS2# set interfaces vxlan vxlan242 bridge-group bridge 'br242' [edit] vyos@VyOS2# set interfaces vxlan vxlan242 remote 10.1.2.10 [edit] vyos@VyOS2# set interfaces vxlan vxlan242 link 'eth0' [edit] vyos@VyOS2# set interfaces vxlan vxlan242 vni '242' [edit] vyos@VyOS2# commit [ interfaces vxlan vxlan241 bridge-group ] Adding interface vxlan241 to bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Adding interface vxlan242 to bridge br242 [edit] vyos@VyOS2# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS2# exit exit vyos@VyOS2:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000020001 no eth1 vxlan241 br242 0000.500000020002 no eth2 vxlan242 vyos@VyOS2:~$ show config commands set interfaces bridge 'br241' set interfaces bridge 'br242' set interfaces ethernet eth0 address '10.1.2.11/24' set interfaces ethernet eth0 hw-id '50:00:00:02:00:00' set interfaces ethernet eth1 bridge-group bridge 'br241' set interfaces ethernet eth1 hw-id '50:00:00:02:00:01' set interfaces ethernet eth2 bridge-group bridge 'br242' set interfaces ethernet eth2 hw-id '50:00:00:02:00:02' set interfaces ethernet eth3 hw-id '50:00:00:02:00:03' set interfaces loopback 'lo' set interfaces vxlan vxlan241 bridge-group bridge 'br241' set interfaces vxlan vxlan241 link 'eth0' set interfaces vxlan vxlan241 remote '10.1.2.10' set interfaces vxlan vxlan241 vni '241' set interfaces vxlan vxlan242 bridge-group bridge 'br242' set interfaces vxlan vxlan242 link 'eth0' set interfaces vxlan vxlan242 remote '10.1.2.10' set interfaces vxlan vxlan242 vni '242' set system config-management commit-revisions '20' set system console device ttyS0 speed '9600' set system host-name 'VyOS2' set system login user vyos authentication encrypted-password '$1$K.GcN.UA$YmhyqIi7OmGozZR96WnNt/' set system login user vyos authentication plaintext-password '' set system login user vyos level 'admin' set system ntp server '0.pool.ntp.org' set system ntp server '1.pool.ntp.org' set system ntp server '2.pool.ntp.org' set system package repository community components 'main' set system package repository community distribution 'helium' set system package repository community url 'http://packages.vyos.net/vyos' set system syslog global facility all level 'notice' set system syslog global facility protocols level 'debug' vyos@VyOS2:~$   위와같이 설정한 상태에서 다시한번 Docker4(172.16.241.10)에서 Docker6(172.16.241.11)으로 ping을 수행하고 L2스위치의 e0/0인터페이스와 e0/1인터페이스에서 패킷을 잡아봤습니다. 양쪽 인터페이스 모두에서 지정한 peer주소로 UDP패킷이 발생하는 것이 보이고, Docker서버간에 정상적으로 통신되는것을 확인했습니다. \n L2스위치의 e0/0인터페이스에서 패킷수집  L2스위치의 e0/1인터페이스에서 패킷수집   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.79-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-1/",
	"title": "2.79 VxLAN개념익히기-1",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190306-100108.zip\n\n[LAB의 목적] 2대의 VyOS라우터를 바로 연결해서 VxLAN기본통신에 대한 개념이해를 위한 LAB입니다. \n[개념도] 아래의 그림은 물리적인 포트와 bridge-group, VxLAN인터페이스의 관계를 이해하기 위해서 그린 개념도입니다. \n[LAB수행조건]  172.16.241.0/24대역에 정의된 Docker 4,6끼리 정상통신이 되어야 함 172.16.242.0/24대역에 정의된 Docker 5,7끼리 정상통신이 되어야 함 게이트웨이가 없기때문에 서로다른 네트워크간에는 통신이 안됨 VyOS라우터의 eth0인터페이스에서 패킷을 잡아보면 Encapsulation된 데이터만 보여야함 (내부적으로 실제 통신하는 172.16.241이나 172.16.242대역이 안보임)   [LAB구성후기] SDN에 대한 자료를 수집하면서 그 근간이 되는 VxLAN에 대한 개념이해가 가장 먼저인것을 알고서, VxLAN에 대한 개념이해를 위한 LAB을 시작했읍니다. 처음 이론을 접하면서, 뭐지? 그냥 VLAN에서 사용하는 tagging을 더 많은 갯수로 사용하기 위해서 확장한거야??로 시작했지만 그것은 아니더군요.\n아무것도 모르고 예제를 찾아서 처음 구성한 LAB 지리적으로 떨어져 있는 서버들을 같은 네트워크로 묶을 수 있다!! 다중 VLAN을 지원하는 Trunk를 구성해야 하는 것인가?? LAB상에서는 VyOS2와 VyOS3가 바로 연결되어 있으니깐 설정이 가능하겠지만, 그 사이에 무수히 많은 ISP의 L3장비들이 놓인다고 가정하면 Trunk은 안되는데\u0026hellip; 어떻게 구성한다는 것인가?\nLAB을 시작하기 전에 용어에 대한 이해가 필요한데, 언더레이네트워크(Under-Layer Network)와 오버레이네트워크(Over-Layer Network)입니다. 레이어(Layer)라는 용어들을 한번이라도 들어보지 않으셨나요?? 저는 간단하게 그림편집할때 김프(gimp)를 사용하는데요, 김프나 포토샵같은 그림편집툴에서 이용하는 레이어를 생각하면서 이해하면 좋을것 같습니다. 그림편집툴의 레이어처럼 두개의 층이 나뉘어 진것입니다. 언더레이네트워크는 네트워크 장비들간 기본적인 통신을 수행할 수 있도록 구성한 물리적인 네트워크 구성이라고 보면 됩니다. 일반적으로 지금 구성해서 사용하는 네트워크들이 언더레이어네트워크라고 보면 될것같습니다. 이러한 물리적인 네트워크환경위에 새로운 층(레이어)을 생성하여 서브넷을 구성하기 위하여 설정하는 VLAN이나 접근제한 정책등등 이러한 논리적인 설정들이 존재하는것이 오버레이네트워크입니다. \n본 LAB에서 VyOS2와 VyOS3 두대만 직접적으로 연결된것이 언더레이를 구성하지만 그 사이에 무수히 많은 L3장비들을 통과할 수 있다는 가정을 해보면됩니다. 이 구간을 통과할때는 오버레이에서 사용하는 IP들은 전혀 보이지않고 오로지 VyOS2와 VyOS3장비가 사용하는 IP주소만 사용하여 패킷을 주고받게 됩니다. 이와같은 언더레이네트워크 위에 오버레이네트워크 층을 만들어서 241대역과 242대역으로 구성되는 서브넷을 구성해서 지리적으로 떨어져있는 서버들을 동일한 네트워크 대역으로 구성하는 것입니다.  Docker4서버에서 Docker6서버로 통신을 하고자 한다면 Docker4에서 발생한 패킷을 VyOS2가 VxLAN패킷으로 캡슐화를 하여 상대방으로 지정한 VyOS3(10.1.2.11)로 보냅니다. 이때 언더레이를 통과하기때문에 오로지 VyOS2와 VyOS3 IP만 보입니다. 패킷을 받은 VyOS3장비는 VxLAN패킷을 풀어서 Docker6서버에게 보내게 됩니다. 이와같이 오버레이에서 발생하는 패킷을 캡술화하고 해독하고 하는 역할을 VyOS장비가 담당하도록 구성할것데 이러한 역할을 수행하는 장비들을 VTEP(VxLAN Tunnel EndPoint)장비라고 부른다고 합니다. \n한가지씩 설정을 진행해볼까요!!\n Docker시스템 IP설정하기\n EVE-NG LAB에서 도커시스템을 구동하기전에 STARTUP-CONFIGS에서 사용할 IP Address와 default Gateway를 지정한 후에 시스템을 구동해야 합니다. 이것이 정상적으로 지정되지 않으면 구동이 안됩니다. LAB할때마다 이 명령어가 기억이 안나서 검색을 다시 하곤 하는데요, 우분투의 ip명령을 사용하여 설정합니다. 또한, Docker이미지는 도커 구성LAB시간에 생성한 Ubuntu-Client이미지를 사용해서 기본 명령어들을 사용할 수 있도록 하세요. 중요한 것은 도커 시스템의 default gateway를 지정하는 명령은 ip route add default via 게이트웨이 주소 를 사용해서 설정해야하는데 본 LAB은 동일 네트워크끼리만 통신을 시험하는 것이기때문에 default gateway를 설정하지 않는다는 것입니다.    Docker3: ip address add 172.16.241.10/24 dev eth0 Docker4: ip address add 172.16.242.10/24 dev eth0 Docker5: ip address add 172.16.241.11/24 dev eth0 Docker6: ip address add 172.16.242.11/24 dev eth0  Docker시스템의 IP설정을 완료했다면 모든 시스템을 Start!!! 정상적으로 시스템이 구동되면 Docker시스템들을 먼저 로그인해서 ip가 정상적으로 설정되었는지 먼저 확인하세요.\nroot@Docker6:/# ifconfig eth0 Link encap:Ethernet HWaddr 50:00:00:06:00:00 inet addr:172.16.242.11 Bcast:0.0.0.0 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:10 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:788 (788.0 B) TX bytes:0 (0.0 B) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)  VyOS1의 eth0인터페이스 설정\n VyOS의 기본암호는 vyos/vyos입니다. 로그인해서 시스템의 이름과 eth0의 ip address를 설정하고 commit으로 적용합니다. IP주소만 설정하고 default gateway를 설정하지 않았기 때문에 자신의 라우팅 테이블에 있는 네트워크만 통신이 가능합니다.  Welcome to VyOS - vyos ttyS0 vyos login: vyos Password: Last login: Sat Mar 30 13:09:25 UTC 2019 on ttyS0 Linux vyos 3.13.11-1-amd64-vyos #1 SMP Sat Nov 11 12:10:30 CET 2017 x86_64 Welcome to VyOS. This system is open-source software. The exact distribution terms for each module comprising the full system are described in the individual files in /usr/share/doc/*/copyright. vyos@vyos:~$ config [edit] vyos@vyos# set system host-name VyOS1 [edit] vyos@vyos# set interfaces ethernet eth0 address 10.1.2.10/24 [edit] vyos@vyos# commit [edit] vyos@vyos#  VyOS2의 eth0인터페이스 설정\n VyOS의 기본암호는 vyos/vyos입니다. 로그인해서 시스템의 이름과 eth0의 ip address를 설정하고 commit으로 적용합니다. IP주소만 설정하고 default gateway를 설정하지 않았기 때문에 자신의 라우팅 테이블에 있는 네트워크만 통신이 가능합니다.  Welcome to VyOS - vyos ttyS0 vyos login: vyos Password: Last login: Sat Mar 30 13:13:55 UTC 2019 on ttyS0 Linux vyos 3.13.11-1-amd64-vyos #1 SMP Sat Nov 11 12:10:30 CET 2017 x86_64 Welcome to VyOS. This system is open-source software. The exact distribution terms for each module comprising the full system are described in the individual files in /usr/share/doc/*/copyright. vyos@vyos:~$ config [edit] vyos@vyos# set system host-name VyOS2 [edit] vyos@vyos# set interfaces ethernet eth0 address 10.1.2.11/24 [edit] vyos@vyos# commit [edit] vyos@vyos#  VyOS1과 VyOS2간의 통신확인하기\n save로 설정한 값을 저장하고 exit로 나와서 VyOS1과 VyOS2간의 통신이 이루어지는지를 확인합니다.  vyos@VyOS1# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS1# exit exit vyos@vyos:~$ ping 10.1.2.11 PING 10.1.2.11 (10.1.2.11) 56(84) bytes of data. 64 bytes from 10.1.2.11: icmp_req=1 ttl=64 time=0.718 ms 64 bytes from 10.1.2.11: icmp_req=2 ttl=64 time=1.29 ms 64 bytes from 10.1.2.11: icmp_req=3 ttl=64 time=0.532 ms ^C --- 10.1.2.11 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2004ms rtt min/avg/max/mdev = 0.532/0.846/1.290/0.324 ms --------------------------------------------------------------- vyos@VyOS2# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS2# exit exit vyos@vyos:~$ vyos@vyos:~$ ping 10.1.2.10 PING 10.1.2.10 (10.1.2.10) 56(84) bytes of data. 64 bytes from 10.1.2.10: icmp_req=1 ttl=64 time=1.74 ms 64 bytes from 10.1.2.10: icmp_req=2 ttl=64 time=1.12 ms 64 bytes from 10.1.2.10: icmp_req=3 ttl=64 time=0.549 ms ^C --- 10.1.2.10 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 0.549/1.140/1.748/0.490 ms  VyOS에서 Bridge네트워크 정의하기\n VyOS는 VLAN을 지원하지 않습니다. 따라서, Bridge그룹 만들고 물리적인 포트나 가상의 네트워크들을 동일한 Bridge그룹에 소속하게 함으로써 VLAN으로 설정하는 역할을 대신하게 합니다. 각각의 VyOS에서 2개의 Bridge그룹(br241, br242)을 생성하고 Docker시스템이 연결된 각각의 물리적인 포트(eth1, eth2)와 가상의 VxLAN을 각각의 Bridge그룹으로 묶을것입니다. 이것은 위의 개념도 그림을 설정하는 부분입니다. 브리지그룹을 생성하고 물리적인 eth1, eth2포트를 생성한 브리지그룹에 소속시킵니다.  vyos@VyOS1# set interfaces bridge br241 [edit] vyos@VyOS1# set interfaces bridge br242 [edit] vyos@VyOS1# set interfaces ethernet eth1 bridge-group bridge br241 [edit] vyos@VyOS1# set interfaces ethernet eth2 bridge-group bridge br242 [edit] vyos@VyOS1# commit [ interfaces ethernet eth1 bridge-group ] Adding interface eth1 to bridge br241 [ interfaces ethernet eth2 bridge-group ] Adding interface eth2 to bridge br242 [edit] vyos@VyOS1# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS1# exit exit vyos@vyos:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000010001 no eth1 br242 0000.500000010002 no eth2 --------------------------------------------------------------- vyos@VyOS2# set interfaces bridge br241 [edit] vyos@VyOS2# set interfaces bridge br242 [edit] vyos@VyOS2# set interfaces ethernet eth1 bridge-group bridge br241 [edit] vyos@VyOS2# set interfaces ethernet eth2 bridge-group bridge br242 [edit] vyos@VyOS2# commit [ interfaces ethernet eth1 bridge-group ] Adding interface eth1 to bridge br241 [ interfaces ethernet eth2 bridge-group ] Adding interface eth2 to bridge br242 [edit] vyos@VyOS2# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS2# exit exit vyos@vyos:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000020001 no eth1 br242 0000.500000020002 no eth2  VxLAN설정하기\n VxLAN을 설정할때는 태킹을 위하여 사용하는 VNI number, 언더레이네트워크로 진입하기 위한 인터페이스를 지정하는 link명령어, 모르는 IP에 대해서 통신을 할 노드를 지정하는 group명령어, 소속될 브리지그룹 을 정의합니다. 처음 접한 문서에서 group으로 멀티캐스트 주소를 사용했는데 자신이 모르는 노드의 정보를 쿼리할때 지정된 멀티캐스트로 패킷을 보내면 동일한 멀티캐스트에 속한 장비가 패킷을 잡아서 캡슐화를 해제하는 방식입니다. 2번째 LAB에서 의문을 제기하지만 반드시 멀티캐스트를 사용해야하는가?? 하는 의문을 가진상태에서 그대로 설정해서 시험을 진행했습니다.  vyos@VyOS1# set interfaces vxlan vxlan241 vni 241 [edit] vyos@VyOS1# set interfaces vxlan vxlan241 link eth0 [edit] vyos@VyOS1# set interfaces vxlan vxlan241 group 239.0.0.241 [edit] vyos@VyOS1# set interfaces vxlan vxlan241 bridge-group bridge br241 [edit] vyos@VyOS1# set interfaces vxlan vxlan242 vni 242 [edit] vyos@VyOS1# set interfaces vxlan vxlan242 link eth0 [edit] vyos@VyOS1# set interfaces vxlan vxlan242 group 239.0.0.242 [edit] vyos@VyOS1# set interfaces vxlan vxlan242 bridge-group bridge br242 [edit] vyos@VyOS1# commit [ interfaces vxlan vxlan241 bridge-group ] Adding interface vxlan241 to bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Adding interface vxlan242 to bridge br242 [edit] vyos@VyOS1# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS1# exit exit vyos@vyos:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000010001 no eth1 vxlan241 br242 0000.3ec2ab203c0c no eth2 vxlan242 ------------------------------------------------------------------- vyos@VyOS2# set interfaces vxlan vxlan241 vni 241 [edit] vyos@VyOS2# set interfaces vxlan vxlan241 link eth0 [edit] vyos@VyOS2# set interfaces vxlan vxlan241 group 239.0.0.241 [edit] vyos@VyOS2# set interfaces vxlan vxlan241 bridge-group bridge br241 [edit] vyos@VyOS2# set interfaces vxlan vxlan242 vni 242 [edit] vyos@VyOS2# set interfaces vxlan vxlan242 link eth0 [edit] vyos@VyOS2# set interfaces vxlan vxlan242 group 239.0.0.242 [edit] vyos@VyOS2# set interfaces vxlan vxlan242 bridge-group bridge br242 [edit] vyos@VyOS2# commit [ interfaces vxlan vxlan241 bridge-group ] Adding interface vxlan241 to bridge br241 [ interfaces vxlan vxlan242 bridge-group ] Adding interface vxlan242 to bridge br242 [edit] vyos@VyOS2# save Saving configuration to '/config/config.boot'... Done [edit] vyos@VyOS2# exit exit vyos@vyos:~$ show bridge bridge name bridge id STP enabled interfaces br241 0000.500000020001 no eth1 vxlan241 br242 0000.423333c96f14 no eth2 vxlan242  VyOS시스템의 라우팅 테이블 확인하기\n 언더레이네트워크를 담당하는 VyOS시스템의 라우팅테이블을 확인해보면 아래의 그림처럼 나옵니다. VyOS는 172.16.241이나 172.16.242네트워크를 전혀 모르는 상태입니다. 하지만, 내부인터페이스에서 VxLAN패킷으로 캡슐화가 되어서 넘어가기 때문에 오로지 언더레이 네트워크인 10.1.2.0/24네트워크만 사용하여 통신을 하게 됩니다.   Docker시스템 통신확인하기\n 각각의 Docker시스템에서 원격지에 있는 동일한 네트워크의 다른 Docker시스템으로 ping을 했을때 아래와 같이 정상적으로 통신됨을 확인할 수 있습니다.   VyOS의 eth0인터페이스에서 패킷 캡처\n Docker시스템들끼리 통신을 하는동안 VyOS시스템의 eth0인터페이스에서 패킷을 캡처해보면 아래 그림과 같이 두대의 VyOS간에 VxLAN터널포트인 8472/UDP의 캡슐화 데이터만 보이는것을 확인할 수 있습니다.   VyOS의 내부인터페이스에서 패킷 캡처\n Docker시스템들끼리 통신을 하는동안 VyOS시스템의 Docker시스템이 연결된 내부인터페이스에서 패킷을 캡처해보면 실질적인 서버의 IP주소들이 보이는것을 확인할 수 있습니다.    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.78-vyos%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%82%AC%EC%9A%A9%EB%B2%95/",
	"title": "2.78 VyOS라우터 사용법",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 본 LAB은 앞으로 진행할 VxLAN에 대한 개념잡기에서 VyOS장비를 사용할 예정이므로 이 장비에 대한 사용법을 익히기 위하여 만든 LAB입니다. 구성도의 환경을 설정하면서 VyOS를 자유롭게 다룰 수 있도록 요구하는 조건말고도 여러가지 설정들을 해보면서 VyOS에 대하여 익숙해지기 바랍니다. \n[LAB수행조건]  VyOS 1.1.8이미지 등록하기  기존에 우리는 VyOS 1.1.7버전을 EVE-NG에 올린적이 있습니다. 1.1.7버전도 VxLAN기능을 지원하는데 최근 버전이 1.1.8버전을 사용할 예정입니다. HowTo add VyOS Vytta 문서를 참고하여 1.1.8이미지를 설치 다운로드할 이미지는 vyos-1.1.8-amd64.iso VyOS에 대한 설정문서는 Welcome to VyOS\u0026rsquo;s documentation! \u0026ndash; VyOS 1.2.0-beta documentation를 참고해서 설정했습니다.  모든 Docker시스템(Docker2,3,4,5)는 OpenSSH서버가 동작하도록 구성할것 모든 VyOS장비(VyOS1,2,3)는 ssh(22/tcp)로 연결가능하도록 구성할것 Docker2,3이 연결된 VyOS1장비의 포트2개를 브리지로 구성하여 동일 네트워크가 되도록 구성할것 VyOS2와 VyOS3간의 이중링크는 802.3ad Bonding으로 구성할것 VyOS3에 있는 10.30.10.0/24 내부네트워크는 다른곳에서 보이지 않아야하며 10.30.10.0/24대역에서 다른 네트워크로 통신할때는 외부인터페이스인 192.168.110.2주소로 NAT변환되도록 구성할것 192.168.11.0.2 10022/TCP로 ssh연결하면 Docker5로 ssh연결되도록 NAT구성할것  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.77-mf2%EC%9D%98-%EC%9D%B4%EC%A4%91%ED%99%94%ED%9A%8C%EC%84%A0%EA%B5%AC%EC%84%B1/",
	"title": "2.77 MF2의 이중화회선구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190308-035942.zip \n[LAB의 목적] 본 LAB은 MF2방화벽으로 본점과 지점이 IPSec VPN통신을 사용중인데, 회선을 두개 사용중인 Weno_MF2지점방화벽에서 eth1을 주회선으로 IPSec통신을 하다가 회선에 장애가 발생하면 자동으로 eth0 보조회선으로 통신하도록 구성하는 LAB입니다. \n[LAB수행조건]  구성도에 따라서 장비를 설정 본점장비(Center_MF2)와 지점장비(Weno_MF2, Jeju_MF2)간에 IPSec VPN Site-to-Site설정구성 정상적인 통신상태 확인하기 Weno_MF2지점방화벽에서 패킷을 캡처해서 eth1으로 ESP패킷을 주고받는지 확인하기 Weno_MF2지점방화벽에서 eth1인터페이스를 down시키고 IPSec VPN통신이 정상적으로 eth0인터페이스를 통해서 통신되는지 확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.76-mf2%EC%9D%98-nat-ipsec/",
	"title": "2.76 MF2의 NAT-IPSec",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190227-091015.zip \n[LAB의 목적] 본 LAB은 MF2의 NAT설정과 IPSec VPN설정관계를 이해하기 위한 것으로, 출발지 IP를 보이지않도록 하기 위하여 출발지 IP를 NAT로 변환한후에 IPSec VPN터널을 사용하도록 설정하는 LAB입니다. \n[LAB수행조건]  PC1(10.10.10.1)에서 ping 200.200.200.1을 수행하면 출발지 IP가 100.100.100.1로 변경되어서 IPSEC터널을 통과하여 20.20.20.1과 통신이 되어야 함 PC2(20.20.20.1)에서 ping 100.100.100.1을 수행하면 출발지 IP가 200.200.200.1로 변경되어서 IPSEC터널을 통과하여 10.10.10.1과 통신이 되어야 함 위의 구성을 성공하였다면 각각의 MF2방화벽에서 default게이트웨이를 제거하고 필요한 네트워크만 라우팅을 설정하여 동일하게 통신이 되도록 구성해보세요.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.75-mf2%EC%9D%98-802.1q-trunk/",
	"title": "2.75 MF2의 802.1Q Trunk",
	"tags": [],
	"description": "",
	"content": " [변경전 구성도] LAB구성파일: Exports_unetlab_export-20181213-092218.zip \n[변경후 구성도] \n[LAB의 목적] 본 LAB은 MF2방화벽과 시스코 스위치로 구성된 단일 VLAN환경을 다중 VLAN을 사용할 수 있도록 802.1Q Trunk네트워크로 재설정하는 LAB입니다. 단, 모든 작업을 원격지에서 수행한다는 조건을 붙입니다. 따라서, 네트워크 변경후에 모든 장비들이 정상적으로 연결되어야하므로 네트워크 설정시에 재연결에 대한 고려를 충분히 생각해야 합니다.\n[LAB수행조건]  변경전 구성도에 맞추어서 네트워크를 구성하고 모든 장비들이 정상적으로 통신되도록 구성하기 정상적인 통신환경을 확인후에 아래의 조건을 수행하면서 네트워크를 변경하기 VPC5를 VLAN109로 분리 VLAN109, VLAN110에 대한 L3인터페이스를 MF2방화벽에 생성 모든 작업은 원격지에서 설정하기 때문에 콘솔 연결말고 ssh로 연결해서 설정하기   Cisco reload명령어를 이용한 자동 재실행  원격지에 있는 스위치 장비를 설정하던 중에 장비설정이 잘못되어 ssh 또는 telnet연결이 안되는 경우를 대비하여 정해진 시간에 재부팅하여 장비설정이 원래대로 되돌라 가도록 하는 방법. 장비를 설정하면서 write로 저장하면 절대 안됨.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.74-mf2%EC%9D%98-ipsec-vpn/",
	"title": "2.74 MF2의 IPSec VPN",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 본 LAB은 MF2의 라우트모드와 브리지모드를 이해하고, 라우트모드로 동작하는 방화벽과 브리지모드로 동작하는 방화벽간에 IPSec VPN을 구성하여 Site-to-Site VPN구성을 수행하는 LAB입니다. \n[LAB수행조건] LAB을 구성하기전에는 서로 다른 모드간에 당연히 IPSec VPN 터널 구성이 안될것이라고 생각했지만 LAB을 구성하고 시험을 진행해보니 정상적으로 구성이 되었습니다. MF2방화벽에서 두개의 인터페이스를 브리지로 구성하고 br0를 설정할때 해당 인터페이스가 L3모드여서 가능한 것 같습니다. 그냥 L2관리용도면 안될것 같은데 무조건 L3인터페이스로 활성화 됩니다.\n  MF2-9117방화벽은 라우트모드로 설정 MF2-4869방화벽은 브리지모드로 설정 R2, R5라우터에는 default route를 설정하지마시고 필요한 네트워크만 설정해주세요. 이것은 ISP에서 VPN을 경유하는 하단 네트워크에 대한 라우팅이 없다는 것을 구성하기 위한 것입니다.  R2라우터: 10.233.1.0/24에 대한 라우팅만 설정 R5라우터: 2.2.2.0/24d에 대한 라우팅만 설정  MF2-9117이 VPN센터로 설정 2.2.2.2/24와 10.233.1.10/24간에 IPSec VPN터널을 맺어서 129.254.11.0/24대역과 10.233.1.0/24대역이 통신이 가능해야 함 MF2방화벽의 eth0를 Manage Net에 연결한것은 방화벽 설정용도로만 사용하는 것입니다.  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.73-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/",
	"title": "2.73 라즈베리파이 qemu이미지",
	"tags": [],
	"description": "",
	"content": "라즈베리파이 데스크톱 OS가 나와서 LAB상에서 사용할 수 있도록 qemu이미지를 생성하여 공유합니다. 불필요한 패키지를 제거했고, 한글언어설정하고 SSH가 연결 가능하도록 설정한 이미지 입니다. 계정은 pi / 12345 로 설정했읍니다.\n 가상화 이미지 받기 압축해제하기 업로드한 파일을 아래의 그림처럼 압축해제하여 권한을 수정해줍니다.  LAB상에서 사용하기 LAB에 등록하여 구동하면 아래와 같이 라즈베리파이 데스크톱 OS를 사용할 수 있습니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.72-lubuntu-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/",
	"title": "2.72 Lubuntu qemu이미지",
	"tags": [],
	"description": "",
	"content": "LAB상에서 브라우저를 사용할 필요가 있어서 조금 가벼운 Lubuntu 17.10으로 qemu이미지를 생성하고 Firefox브라우저에 Adobe Flash player를 설치하여 이미지를 만들었습니다.\n Lubuntu 가상화 이미지받기\n 디렉토리 생성하기\n  # cd /opt/unetlab/addons/qemu/ # mkdir linux-lubuntu-17.10.1 # cd linux-lubuntu-17.10.1   압축해제하기 업로드한 파일을 생성한 디렉토리로 이동해서 업축해제하고 md5값 체크후에 이상없으면 zip파일 삭제  # unzip Lubuntu-hda.zip Archive: Lubuntu-hda.zip inflating: hda.qcow2 # md5sum hda.qcow2 d001c8cac8c46bcd28ddebcd2eacf642 hda.qcow2 # rm Lubuntu-hda.zip   장비등록 Lab상에 장비등록하여 사용하면 아래와 같이 Firefox브라우저 구동해서 MF2장비 연결이 가능합니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.71-mf2-ios-ipsec%ED%84%B0%EB%84%90/",
	"title": "2.71 MF2-IOS IPSec터널",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports_unetlab_export-20190323-105009.zip\n[LAB의 목적] 본 LAB은 SECUI MF2방화벽과 Cisco IOS라우터간에 IPSec VPN Site-to-Site터널을 구성하는 LAB입니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.70-mf2-ha%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.70 MF2 HA구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 SECUI MF2방화벽장비에 대한 HA이중화시험을 위한 LAB입니다.\n [HA구성화면]  [가상IP구성화면]   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.69-secui-mf2%EB%B0%A9%ED%99%94%EB%B2%BD/",
	"title": "2.69 SECUI MF2방화벽",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 SECUI MF2방화벽장비를 가상화 장비로 만들어서 LAB상에서 이용할 수 있도록 시험한 LAB입니다. 장비이미지를 만들면서 dd명령으로 이미지를 덤프하여 qcow2가상화 이미지로 변환하여 올리는 작업에 대한 이해가 필요합니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.68-%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8B%A8%EC%9D%BCvlan/",
	"title": "2.68 라우터를 통한 단일VLAN",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] L3라우터로 연결된 2개의 스위치에 설정된 VLAN이 라우터를 통해서 통신이 가능하도록 하는 시험을 위하여 구성한 LAB입니다. ISP망에서 L2스위치 트렁크를 지원해주는 경우에 지점에 설치된 라우터를 통해서 본사의 백본스위치에 설정된 VLAN과 통신을 하고자 하는 목적입니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.67-hsrp-%EB%B0%8F-stp%ED%99%98%EA%B2%BD%EC%8B%9C%ED%97%98/",
	"title": "2.67 HSRP 및 STP환경시험",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 서버팜에 추가적인 타벤더 스위치를 연결하면서 Spanning Tree이슈가 발생해서 STP시험을 해보고자 LAB을 구성합니다. 아래와 같이 vIOS L2이미지로 구성을 만들고 HSRP와 STP시험을 할 수 있읍니다. 기본 통신만 되도록 구성하고 STP의 priority, path cost값등을 변경해서 첨부문서의 내용과 비교해서 어떤 포트가 Block되는지 많은 시험을 해보세요. STP(Spanning-Tree Protocol)에 대한 많은 이해를 가졌으면 합니다.\n  Attachments   1-Switch1의기본정보.txt  (5 ko)   2-Switch2의기본정보.txt  (5 ko)   3-Switch3의기본정보.txt  (4 ko)   4-Switch4의기본정보.txt  (4 ko)   5-Switch5의기본정보.txt  (4 ko)   6-Switch6의기본정보.txt  (4 ko)   stp.pdf  (431 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.66-cisco-iosxrv%EC%9D%B4%EB%AF%B8%EC%A7%80/",
	"title": "2.66 Cisco IOSXrv이미지",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 본 LAB은 Cisco IOSXrv이미지를 추가하여 LAB상에서 스위치를 사용할 수 있도록 준비하는 LAB입니다.\n[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법\n 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 867M drwxr-xr-x 2 sghan sghan 4.0K Jan 4 09:22 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 867M Jan 4 09:24 iosxrv-k9-demo-6.0.1.qcow2   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 xrv-로 시작되어야 함.  root@eve-ng:/opt/unetlab/addons/qemu# mkdir xrv-k9-demo-6.0.1 root@eve-ng:/opt/unetlab/addons/qemu# root@eve-ng:/opt/unetlab/addons/qemu# cd xrv-k9-demo-6.0.1/ root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1#   다운로드한 이미지를 생성한 폴더로 이름을 변경해서 옮기고 소유자 변경  root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# mv ~sghan/temp/iosxrv-k9-demo-6.0.1.qcow2 hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# ls -alh total 867M drwxr-xr-x 2 root root 4.0K Jan 4 09:27 . drwxr-xr-x 16 root root 4.0K Jan 4 09:27 .. -rw-rw-r-- 1 sghan sghan 867M Jan 4 09:24 hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# chown root.root * root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# ls -alh total 867M drwxr-xr-x 2 root root 4.0K Jan 4 09:27 . drwxr-xr-x 16 root root 4.0K Jan 4 09:27 .. -rw-rw-r-- 1 root root 867M Jan 4 09:24 hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1#   eve-ng퍼미션 수정스크립트 실행  root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions root@eve-ng:/opt/unetlab/addons/qemu/xrv-k9-demo-6.0.1#  LAB상에서 IOSXrv장비 추가하기  구동된 IOSXvr장비 콘솔연결 화면   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.65-cisco-vios-l2%EC%9D%B4%EB%AF%B8%EC%A7%80/",
	"title": "2.65 Cisco vIOS L2이미지",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 본 LAB은 Cisco vIOS L2이미지를 추가하여 LAB상애서 L2스위치를 사용할 수 있도록 준비하는 LAB입니다.\n[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법\n 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 93M drwxr-xr-x 2 sghan sghan 4.0K Jan 3 10:53 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 93M Jan 3 10:48 vios_l2-adventerprisek9-m.vmdk.SSA.152-4.0.55.E   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 viosl2-로 시작되어야 함.  root@eve-ng:/opt/unetlab/addons/qemu# mkdir viosl2-152-4.0.55.E root@eve-ng:/opt/unetlab/addons/qemu# cd viosl2-152-4.0.55.E/ root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E#   다운로드한 이미지는 VMware가상화이미지(vmdk)파일이기 때문에 이파일을 qemu이미지(qcow2)로 변환함.  root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E# /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 /home/sghan/temp/vios_l2-adventerprisek9-m.vmdk.SSA.152-4.0.55.E hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E# root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E# ls -alh total 93M drwxr-xr-x 2 root root 4.0K Jan 3 11:21 . drwxr-xr-x 15 root root 4.0K Jan 3 11:17 .. -rw-r--r-- 1 root root 93M Jan 3 11:21 hda.qcow2   eve-ng퍼미션 수정 스크립트 실행  root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions root@eve-ng:/opt/unetlab/addons/qemu/viosl2-152-4.0.55.E#  LAB상에서 vIOS L2장비 추가하기  구동된 vIOS L2장비 콘솔연결 화면   vIOS L2 15.2이미지를 테스트하는 과정에서 config설정 후에 장비를 reload하면 interface에 설정된 vlan값들이 초기화되는 에러가 있었습니다. 15.0버전을 사용하는것이 안정적일것입니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.64-cisco-vios-l3%EC%9D%B4%EB%AF%B8%EC%A7%80/",
	"title": "2.64 Cisco vIOS L3이미지",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 본 LAB은 Cisco vIOS L3이미지를 추가하여 LAB상애서 L3라우터를 사용할 수 있도록 준비하는 LAB입니다.\n[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법\n 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 215M drwxr-xr-x 2 sghan sghan 4.0K Jan 3 10:48 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 123M Jan 3 10:49 vios-adventerprisek9-m.vmdk.SPA.156-2.T   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 vios-로 시작되어야 함.  root@eve-ng:/opt/unetlab/addons/qemu# mkdir vios-156-2.T root@eve-ng:/opt/unetlab/addons/qemu# cd vios-156-2.T/ root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T#   다운로드한 이미지는 VMware가상화이미지(vmdk)파일이기 때문에 이파일을 qemu이미지(qcow2)로 변환함.  root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T# /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 /home/sghan/temp/vios-adventerprisek9-m.vmdk.SPA.156-2.T hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T# root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T# ls -alh total 245M drwxr-xr-x 2 root root 4.0K Jan 3 11:00 . drwxr-xr-x 14 root root 4.0K Jan 3 10:55 .. -rw-r--r-- 1 root root 123M Jan 3 11:00 hda.qcow2   eve-ng퍼미션 수정스크립트 실행  root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions root@eve-ng:/opt/unetlab/addons/qemu/vios-156-2.T#  LAB상에 vIOS L3장비 추가하기  구동된 vIOS L3장비 콘솔연결 화면   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.63-cisco-nxos%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80/",
	"title": "2.63 Cisco NXOS이미지추가",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] Cisco Nexus시리즈에서 사용하는 NXOS를 다루어 보기위한 LAB입니다. 최근에 나온 Cisco NXOS9k이미지는 2CPU에 8G메모리를 필요로 하기때문에 LAB상에서 운영은 어려울것 같읍니다. 버전 7대를 이용하여 NXOS를 이해해보기로 합니다.\n[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법\n NXOS에 대한 가상화 디렉토리 생성하기. NSOX v9이전의 버전들은 디렉토리명을 titanium-으로 만들어야 함 root@eve-ng:/opt/unetlab/addons/qemu# mkdir titanium-7.3.0.D1.1 생성한 디렉토리로 이동하여 서버에 업로드한 이미지를 해당 디렉토리로 이동함. 파일을 이동할때 이미지의 이름을 변경. qcow2앞에 hda나 virtio로 주는것은 디스크의 종류를 나타내는 이름임. hda.qcow2라고 주면 IDE방식의 하드디스크를 의미하는것임.  root@eve-ng:/opt/unetlab/addons/qemu# cd titanium-7.3.0.D1.1/ root@eve-ng:/opt/unetlab/addons/qemu/titanium-7.3.0.D1.1# mv ~sghan/temp/titanium-final.7.3.0.D1.1.qcow2 hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/titanium-7.3.0.D1.1# ls -alh total 205M drwxr-xr-x 2 root root 4.0K Jan 3 10:24 . drwxr-xr-x 13 root root 4.0K Jan 3 10:23 .. -rw-rw-r-- 1 sghan sghan 205M Jan 3 10:21 hda.qcow2   이동한 이미지파일에 대한 소유자를 변경.  root@eve-ng:/opt/unetlab/addons/qemu/titanium-7.3.0.D1.1# chown root.root hda.qcow2 root@eve-ng:/opt/unetlab/addons/qemu/titanium-7.3.0.D1.1# ls -al total 209356 drwxr-xr-x 2 root root 4096 Jan 3 10:24 . drwxr-xr-x 13 root root 4096 Jan 3 10:23 .. -rw-rw-r-- 1 root root 214368256 Jan 3 10:21 hda.qcow2   추가한 이미지파일에 대한 퍼미션을 정리하면 완료됨.  root@eve-ng:/opt/unetlab/addons/qemu# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions root@eve-ng:/opt/unetlab/addons/qemu#  LAB상에 NXOS장비추가하고 구동하기.  구동된 장비의 콘솔연결화면(기본암호는 admin/admin)   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.62-asav%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/",
	"title": "2.62 ASAv이미지추가하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] LAB상에서 Cisco ASAv장비를 사용하기 위하여 이미지를 준비하는 LAB입니다.\n[LAB 수행조건]  Cisco ASAv 9.5.2이미지 받기 이미지가 qemu가상화 이미지로 제공되기때문에 이미지를 마운트해서 텍스트콘솔로 출력되도록 수정하고 바로 사용하는 방법입니다.  LAB상에서 ASAv장비 추가하고 관리콘솔 연결화면   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.61-%ED%8C%94%EB%A1%9C%EC%95%8C%ED%86%A0%EB%B0%A9%ED%99%94%EB%B2%BD-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/",
	"title": "2.61 팔로알토방화벽 이해하기",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 요즘 대세인 차세대 팔로알토방화벽을 이해하기 위한 LAB입니다. 팔로알토방화벽은 라이선스가 들어가야하는데 LAB이므로 라이선스를 구하지 못함. 라이선스 입력하지 않은 상태에서 초기 200개 세션에 대해서 시험을 해볼 수 있다고 합니다. 구성도의 LAB을 구성하고 보안정책과 NAT기능을 설정해서 시험하는것을 진행하면서 방화벽의 기능을 이해해보면 될것 같읍니다.\n[LAB 수행조건]  팔로알토방화벽 OVA이미지를 받아서 EVE-NG에 이미미 넣어주기. 첨부파일 HowTo add Palo Alto.pdf문서에서 첫번째 ova파일로 이미지 넣는 방법을 사용하면 됩니다. 관리포트 설정하고 WebUI연결하기 설정을 WebUI를 통해서 설정해야하므로 관리포트를 자신의 VMWare사설인터페이스에 WebUI연결하기 첨부문서 Initial_Configuration-4.1.pdf를 참고하여 초기설정을 진행하기 기본설정후에 방화벽정책설정과 NAT기능을 설정해서 내부네트워크와 외부로 통신이 되도록 구성해보세요. [로그인창] default암호는 admin/admin입니다.  [대시보드]  [인터페이스 상태]  [방화벽 정책]  [NAT정책]   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.60-wccp%EC%99%80squid%EC%BA%90%EC%8B%9C%EC%84%9C%EB%B2%84/",
	"title": "2.60 WCCP와 SQUID캐시서버",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 wccp프로토콜을 사용하여 사용자의 http, https연결을 캐시서버로 보내서 캐시를 참조하도록 만들어보는 LAB입니다. squid서버를 구성하여 캐시서버 기능을 수행하도록 하였고, Cisco IOS라우터에서 wccp프로토콜을 설정하는 방법에 대한 이해가 필요합니다.\n[LAB 수행조건]  wccp프로토콜을 사용하면 사용자의 http, https연결을 캐시서버로 보내서 캐시를 참조하도록 만들수 있는 기능입니다. 프록시서버를 사용하면 되는데 굳이 wccp를 왜 사용하는지 의문을 가졌는데 시험을 하는 동안 이유를 알게 되었습니다. 그냥 프록시서버를 구성하면 사용자의 브라우저마다 프록시설정을 해주어야하는데 클라이언트들이 거치는 라우터에 wccp를 설정하면 클라이언트의 설정 필요없이 트래픽을 가로채서 캐시서버로 보내는 기능을 해줍니다. 또한, wccp로 동작하는 여러대의 캐시서버를 연결해놓으면 로드밸런싱도 되고 장애대비도 된다고 합니다. 첨부문서는 시험한 내용을 간략하게 정리한 문서입니다.    Attachments   1130_WCCP-SQUID-http-https.pdf  (174 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.59-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-2/",
	"title": "2.59 GRE터널 구성하기-2",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 Cisco IOS라우터와 리눅스간에 GRE터널을 구성해보는 LAB입니다.\n[LAB 수행조건]  Linux머신의 인터페이스 구성입니다. 파일을 수정하지마시고 수동으로 IP를 입력하는 방식으로 테스트를 진행해보세요.  Linux머신의 라우팅테이블입니다. 리눅스에서 두개 인터페이스간에 라우팅을 하기 위해서는 ip_forward값 조정이 필요합니다.  GRE터널을 구성하기 위해서 사용했던 명령어입니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.58-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.58 GRE터널 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 본 LAB은 Cisco IOS라우터간에 GRE터널을 구성해보는 LAB입니다. 구성도에 따라서 R5와 R6라우터간에 GRE터널을 구성해보세요.\n[LAB 수행조건]  R4, R5, R6라우터에 default route를 설정하지 마시고 아래와 같이 인접한 네트워크에 대한 라우팅만 설정해주세요. GRE터널을 구성하기전에 VPC들이 속한 네트워크들은 라우팅테이블에 없기때문에 서로간에 통신이 안됩니다. 터널을 구성하고 VPC네트워크들은 터널 인터페이스를 통해서 라우팅을 잡아주면 GRE터널을 통해서 통신이 가능하도록 만드는것입니다.  터널을 통해서 VPC시스템이 서로간에 통신하는 화면입니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.57-%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9E%A5%EB%B9%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%8C%85/",
	"title": "2.57 익스트림장비 이미지 컨버팅",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports-unetlab_export-20171017-114907.zip\n[LAB의 목적] 본 LAB은 LAB에서 활용할 익스트림장비를 준비하는 LAB입니다. V22.xx버전은 통신이 안되는 문제가 발생하여 V16이미지로 구성하였습니다.\n[LAB 수행조건]  이미지 버전받기: ISO설치경로에서 GNS3를 qcow2이미지를 받으면 됩니다. 이미지 디렉토리 생성하기\nroot@eve-ng:/home/sghan/temp# cd /opt/unetlab/addons/qemu/ root@eve-ng:/opt/unetlab/addons/qemu# mkdir extremexos-16.1.1.4 root@eve-ng:/opt/unetlab/addons/qemu# cd extremexos-16.1.1.4  이미지 변환하기\nroot@eve-ng:/opt/unetlab/addons/qemu/extremexos-16.1.1.4# qemu-img convert -c -O qcow2 ~sghan/temp/EXOS-VM_v16.1.1.4-disk1.qcow2 hda.qcow2  퍼미션변경하기\nroot@eve-ng:/opt/unetlab/addons/qemu/extremexos-16.1.1.4# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.56-pbr%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0/",
	"title": "2.56 PBR설정해보기",
	"tags": [],
	"description": "",
	"content": " [구성도] [LAB의 목적] 모든 통신이 목적지(destination)에 대한 라우팅을 기반으로 이루어지는데, 때로는 출발지를 기준으로 라우팅을 수행하길 원하는 경우가 발생합니다. 그런경우에 사용하는것이 PBR(Policy Based Routing)이고, 본 LAB은 PBR기능을 시험하기 위한 LAB입니다.\n[LAB 수행조건]  VLAN 10 (10.10.10.0/24) 네트워크 대역은 VM 네트워크를 통해 통신하도록 설정 (NAT사용) VLAN 172(172.16.10.0/24) 네트워크 대역은 회사 네트워크를 통해 통신하도록 설정 (NAT사용) docker13와 docker14간에 서로 통신되도록 설정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.55-remixos%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.55 RemixOS를 사용하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] LAB에서 윈도우환경을 사용할 수 있도록 하기 위해서 찾아보다가 RemixOS(PC에서 안드로이드를 사용할 수 있도록 만든 OS)를 선택했는데 가볍지 않은것 같습니다. 일단은 PC에서 안드로이드를 테스트해볼 수 있다는 의미도 있으므로 설치한번 해보세요.\n[LAB 수행조건] EVE-NG에서 직접 가상머신을 만들려고 했지만 설치를 실패해서 아래와 같은 방법으로 구성했습니다.  1. 윈도우 VMWare에서 RemixOS를 설치하여 PC에서 RemixOS를 사용할 수 있는 환경을 구성 2. PC의 설치된 vmdk파일을 EVE-NG로 가져감 3. EVE-NG에서 vmdk파일을 qcow2파일로 변환해서 사용\n가장먼저, RemixOS를 다운받기 아래의 영상은 윈도우 VMWare에 RemixOS를 설치하는 과정입니다. RemixOS는 USB로 부팅해서 사용하는 시스템이기때문에 하드디스크에 설치하기 위해서는 Grub메뉴에서 TAB키를 누르고 나오는 메뉴의 내용을 영상처럼 수정해야합니다. (SRC전까지 삭제하고 INSTALL=1넣어주기)  \n아래의 영상은 PC에서 설치한 vmdk파일을 EVE-NG시스템으로 옮겨서 LAB에서 사용할 수 있는 시스템을 만드는 과정입니다. LAB에 RemixOS 노드를 생성할때 -usbdevice tablet를 -usbdevice mouse로 변경해주고 있는데 VNC로 연결했을때 키보드와 마우스 동작때문입니다. tablet기본값으로 하면 마우스포인터가 전혀 움직이지 않읍니다. mouse로 변경하면 키보드와 마우스가 정상동작하지만 마우스의 포인트가 맞지 않는 문제가 있네요. 이것은 좀 더 검색이 필요할듯합니다.  \n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.54-ssh%EB%A5%BC-%ED%86%B5%ED%95%B4%EC%84%9C-%ED%8C%8C%ED%8B%B0%EC%85%98%EB%A7%88%EC%9A%B4%ED%8A%B8/",
	"title": "2.54 SSH를 통해서 파티션마운트",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports-unetlab_export-20170831-115104.zip\n\n[LAB의 목적] 리눅스에서 다른 시스템의 파티션을 SSH를 통해서 마운트해서 사용하는 SSHFS를 시험하는 LAB입니다.\n[LAB 수행조건]  구성도처럼 네트워크를 구성을 완료하기 모든 도커시스템이 인터넷이 되고 SSH서버가 구동되도록 설정하기 SSH-Server6은 라우터에서 static NAT로 포트번호 20022로 연결되도록 구성 도커시스템 서로간에 ssh연결이 되는지 확인 SSH-Server4서버에 SSH-Server5,6의 /data디렉토리를 SSHFS를 통해서 마운트할것  리눅스에서 SSHFS파일시스템을 사용하려면 FUSE모듈이 지원되어야합니다. FUSE는 유닉스계열 OS에서 적재하는 커널모듈로 Filesystem in Userspace의 약자임. FUSE를 이용하면 컴퓨터에 OS와 같은 권한이 아닌 사용자가 커널을 건드리지않고 자신의 파일시스템을 만들수 있읍니다. EVE-NG에서 Docker가 만들어질때 FUSE모듈을 지원안되도록 생성되는것 같읍니다. iptables사용할때 docker실행하는 명령의 옵션을 수정했듯이 FUSE기능을 시험하기 위해서 아래와 같이 /opt/unetlab/html/includes/cli.php파일의 766라인의 $cmd로 시작하는 라인은 한줄복사하고 그 라인은 주석처리, 복사된 라인에 create다음에 \u0026ndash;privileged옵션을 넣은후에 Docker를 새로 생성해주세요. ssh를 통해서 파일시스템을 마운트하기 때문에 ssh가 암호없이 로그인되도록 시스템들을 구성하는것이 필요합니다. 첨부문서를 확인해서 ssh가 암호없이 공개키를 통해서 접근이 되도록 구성해보세요. 정상적으로 마운트가되면 아래와 같이 SSH-server4에서 마운트 목록이 보입니다. 여러사람이 동일환경에 Docker를 구동하니 MAC충돌이 발생합니다. Docker Startup config에서 아래와 같이 MAC을 지정가능합니다.    Attachments   How To Use SSHFS to Mount Remote File Systems Over SSH.pdf  (118 ko)   리눅스 SSH 패스워드 없이 자동 로그인.pdf  (279 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.53-snort-ids%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1/",
	"title": "2.53 Snort IDS환경구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports-unetlab_export-20170829-101155.zip\n\n[LAB의 목적] 본 LAB은 우분투 리눅스머신에 공개용 Snort IDS를 구축하고 도커시스템에서 스캔이나 공격등을 수행했을때 탐지되는 상황을 보기위한 LAB입니다.\n구성도 처럼 환경을 꾸며보세요. R1라우터의 NAT기능을 통해서 LAB안의 도커나 linux시스템이 인터넷 접근이 가능해야합니다. 패키지를 설치해야하기때문에요.. Snort가 설치되는 linux는 도커시스템이 아니고 지난번에 생성한 우분투 리눅스시스템으로 하고, 이더넷 카드 하나를 더 추가해야합니다. 리눅스머신이 서로 다른 2개의 네트워크에 패킷을 전달하기 위해서는 라우팅모드로 만들어야합니다 (ip_forward값설정)  첨부 pdf문서는 우분투에 snort를 설치하는 메뉴얼입니다. apt패키지로 설치하면 2.7.9버전이 설치되므로 패키지로 하지 마시고 3.0으로 소스컴파일방법으로 문서대로 설치한번 해보세요. 그래야 설치위치라던지 환경파악이 더 될듯합니다.\n  Attachments   Snort_3.0.0-a4-223_on_Ubuntu_14_and_16.pdf  (125 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.52-ostinato-%ED%8A%B8%EB%9E%98%ED%94%BD%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%82%AC%EC%9A%A9/",
	"title": "2.52 Ostinato 트래픽생성기 사용",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: Exports-unetlab_export-20170829-033356.zip\n\n[LAB의 목적] LAB상이나 실제 네트워크상에서 다양한 시험을 위해서 트래픽생성기가 필요할 경우가 있습니다.  예를들면 A에서 B로 SSH연결에 대한 트래픽을 만든다던지 등등\u0026hellip; 이렇게 사용자가 원하는 트래픽을 생성해서 시험을 할때 사용하는 Traffic Generator로 eve-ng에서 오픈소스 Ostinato를 지원합니다. Ostinato는 dron(에이전트)과 제어시스템으로 나누어집니다. LAB상에 위치하는 Ostinato는 에이전트 역할을 하는 drone들로서 제어시스템의 설정값을 받아서 실제 패킷을 생성하는 시스템입니다. 제어프로그램은 윈도우용이므로 자신의 윈도우 시스템에서 LAB에 있는 drone이 연결될 수 있도록 LAB을 구성해야합니다.\n\n Ostinato drone설치방법  제어프로그램에서 LAB상의 drone을 등록한 화면  R1라우터의 192.168.10.52에서 1.1.1.10서버로 SSH패킷을 보내도록 스트림 설정화면   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.51-asa%EC%99%80ios%EA%B0%84-l2l-vpn/",
	"title": "2.51 ASA와 IOS간 L2L VPN설정",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] Site-to-Site VPN은 가능한 다양한 장비간의 연동을 수행해보는것이 좋은것 같습니다. 본 LAB은 Cisco ASA장비와 IOS라우터간에 Site-to-Site VPN을 구성하여 연동시험하는 LAB입니다. ASA 8.4버전의 경우와 8.2버전의 IPSec VPN구성방식이 다른것 같습니다. 첨부문서를 확인하고 구성을 진행해보세요.\n  Attachments   Cisco ASA84 to PIX6x site to site VPN.pdf  (86 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.50-openvpn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-site-to-site-vp%EA%B5%AC%EC%84%B1/",
	"title": "2.50 OpenVPN으로 L2L VPN구성",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN에 대해서 신경쓰지 않고 암호화된 통신을 사용할 수 있도록 합니다. OpenVPN을 이용하여 Site-to-Site VPN을 구성하는 것이 가능합니다. LAB구성도처럼 떨어져있는 2개의 지점을 OpenVPN시스템을 통해서 Site-to-Site VPN으로 구성하여 두지점의 내부네트워크들이 VPN터널을 통해서 암호화 통신이 되도록 구성하는 LAB입니다.\n\n[LAB수행조건]  VPN터널을 통해서 두지점간의 통신이 완료되었다면 172.16.10.0/24대역의 시스템들이 모든 통신을 본점의 OpenVPN서버를 통해서 통신이 되도록 구성하려면 어떻게 할까요?  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.49-openvpn%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/",
	"title": "2.49 OpenVPN서버 구축하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] OpenVPN서버는 SSLVPN기반이기때문에 OpenVPN으로 VPN서버를 구축해보면 상용으로 판매되는 SSL VPN장비의 동작원리를 이해할 수 있습니다. \n자신의 VMWare NAT인터페이스에 연결되는 라우터와 라우터 내부에 스위치와 앞서 설치한 우분투서버, 테스트시스템 한대를 연결하는 LAB을 구성해서 LAB상의 장비에서 인터넷이 되도록 구성한 후에 아래의 링크를 참고해서 우분투서버에 OpenVPN서버를 구성해보세요.\n Setting Up An OpenVPN Server on the Raspberry Pi OpenVPN을 이용한 VPN 환경 구축  \n[LAB수행조건]  LAB상의 우분투서버에 OpenVPN서버가 구성되면 PC에 OpenVPN클라이언트 프로그램을 받아서 설치하고 클라이언트 프로그램에 배포해주는 클라이언트 구성파일 만들기 (*.ovpn) 클라이언트 프로그램에 구성파일을 import해서 LAB상의 OpenVPN서버에 연결해서 LAB상의 내부장비 연결하기 테스트가 완료되면 아래의 사항에 대한 추가적인 시험이 필요  server.conf파일에서 사용하는 server명령, push \u0026ldquo;route\u0026rdquo;명령, push \u0026ldquo;redirect-gateway def1\u0026rdquo;명령에 대한 의미파악하기 push \u0026ldquo;route\u0026rdquo; 명령으로 내부 네트워크와 VPN대역만 정의하고 iptables로 NAT를 정의하지 않았을때 tracert시험, 내부장비로 telnet 연결했을때 접근하는 IP확인 push \u0026ldquo;route\u0026rdquo;명령으로 내부네트워크와 VPN대역을 정의하고 iptables로 NAT를 정의했을때 tracert시험, 내부장비로 telnet 연결했을때 접근하는 IP확인 push \u0026ldquo;redirect-gateway def1\u0026rdquo;만 정의했을때 VPN이 연결된후에 통신이 전혀 안되는 문제가 발생하는데 원인이 무엇인지 찾아보기   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.48-%EC%9A%B0%EB%B6%84%ED%88%AC-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/",
	"title": "2.48 우분투 리눅스이미지 생성",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 이번 LAB은 다음에 이어질 OpenVPN서버를 구축하기 위해서 우분투 리눅스 이미지를 생성하는 LAB입니다. \n이제까지 Docker시스템을 많이 활용했는데 VPN서버구축과 같은 작업은 네트워크 디바이스를 접근해야하는 권한 문제등으로 Docker에서 실행하는것을 성공하지 못했읍니다. 그래서 실제적인 리눅스시스템이 필요해서 많이 사용중인 우분투 리눅스이미지를 생성하기로 했읍니다.\n\n[LAB수행조건] Docker는 메모리나 CPU점유율이 높지않기때문에 향후 진행되는 LAB들에서 Docker는 여전히 많이 사용할것입니다. 지금 설치하는 우분투리눅스는 2G메모리의 가상시스템을 실제 설치하는것이기때문에 메모리점유율이 있을수 있읍니다. Docker처럼 여러개의 노드 등록이 어려울것이라는거죠.. 암튼 우분투리눅스 이미지 하나를 만들어놓으면 Docker에서 구현하지 못하는 실습이 가능할것으로 보이니 잘 구현해보세요.\n 우선, 인터넷을 사용할 수 있는 LAB구성이 필요합니다. 자신의 VMWare NAT인터페이스와 LAB의 내부네트워크를 연결하는 라우터를 구성하고 NAT설정을해서 내부네트워크에서 인터넷이 되도록 구성하세요. 내부네트워크에 스위치를 연결해서 스위치에서 인터넷이 되는지 시험을 해놓으세요. 라우터에 내부네트워크에 대한 DHCP서버를 구성하세요. 우분투 리눅스를 설치할때 IP할당이 필요한데 수동으로 IP지정이 어려운관계로 자동할당이 되도록 라우터에 DHCP서버를 구성하세요 첨부파일 \u0026ldquo;Qemu image namings.pdf\u0026rdquo;파일을 참조해서 QEMU가상화소프트웨어로 구동되는 가상화이미지의 디렉토리 이름규칙을 이해하세요. 리눅스이미지들은 디렉토리이름이 \u0026ldquo;linux-\u0026ldquo;로 시작해야합니다. 첨부파일 \u0026ldquo;HowTo create own Linux host image.pdf\u0026rdquo;문서는 eve-ng.net사이트에 있는 HowTo문서입니다. 이문서를 참조해서 우분투리눅스를 설치합니다. 설치는 우분투서버 배포판 iso이미지를 받아서 cdrom이지미 인것처럼 이름을 바꾸어서 구동해주면 설치과정이 진행됩니다. 실제 하드웨어에 우분투서버를 설치하는 과정과 동일하게 OS설치를 진행합니다. 이때 설치하는 과정은 unetlab의 LAB 임시폴더에 이미지가 저장되게됩니다. 설치가 완료되면 임시폴더에 만들어진 이미지를 원래 폴더로 복사해서 만들어진 우분투 이미지를 사용하게 되는것입니다.    Attachments   HowTo create own Linux host image.pdf  (388 ko)   Qemu image namings.pdf  (396 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.47-portacl%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/",
	"title": "2.47 PortACL설정하기",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 서버팜스위치에 연결된 서버들간에 접근제한이 필요한 경우가 있습니다. 이런경우에 서버팜스위치에서 port ACL을 적용하여 접근제한을 수행할 수 있습니다. 구성도의 구성내역에 아래의 조건을 만족하는 ACL을 생성하여 설정해보세요.\n\n[LAB수행조건]  SSH연결이외에 다른 통신은 정상적으로 수행되어야합니다. 물리적인 스위치에서 Port ACL은 아무런 문제가 없이 잘 동작하여 LAB상에서도 이상이 없으리라고 생각했는데 근본적으로 안되는것이 맞다는 생각이 듭니다. L2스위치는 IP를 볼수 없는 장비 이기때문에 port에 ip나 tcp,udp포트번호로 ACL을 생성하여 적용하면 ACL이 동작이 안하는 것이 맞는것 같읍니다. L2스위치는 MAC레벨만 볼수있기때문에 맞는 얘기죠? 그런데 실제 L2스위치에서는 포트기반 ACL이 동작하는걸까요? 장비를 만들때 IP도 볼수 있게 만든것인지는 모르겠지만 물리적인 스위치에서 show ip interface 했을때와 LAB상의 IOL이미지에서 다르게 나옵니다.  [실제장비] GigabitEthernet0/13 is up, line protocol is up Inbound access list is not set GigabitEthernet0/14 is up, line protocol is up Inbound access list is not set [LAB상의 IOL스위치] SW#show ip interface Ethernet0/0 is up, line protocol is up Inbound access list is PORT-ACL Outgoing access list is not set Internet protocol processing disabled Ethernet0/1 is up, line protocol is up Inbound access list is PORT-ACL Outgoing access list is not set Internet protocol processing disabled  LAB상의 IOL스위치의 결과를 보면 포트에 ACL이 적용되어있는데 IP처리가 disable되어 있다고 나옵니다. 그래서 LAB상에서는 포트기반으로 ACL처리는 안되는것 같읍니다. 따라서, 위의 LAB의 3번째 조건은 배제하고 테스트 해주세요.\n"
},
{
	"uri": "http://ssanggu.github.io/ch2/2.46-cisco-iol-ipsecvpn%EA%B5%AC%EC%84%B1/",
	"title": "2.46 Cisco IOL IPSec VPN구성",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 이번 LAB은 Cisco IOS에서 IPSec VPN Remote Access서버를 구성해보는 LAB입니다. 구성도는 2.45 VyOS로 L2TP VPN서버구성의 구성도와 동일한데 VyOS부분에 Cisco IOS라우터를 넣은것입니다. 구성은 첨부한 pdf문서를 참고하여 아래의 순서대로 설정을 하면됩니다.\n\n[LAB수행조건]  VPN사용자 계정 생성 및 aaa로그인옵션 설정 ISAKMP그룹인증관련 설정과 SplitDNS관련 트래픽 정의 ESP데이터암호화를 위한 암호화 알고리즘정의 crypto map정의 인터페이스에 정의한 map설정 PC에 Cisco IPSec VPN클라이언트 프로그램 설치  L2TP over IPSec은 윈도우에서 기본으로 제공하는 기능으로 사용했고, IPSec VPN은 이렇게 별도의 클라이언트 프로그램이 설치되어 사용되어야 합니다. 다른제품의 IPSec VPN서버를 구성하더라도 해당 제품에 맞는 클라이언트가 있어야 연결할 수 있읍니다. Anyconnect클라이언트에서도 IPSec을 지원한다는 문서를 봐서 AnyConnect를 사용해서 IPSec VPN을 연결할 수 있는 LAB을 시험중입니다. 이후 LAB은 AnyCOnnect를 사용해보는 LAB이 되지 않을까하는 생각입니다.\n   Attachments   91193-rtr-ipsec-internet-connect.pdf  (141 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.45-vyos%EB%A1%9C-l2tp-vpn%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1/",
	"title": "2.45 VyOS L2TP VPN서버구성",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 이제까지 Site-to-Site VPN만 구성해봤지만 실제로 사용자별로 연결하는 Remote Access VPN기능을 많이 사용합니다. Remote Access VPN은 PPTP, L2TP, IPSec, SSLVPN등이 있는데 IPSec, SSLVPN은 차차 LAB을 진행할 것입니다. 그전에 윈도우에서 기본으로 제공해주는 L2TP over IPSec기능을 통해서 Remote Access VPN의 기본동작원리를 이해하기 위해서 이번 LAB을 만들었읍니다.\nIPSec의 설정 흐름은 기본적으로 아래 순서를 따른다고 보면 됩니다. 첨부된 pdf문서를 보면서 순서대로 따라서 설정해보세요\u0026hellip; \n[LAB수행조건]  VPN서버구성. ipsec적용 인터페이스 선택 client에 할당해주는 ip pool정의 공유키와 인증 사용자 정의     Attachments   Configure Remote Access VPN Service on a Vyatta Appliance.pdf  (2755 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.44-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-iptables%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.44 컨테이너에서 iptables사용하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 리눅스시스템의 자체 방화벽 기능을 사용하려면 iptables명령을 사용해야 합니다. 도커 컨테이너에서 iptables명령을 시험해보면 좋은데 UnetLab에서 구동하는 도커 컨테이너에서는 iptables명령을 실행할 권한이 들어가지 않읍니다. 그래서 이 권한을 수정해주는 방법을 검색해보았습니다. \nLAB은 한대의 스위치에 우분투 클라이언트 2대와 ssh서버 1대를 동일 네트워크 대역으로 연결해서 한대의 클라이언트에서만 ssh서버로 ssh연결이 가능하도록 제어하는 방법을 보여주도록 구성해봤읍니다. 아래에 첨부한 영상은 다음과 같은 순서로 진행됩니다. 영상에 설명자막을 넣었으니 영상 재생시에 자막을 on하시고 보시기 바랍니다.\n ubuntu_client이미지로부터 임시 컨테이너를 생성하여 openssh-server, iptables, sudo패키지를 설치\n 패키지를 설치한 임시 컨테이너로 commit기능로 새로운 이미지를 생성\n LAB을 구성하고 iptables동작을 확인하지만 권한이 없다고 나오는 부분 확인\n /opt/unetlab/html/includes/cli.php파일의 761라인을 아래와 같이 변경\n  [변경전] $cmd = 'docker -H=tcp://127.0.0.1:4243 create -ti --net=none --name='.$n -\u0026gt; getUuid().' -h '.$n -\u0026gt; getName().' '.$n -\u0026gt; getImage(); [변경후] $cmd = 'docker -H=tcp://127.0.0.1:4243 create --cap-add=NET_ADMIN --cap-add=NET_RAW -ti --net=none --name='.$n -\u0026gt; getUuid().' -h '.$n -\u0026gt; getName().' '.$n -\u0026gt; getImage();   LAB에 새로 ssh컨테이너를 등록하고 iptables기능을 시험   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.43-multi-lab-ipsec/",
	"title": "2.43 Multi-LAB IPSec",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 본 LAB은 UNetLab을 사용하고 있는 3명의 사용자 시스템을 연동하여 통신하도록 구성하는 LAB으로 다수의 사용자 LAB을 통신하도록 설정하면서 더욱 효율적으로 장비설정을 해볼수가 있읍니다. \n[LAB수행조건]  2.40 NAT와 IPSec터널 동시구성 LAB을 각자 해결한 2명의 사용자의 Ubuntu노트북을 통해서 구성도의 그림과 같이 연결하여 LAB을 확장하여 구성하고 통신시험을 완료하여 구성을 올려봅니다. 여러명의 사용자들의 LAB을 연결해서 시험을 해보니 더 효과적인듯 하네요. NAT담당하는 라우터와 IPSec Peer담당하는 라우터는 2.40 NAT와 IPSec터널 동시구성의 조건과 동일 POD#1과 POD#2간의 IPSec VPN터널구성하여 통신 POD#3와 POD#4간의 IPSec VPN터널구성하여 통신 POD#1과 POD#3간의 IPSec VPN터널구성하여 통신 모든 LAB상의 장비가 인터넷통신 가능  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.42-docker%EC%9D%98-commit%EA%B8%B0%EB%8A%A5/",
	"title": "2.42 Docker의 commit기능",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] Docker로 서버를 만들기 위해서 Dockerfile을 작성하고 build를 수행했는데, 이 방법이 Dockerfile작성하기도 어렵고, 잘 안만들어지더군요.. 그래서 이번에 소개하는 내용은 docker의 commit의 기능을 이용하는 방법입니다. \n우분투 시스템에서 docker를 실행하면 컨테이너가 생성되고 인터넷이 가능한 도커시스템이 만들어집니다. 이 컨테이너에서 우리가 패키지 설치하는 방법으로 패키지를 설치한 다음에 정상적으로 서비스 구동되는것을 확인하고, 이 컨테이너를 그대로 이미지를 만드는 방법입니다. 이 방법을 이용해서 apache2와 mysql서버, ssh서버가 구동되는 이미지를 작성하는 방법을 보여드릴께요..\n  현재 이미지를 확인해보면 우리가 일반적으로 사용하는 명령어들을 설치했던 ubuntu_client이미지가 있읍니다. 이 이미지를 이용해서 컨테이너를 하나 실행하는데 bash이 구동되도록 구동합니다. docker -H=tcp://localhost:4243 run -it ubuntu_client /bin/bash\n컨테이너로 들어갔고 네트워크를 보면 도커네트워크의 ip를 받은것을 확인가능합니다. 다른 ssh창에서 컨테이너가 구동된 상태를 확인해드릴게요\n자 임시로 구동한 컨테이너에 차례대로 패키지를 설치하고 구동 테스트를 진행해볼게요. 패키지를 설치하고 서비스 구동하는 스크립트는 별도로 메모해 놓으세요. 이따가 이미지 만들때 그 명령을 넣어줄거거든요.\n mysql서버 설치와 시험완료 apache2웹서버 설치와 시험완료 ssh2서버설치완료했는데 로그인을 해보려면 계정생성이 필요하죠 ssh2연결시험도 완료.  이로써, 3가지 서비스를 설치하고 시험까지 완료한 임시 컨테이너가 생성되었읍니다. commit기능은 이렇게 사용자가 필요한 구성을 한 상태 그대로를 이미지화 하는 기능입니다. 작업했던 컨테이너를 exit로 로그아웃하면 컨테이너가 중지됩니다.\n자, 이 상태에서 commit기능을 사용해서 이미지를 만들것입니다. commit에서 사용하는 옵션은\n-a : 이미지 작성자에 대한 정보 -c 'ENTRYPOINT 명령들' : 서비스를 구동하는 명령들을 나열. 명령을 나열할때 \u0026amp;\u0026amp;를 사용할건데 이것은 앞에 명령이 에러없이 실행되면 다음 명령을 실행하라는 의미 그리고, 서버 데몬을 구동했을때 docker로 접속하면 foreground로 구동되어서 콘솔이 먹통처럼 아무것도 나오지 않는 경험을 했었죠.. 그래서 맨 마지막에 항상 /bin/bash을 구동하도록해서 shell접근이 가능하도록 만들것입니다. -c 'EXPOSE 포트' : 서비스 포트들을 정의, 22 80을 왜 썼는지 아시죠?? 22는 ssh연결포트, 80은 apache2웹서버 연결포트  옵션 다음에 작업했던 컨테이너id 이미지이름을 줍니다.이미지이름을줄때는 소문자만 가능합니다.\n 만들어진 이지미로 컨테이너를 구동해봐야죠\u0026hellip;정상적으로 서비스들이 구동되는지. 오!!! 잘 구동되는군요\u0026hellip; 테스트했던 컨테이너들을 삭제하고 unetlab에서 동작하는지 확인해보겠읍니다. 잘 동작하는것 확인하셨죠?? LAB이 끝나면 컨테이너들은 삭제해주세요.. 하드디스크 공간을 확보하기 위함입니다.\ncommit으로 이미지 생성하는 방법 예시\ndocker -H=tcp://localhost:4243 commit -a \u0026quot;SangGu Han \u0026lt;sghan@hinetworks.kr\u0026gt;\u0026quot; -c 'ENTRYPOINT service ssh start \u0026amp;\u0026amp; /bin/bash' -c \u0026quot;EXPOSE 22\u0026quot; 944b563dcc9d openssh-server docker -H=tcp://localhost:4243 commit -a \u0026quot;SangGu Han \u0026lt;sghan@hinetworks.kr\u0026gt;\u0026quot; -c 'ENTRYPOINT service mysql start \u0026amp;\u0026amp; service apache2 start \u0026amp;\u0026amp; service ssh start \u0026amp;\u0026amp; /bin/bash' -c \u0026quot;EXPOSE 22 80\u0026quot; f1d0d2ccc875 apache2-mysql-ssh   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.41-puppylinux%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
	"title": "2.41 PuppyLinux이미지 설치하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] LAB에서 사용하는 클라이언트에서 테스트를 위해서 윈도우환경이 필요할때가 있습니다. 리눅스의 X-Windows를 실행하거나 윈도우가상시스템을 구동하기에는 메모리가 부족할 수 있는데 상대적으로 적은 메모리를 사용하면서 윈도우 환경을 제공할 수 있는 PuppyLinux가 있어서 아래의 절차에 따라서 이미지를 등록하는 작업을 수행하는 LAB입니다. \n[LAB수행조건]  아래 절차에 따라서 PuppyLinux이미지를 등록하기   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.40-nat%EC%99%80-ipsec%ED%84%B0%EB%84%90-%EB%8F%99%EC%8B%9C%EA%B5%AC%EC%84%B1/",
	"title": "2.40 NAT와 IPSec터널 동시구성",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 본 LAB은 Cisco IOS라우터에서 NAT와 IPSec터널을 동시에 구성하는 LAB입니다. IPSec VPN터널을 맺는 Peer가 NAT를 수행하는 장비의 안쪽에 위치했을때 VPN Peer를 어떻게 맺는지 습득하는 LAB입니다. \n[LAB수행조건]  Client1측에서 R3이후의 외부로 나갈때는 R3 e0/0인터페이스 IP로 NAT변환이 되어서 나가야 함. 확인할때는 Client1에서 R2로 telnet연결해서 who명령으로 접속자 ip를 확인하면 150.10.10.1로 나타나는것으로 확인함 Client2측에서 R1이후의 외부로 나갈때는 R1 e0/1인터페이스 IP로 NAT변환이 되어서 나가야 함. 확인할때는 Client2에서 R2로 telnet연결해서 who명령으로 접속자 ip를 확인하면 200.200.200.1로 나타나는것으로 확인함 R4와 R1라우터간에 IPSec VPN 터널을 설정함. 터널을 설정할때 서로간의 peer ip는 150.10.10.1과 200.200.200.1이 되어야 함 R4와 R1라우터에서 정상적으로 IPSec터널구성이 된것을 확인 Client1에서 ping 20.20.20.100, traceroute 20.20.20.100했을때 정상적으로 통신이 되는지를 확인 Client2에서 ping 10.10.10.100, traceroute 10.10.10.100했을때 정상적으로 통신이 되는지를 확인 NAT와 IPSec이 동시에 설정될때 order(순서)가 어떻게 처리되는지 이해가 중요할것으로 보입니다. 패킷을 처리할때 routing확인 \u0026gt; NAT \u0026gt; IPSec순으로 처리되므로 아래 그림을 추가로 확인해보세요.     Attachments   23820-ios-pat-ipsec-tunnel.pdf  (57 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.39-samba%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.39 SAMBA서버 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0321_install-samba.zip \n[LAB의 목적] 본 LAB은 리눅스에 SAMBA(삼바)서버를 구성해서 윈도우를 사용하는 호스트OS와 파일공유하는 방법을 습득하는 LAB입니다. 도커에 samba패키지를 설치하고 samba기본 설정하는 방법을 이해해야합니다. \n[LAB수행조건]  SAMBA-server는 ubuntu-client이미지로 컨테이너를 생성하여 인터넷이 접근가능한 상태에서 samba패키지를 설치하고 구성 호스트OS의 윈도우시스템에서 SAMBA-server가 연결되도록 라우팅을 설정하기 SAMBA서버에 사용자 계정을 생성하고 SAMBA구성에도 해당 사용자정보를 구성 호스트OS 윈도우시스템에서 SAMBA서버에서 생성한 사용자로 로그인해서 사용자의 홈디렉토리를 마운트패서 사용할 수 있도록 구성 윈도우 파일탐색기와 서버의 shell상에서 만든 한글파일이름이 서로간에 깨지지않고 정상적으로 보이는지 확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.38-configuring-basic-ospf-2/",
	"title": "2.38 Configuring Basic OSPF-2",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0304_Configure-OSPF1.zip \n[LAB의 목적] 본 LAB은 2.37 Configuring Basic OSPF-1 LAB구성도에서 다음 OSPF기능을 차례대로 설정하면서 OSPF의 기능을 익히는 LAB입니다. \n[LAB수행조건]  Configuring OSPF priority Hub-and-Spoke구조에서 Spoke라우터들(R2,R4,R5)의 ospf priority를 0으로 설정하여 BR/BDR이 되지 않도록 하여 항상 R1이 DR이 되도록 설정. R2, R4, R5애서 show ip ospf neighbor명령어로 R1이 DR임을 확인하기.\n Configuring OSPF Network Types Hub-and-Spoke Frame Relay에 연결된 R1, R2, R4, R5라우터의 인터페이스에 ospf network type을 point-to-multipoint로 변경해서 DR/BDR 선출과정이 필요없도록 설정하기\n Configuring OSPF Static Neighbors R1, R2, R4, R5에 no ip ospf network명령으로 변경했던 network type을 default로 되도록리고 어떤 타입으로 변경되는지 확인하기. R1에서 static neighbor명령으로 R2, R4, R5를 지정\n Configuring Multiple OSPF Areas\n R2와 R3사이의 point-to-point link를 area 3로 설정 각각의 라우터에서 Loopback0는 자신만의 새로운 area번호에 할당 R4와 R5사이의 point-to-point link를 area 45로 설정 R1의 라우팅 테이블에 모든 O*IA(OSPF Inter-Area) route가 올라오는지 확인 R1에서 SW1을 제외한 모든 IP와 통신가능 확인    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.37-configuring-basic-ospf-1/",
	"title": "2.37 Configuring Basic OSPF-1",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0304_Configure-OSPF1.zip \n[LAB의 목적] 본 LAB은 Frame Relay망과 Ethernet이 혼합된 네트워크상에서 OSPF라우팅 프로토콜의 기본동작을 숙지하기위한 LAB입니다. \n[LAB수행조건]  LAB구성도에 따라서 LAB상의 장비들을 설정하세요. 본 LAB에서는 인접한 장비끼리만 통신되도록 구성합니다.(R1, R2, R4, R5는 인접하니깐 서로 통신 가능, R1과 R3는 한단계 거쳐서 있으므로 통신불가. R4와 SW1은 통신가능 등) OSPF에 대한 기본개념과 기본용어를 찾아보고 시작하세요.  OSPF is a link state protocol and each router maintains a topology map of their configured area ABR, ASBR, DR, BDR DROTHER의 의미파악 ospf protocol number: 89 multicast address 사용용도(224.0.0.5, 224.0.0.6) OSPF interface type Link State Advertisement types  첨부파일 0304_Configuration Basic OSPF LAB가이트.pdf를 참조해서 아래의 사항을 설정해보세요.  R1, R2, R4, R5의 frame-relay hub-and-spoke인터페이스에 ospf area 0 구성하기 R1, R2, R4, R5의 frame-relay hub-and-spoke인터페이스의 OSPF network type변경하기 ospf adjacency확인하기 debug ip ospf 1 events를 설정하고 clear ip ospf 1 process로 ospf를 reset했을때 어떠한 이벤트가 발생하는지 확인하기 ospf에 대한 debug확인하기     Attachments   0304_Configuration Basic OSPF LAB가이드.pdf  (298 ko)   14193-frbacktoback.pdf  (16 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.36-frame-relay-switch/",
	"title": "2.36 Frame Relay Switch",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0302_Frame-Relay1.zip \n[LAB의 목적] 본 LAB은 WAN기술중에 Frame Relay망으로 라우터들을 연결하여 통신설정하는 방법을 습득하기 위한 LAB입니다. 하단에 참조한 페이지는 본 LAB을 설정하는 방법을 단계적으로 설명한 페이지입니다. 문서의 내용에 따라서 설정하면서 Frame Relay설정방법을 이해하시기 바랍니다. \n[LAB수행조건]  Frame Relay망에 대한 기본개념 이해하기 Frame Relay에서 사용하는 용어 이해하기  PVC(Permanent Cirtual Circuit) SVC(Switched Virtual Circuit) DLCI(Data-Link Connection Identifier) LMI(Local Management Interface)  Cisco IOL한대를 Frame Relay스위치로 설정하여 WAN구간으로 사용하므로 Cisco라우터를 Frame Relay스위치로 활용하는 방법을 이해하기  \n[추가 LAB] 위의 LAB을 설정완료하고 정확하게 이해했다면 아래 그림에서 표시하고 있는 네트워크 구성에 대해서 직접 Frame Relay스위치를 구성하고 LAB생성해서 설정을 해보세요. 참조한 페이지: Frame Relay Switch on a Cisco Router\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.35-port-security/",
	"title": "2.35 Port Security",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0228_port-Security.zip \n[LAB의 목적] 네트워크를 운영하다보면 특정포트에 허브를 연결해서 다수의 시스템을 사용하는것을 제어할 경우가 발생합니다. Cisco의 port secuirty기능을 사용하여 스위치 포트에 Learning되는 mac address갯수를 제한해서 하단에 허브사용을 제어해보는 LAB입니다. \n[LAB수행조건]  HUB2, HUB3장비는 SW1과 동일한 Cisco IOL이미지를 사용했지만, HUB처럼 생각하기 위해서 no ip routing설정만하고 다른 설정은 아무것도 하지 마세요. SW1스위치의 e0/0포트는 1개의 mac만 허락하도록 설정하고 VPC4, 5, 6중 가장 먼저 Learning되는 노드만 통신이 되고 나머지는 통신이 안되도록 구성하기 SW1스위치의 e0/1포트는 1개의 mac만 허락하도록 설정하고 상상 VPC8만 통신이 되도록 구성하기 HUB가 Cisco IOL이미지로 구성함에 다라서 의도하지 않은 문제가 발생할 것입니다. 어떠한 문제점이 발생하는지와 그것에 대한 해결책을 제시해 보세요.  참조한 페이지: Switchport Port Security Explained With Examples\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.34-ssl-vpn-with-asa/",
	"title": "2.34 SSL VPN with ASA",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0218_Use-ASA.zip \n[LAB의 목적] Cisco ASA에서 제공하는 AnyConnect SSL VPN기능을 활성화하여 SSL VPN을 시험하는 LAB입니다. 사용자가 IPSec VPN을 사용할때는 별도 IPSec VPn Client를 설치해야하지만 SSL VPN은 웹브라우저로 연결하여 Active-X로 내려받는 클라이언트를 설치하여 사용하는 방식에 대한 이해도 필요합니다. \n[LAB수행조건]  LAB구성도는 2.33 Cisco ASA이미지구성 LAB에서 사용한 구성도를 그대로 이용 ASDM 관리툴의 마법사(Wizard)기능을 사용하여 AnyConnect SSL VPN설정하기.(처음 설정시에 CLI방식으로 설정하는데 어려움이 있기때문에 마법사를 통하여 설정했을때 어떤부분이 config상에 들어가는지 확인하는것도 좋은 방법) VPN Pool은 10.0.200.100 ~ 10.0.200.110 사용 Split DNS설정으로 10.0.200.0/24네트워크만 VPN을 타도록 설정할것.(Split DNS는 VPN을 사용하는 사용자가 VPN을 연결한 시점에 모든 트래픽이 암호화된 VPN트래픽으로 VPN Peer로 전달되도록 하지 않고, 오직 통신하고자 정의한 대역하고만 암호화통신을 수행하고 그 이외의 통신은 현재 사용자 인터넷 연결상태를 사용하는 방식) 구성후 브라우저로 접속시 Java버전 때문에 차단되는 부분 해결해서 Avtive-X프로그램이 정상적으로 설치되도록 하기 AnyConnect 프로그램 다운로드 후 설치 AnyConnect SSL VPN 연결되고 통신됨을 확인하기    Attachments   01-Cisco ASDM 6.4 for ASA - 10.0.100.2.png  (53 ko)   02-AnyConnect VPN Connection Setup Wizard.png  (72 ko)   03-AnyConnect VPN Connection Setup Wizard.png  (13 ko)   04-AnyConnect VPN Connection Setup Wizard.png  (16 ko)   05-Add Identity Certificate.png  (12 ko)   06-Manage Identity Certificates.png  (13 ko)   07-AnyConnect VPN Connection Setup Wizard.png  (17 ko)   08-AnyConnect VPN Connection Setup Wizard.png  (18 ko)   09-AnyConnect VPN Connection Setup Wizard.png  (16 ko)   10-AnyConnect VPN Connection Setup Wizard.png  (17 ko)   11-AnyConnect VPN Connection Setup Wizard.png  (13 ko)   12-AnyConnect VPN Connection Setup Wizard.png  (12 ko)   13-AnyConnect VPN Connection Setup Wizard.png  (19 ko)   14-AnyConnect VPN Connection Setup Wizard.png  (72 ko)   15-SSL VPN Service.png  (10 ko)   16-Installation - Internet Explorer.png  (55 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.33-cisco-asa%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B5%AC%EC%84%B1/",
	"title": "2.33 Cisco ASA이미지구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0218_Use-ASA.zip \n[LAB의 목적] Cisco ASA이미지를 UnetLab에 구성하여 LAB상에서 방화벽장비로 이용하기 위한 LAB입니다. ASA이미지를 구성한후에 기본적인 설정과 ASDM을 통해서 ASA방화벽을 연결한후 기본적인 사용법을 익혀보세요. \n[LAB수행조건]  Cisco ASA이미지를 unetLab에 환경구성하기 모든 노드가 통신이 가능하도록 환경구성하기 ASA의 방화벽정책을 ALL Permit정책으로 설정하기 ASA 관리포트 연결이 호스트OS에서 가능하도록 구성하기  http server enable http 접근ip허용  호스트OS에서 ASA관리 연결 및 기본 사용법 숙지하기   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.32-ftp%EC%97%90-%EB%8C%80%ED%95%9C-acl%EC%84%A4%EC%A0%95/",
	"title": "2.32 FTP에 대한 ACL설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0212_FTP_mode-ACL.zip \n[LAB의 목적] FTP프로토콜은 passive mode와 active mode로 동작할때 사용되는 port번호가 다르고 요청하는 방향이 달라지기때문에 보안정책을 설정하는데 까다로운 프로토콜입니다. IOS라우터의 ACL기반에서 FTP프로토콜에 대한 ACL정책을 설정하면서 FTP프로토콜에 대한 이해를 돕고자하는 LAB입니다. \n[LAB수행조건]  FTP의 Active Mode와 Passive Mode이해하기 vsftpd환경설정에서 Active Mode와 Passive Mode설정하는 방법 익히기 ftp클라이언트 프로그램(우분투의 ftp명령어)에서 active mode와 passive mode전환 방법 익히기 두 시스템이 정상 통신 되도록 환경구성하기 FTP는 제어포트와 데이터포트를 다르게 사용하기 때문에 연결후에 디렉토리 목록 확인이 필요함 Active Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 Passive Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 R1 e0/1인터페이스 inbound에 ACL을 적용해서 FTP연결만 허용하도록 정책설정    Attachments   FTP Active 모드와 Passive 모드의 차이점.pdf  (252 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.31-cacti%EC%99%80-snmp-v3/",
	"title": "2.31 Cacti와 SNMP V3",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0207_NTP-Time-Sync.zip \n[LAB의 목적] 오픈소스 Cacti프로그램은 SNMP기반으로 장비의 상태모니터링과 누적 트래픽그래프를 제공할 수 있는 훌륭한 프로그램입니다. 우분투시스템에 Cacti프로그램으로 모니터링 시스템을 구축하는 방법을 습득하고 LAB상의 장비에 SNMP V3설정하는 방법과 Cacti에 장비를 등록하여 모니터링하는 방법을 배우고자 합니다. \n[LAB수행조건]  LAB구성도는 2.30 NTP서버구성 및 시간동기화에서 사용한 LAB을 그대로 이용 R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server에 cacti패키지를 설치하고 구성하기 R1에 Static NAT설정: R1 e0/0 80/TCP \u0026mdash;-\u0026gt; 10.0.10.10 80/TCP 호스트OS에서 R1의 e0/0인터페이스 IP(192.168.234.90)로 웹 연결하면 NTP-server에 구성한 cacti가 연결되어야 함 ubuntu-client에 net-snmp패키지를 설치하고 SNMP V3로 에이전트 구성 Cisco, Juniper에 SNMP V3구성 Cacti에 LAB상의 모든 시스템을 등록하고 정상 모니터링이 되는지 확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/",
	"title": "2.30 NTP서버구성 및 시간동기화",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0207_NTP-Time-Sync.zip \n[LAB의 목적] 네트워크 장비나 보안장비등 로그를 모니터링 해야하는 시스템의 시간은 중요한 항목입니다. 따라서, 장비에 NTP서버를 통한 시간동기화는 필수라고 할 수 있습니다. 본 LAB은 Docker시스템에 NTP서버를 구성하여 장비들의 시간을 동기화하는 LAB입니다. 다양한 시스템별로 NTP시간동기화 설정을 어떻게 하는지 방법을 익혀보세요. \n[LAB수행조건]  R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server와 ubuntu-client는 우분투 클라이언트 이미지를 사용한 컨테이너로 동작 NTP-server에 인터넷으로부터 NTP패키지를 설치하여 time서버를 구동 Cisco장비(R1, SW1), Juniper(Olive-R), Ubuntu Linux(ubuntu-client)시스템별로 10.0.10.10으로 NTP를 지정하여 시간동기화 확인  구성완료 안됨 도커 컨테이너에서 커널의 시간을 건드리는 문제로 인하여 NTP서버구동에 문제 발생. 향후 KVM환경의 리눅스시스템을 구현할때 다시 구성시도 필요!!!\n "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.29-extended-acl/",
	"title": "2.29 Extended ACL",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0206_Extended-ACL.zip \n[LAB의 목적] 단순한 ACL을 만들어봤으니 프로토콜과 서비스 포트번호를 포함하여 좀 더 복잡한 보안정책을 구성해보는 LAB입니다. \n[LAB수행조건]  R1 e0/0에 pnet0를 연결하고 NAT설정하여 LAB상의 시스템들이 인터넷 가능하도록 설정 아래 정책으로 Static NAT설정  192.168.234.90 80/TCP \u0026mdash;-\u0026gt; 10.0.100.10 80/TCP 192.168.234.90 10022/TCP \u0026mdash;-\u0026gt; 10.0.100.20 22/TCP  아래의 보안정책을 Extended ACL로 생성하고 인터페이스 적용하기  내부(10.0.100.0/24) \u0026mdash;-\u0026gt; 외부는 모든 통신 permit 외부 \u0026mdash;-\u0026gt; 10.0.100.10 80/TCP permit 외부 \u0026mdash;-\u0026gt; 10.0.100.20 22/TCP permit ALL DENY   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/",
	"title": "2.28 Juniper의 Packet Filtering",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 2.27 Standard ACL에서 사용한 LAB에서 R1라우터를 Olive Router로 교체 \n[LAB의 목적] 다양한 장비에서 보안정책 설정하는 방법을 경험하기를 추천합니다!!!\n\n[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.27-standard-acl/",
	"title": "2.27 Standard ACL",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0206_Standard-ACL.zip \n[LAB의 목적] 향후 방화벽의 복잡한 보안정책을 무리없이 설정할 수 있도록 하기위해서 라우터의 IOS기반 ACL(Access Control List)기능을 사용하여 보안정책을 적용하는 방법을 배우고자하는 LAB입니다. ACL테이블을 작성하고 인터페이스의 inbound정책과 outbound정책에 따라 어떤 변화가 있는지 주의깊게 살펴보세요. 저의 생각으로는 보안정책을 적용받는 대상에 가장 가까운 인터페이스의 방향에 적용하는것이 효율적으로 봅니다.\n\n[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절 두번째 ACL에 대한 통신확인을 수행할때 192.168.100.100 호스트만 통신허락을 했는데, 10.0.100.0/24 \u0026ndash;\u0026gt; 192.168.100.100이 통신이 되지 않은가요? 왜 그럴까요?? 한번 고민해보세요!!\n    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/",
	"title": "2.26 WireShark로 패킷캡처-II",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-make-server.zip \n[LAB의 목적] 본 LAB은 2.25 Docker로 서버구현하기에서 구성한 LAB을 그대로 이용하여 클라이언트와 서버간에 TCP통신이 수행될때 WireShark로 패킷을 잡아보고 패킷을 분석해보는 LAB입니다. 패킷을 ASCII형태로 decode했을때 어떻게 보이는지와 Flow Graph에서 서버와 클라이언트가 사용하는 TCP Port번호를 주의깊게 살펴보세요.\n\n[LAB수행조건]  WireShark캡처 실행하는 방법 다시한번 숙지하기 ubuntu-client(10.0.0.100)에서 SW1(10.0.0.5)로 telnet, ssh연결에 대한 capture ubuntu-client(10.0.0.100)에서 ftp-server(10.0.0.20)로 ftp, sftp연결에 대한 capture ubuntu-client(10.0.0.100)에서 www-server(10.0.0.10)로 http연결에 대한 capture    Attachments   31장_Wireshark로 패킷 Capture하기.pdf  (868 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/",
	"title": "2.25 Docker로 서버구현하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-make-server.zip \n[LAB의 목적] 본 LAB은 UnetLab에서 이용할 각종 서버를 Docker시스템을 통하여 구현하고 클라이언트에서 각 서버들을 연결할 수 있는 환경을 구성하는 LAB입니다.\n\n[LAB수행조건]  R1라우터에 VMWare NAT인터페이스를 e0/0에 연결하고 NAT설정을 수행하여 LAB이 인터넷 사용이 가능하도록 구성 SW1스위치는 기본설정 ubuntu-client는 Docker 기본이미지로 만들어진 컨테이너를 사용. 인터넷까지 정상통신되는것을 확인 www-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 apache2, ssh서버를 패키지로 설치하여 서부구성하고 테스트계정 생성하기 ftp-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 vsftpd, ssh서버를 패키지로 설치하여 서버를 구성하고 테스트계정 생성하기 ubuntu-client시스템에서 각 서버로 ssh연결, 웹연결, ftp연결 시험 수행  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.24 Docker에서 인터넷 사용하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0201_Docker-use-internet.zip \n[LAB의 목적] LAB에 추가하는 Docker시스템에 다른 패키지를 설치하거나 설치된 패키지를 업데이트 하기 위해서는 인터넷 연결이 필요합니다. 라우터의 NAT설정을 통해서 Docker에서 인터넷 연결이 가능하도록 설정해보세요.\n\n[LAB수행조건]  LAB에서 생성하는 Docker시스템에서 인터넷을 접근해서 패키지 설치가 가능하도록 설정 R1라우터의 e0/0인터페이스를 VMWare의 NAT인터페이스(pnet0)에 연결하고 ip를 자동할당으로 받도록 설정 R1라우터에 NAT를 설정하여 내부네트워크(10.0.0.0/24)가 외부로 통신할때 e0/0인터페이스 IP로 PAT변환이 수행되도록 설정 우분투 클라이언트 시스템에서 패키지 업데이트를 수행  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/",
	"title": "2.23 UnetLab에서 Docker활용하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0131_Use-Docker.zip \n[LAB의 목적] 컨테이너 기술을 사용하여 경량의 시스템을 구현해주는 도커시스템을 UnetLab에 추가함으로써 다수의 서버를 LAB상에 올릴수 있도록 합니다. \n도커(Docker)란? Docker에 대한 개념정리는 도커 무작정 따라하기를 참조했습니다. \n[LAB수행조건]  UnetLab이 설치된 우분투 리눅스에 Docker설치하기 본 LAB을 구성할때 참조한 How To Adding and Run Docker Container on UnetLab 문서는 여전히 참조할만 하지만 우분투에 docker설치하는 내용은 최근 우분투에 repository를 이용하여 설치하는 방법을 이용해야 합니다. 재검색을 통해서 Installing Docker in EVE-NG 사이트를 찾았습니다. 우분투에 docker를 설치하는 방법과, unetlab에서 사용하는 docker LISTEN포트 수정하는것, unetlab 장비 템플릿에 docker가 기본으로 disable상태인데 활성화하는 방법등 수정이 필요한 내용이 같이 포함되어 있습니다.\n  Docker사용에 필요한 기본 명령 숙지하기  검색: # docker -H=tcp://localhost:4243 search --no-trunc ubuntu 설치: # docker -H=tcp://localhost:4243 pull ubuntu 설치된 이미지 목록 확인하기: # docker -H=tcp://localhost:4243 images 설치된 이미지 삭제하기: # docker -H=tcp://localhost:4243 rmi 이미지-ID 컨터이너 실행하기: # docker -H=tcp://localhost:4243 run 이미지-ID 실행중인 컨터이너 목록 확인하기: # docker -H=tcp://localhost:4243 ps 모든 컨테이너 목록 확인하기: # docker -H=tcp://localhost:4243 ps -a 컨테이너 삭제하기: # docker -H=tcp://localhost:4243 rm 컨테이너-ID 컨테이너 접속하기: # docker -H=tcp://localhost:4243 exec -it /bin/bash 이미지 빌드하기: (1). Dockerfile 작성하기 (2). # docker -H=tcp://localhost:4243 build --tag 이미지이름 - 이미지이름은 대문자 안됨. 소문자, 숫자, 언더바를 사용   참고파일로 앞으로 LAB에서 활용할 몇가지 Docker시스템을 build하는 방법의 문서와 Dockerfile을 올립니다. 문서를 참고하여 Apache2웹서버, exim4메일서버, Mysql서버, OpenSSH서버, 기본명령어를 포함한 OpenSSH클라이언트, vsftp서버를 build하여 준비해보세요.   참고파일   0205_UnetLab-Dockerfile작성하여이미지만들기.pdf  (274 ko)   Dockerfile_apache2-server  (0 ko)   Dockerfile_exim4-SMTP-server  (0 ko)   Dockerfile_mysqld-server  (0 ko)   Dockerfile_openssh-server  (0 ko)   Dockerfile_ubuntu-client  (0 ko)   Dockerfile_vsftpd-server  (1 ko)     우분투 클라이언트를 Docker이미지로 빌드하기. 빌드할때 클라이언트에서 사용하는 기본명령어와 expect스크립트를 사용 가능하도록 만들기 expect스크립를 사용하여 SW1스위치의 config를 백업하기 작성한 스크립트를 crontab에 추가하여 주기적으로 백업하도록 설정하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/",
	"title": "2.22 Cisco IOS NAT 설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0123_CiscoIOS-NAT.zip \n[LAB의 목적] 본 LAB에서는 Cisco IOS라우터에서 NAT설정하는 방법을 습득합니다. 내부의 노드들이 외부로 통신할때 TCP port기반의 NAT를 통해서 주소변환이 발생하도록 설정하고, 외부에서 내부측의 장비로 원격연결을 하기 위한 inside destination NAT를 설정하는 방법을 습득합니다. \n[LAB수행조건]  LAB상의 모든 노드가 통신이 가능하도록 설정 스위치가 원격접속이 가능하도록 설정 SW1에서 SW2로 telnet, SW2에서 SW1으로 telnet 접속하고 who명령을 통해서 출발지 IP주소를 확인하기 10.0.0.0/24대역에서 10.10.0.0/24대역으로 통신할때 192.168.200.200 IP로 PAT변환이 되어서 통신되도록 NAT설정 NAT설정후에 SW1스위치에서 SW2스위치로 telnet 연결하고 who명령으로 출발지 IP확인했을때 192.168.200.200으로 나오는지 확인 SW2스위치에서 telnet 192.168.200.200으로 연결하면 SW1스위치가 연결되도록 NAT설정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/",
	"title": "2.21 Cisco HSRP이중화 구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0120_Cisco-HSRP-Networks.zip \n[LAB의 목적] Cisco IOS 백본스위치에 대한 장애를 대비하기 위하여 이중화로 구성하고 게이트웨이 이중화 프로토콜인 HSRP를 사용하여 이중화 네트워크를 구성합니다. \n[LAB수행조건]  VRRP(Virtual Router Redundancy Protocol)와 HSRP(Hot Stanby Router Protocol)는 동일하게 게이트웨이를 이중화하는 프로토콜로 VRRP는 모든 제조사에서 사용가능 하지만 HSRP는 Cisco에서만 사용 가능 HSRP 기본구성 문서를 참조하여 LAB장비를 설정 VLAN100은 BACKBONE1이 Master, VLAN200은 BACKBONE2가 Master가 되도록 설정 show stanby brief로 HSRP상태확인 모든 노드에서 LAB상의 모든 IP로(slave ip address를 포함) 통신이 되는것을 확인 BACKBONE2를 stop했을때 HSRP Master가 BACKBONE1으로 전환되면서 네트워크 끊김이 없음을 보이려 했으나 사용한 이미지상의 버그로 인하여 fail-over시험은 완료 못함\n   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/",
	"title": "2.20 WireShark로 패킷 캡처",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] UnetLab에 구성하는 LAB자체에서 WireShark를 통한 패킷을 캡처가 가능합니다. LAB에서 WireShark를 사용할 수 있도록 구성하는 LAB입니다. 우분투에서는 sudo개념을 사용하고 있기때문에 root암호를 생성하는 과정이 필요합니다. \n[LAB수행조건]  네이버블로그에서 UNL에서 와이어샤크를 이용한 패킷캡처 라는 잘 정리된 글을 통해서 본 LAB을 잘 꾸밀 수 있읍니다. 원리: plink를 이용하여 UNL서버에 SSH터널을 구성하여 tcpdump데이터를 받아오는 구조\n  UnetLab사이트에서 Windows Client Side을 다운로드해서 설치하면 기본프로그램에 대한 레지스크리 등록 수행 wireshark_wrapper.bat파일에 USERNAME과 PASSWORD항목이 있는데 ssh로 연결해서 tcpdump를 실행할 수 있는 권한이 있어야 하므로 root계정정보를 입력해야함 우분투는 sudo개념을 사용함으로 root에 대한 암호설정 필요 ssh데몬의 config파일에서 root로 로그인할 수 있도록 설정 변경 필요 윈도우에 Wireshark프로그램 설치하고, wireshark_wrapper.bat파일의 내용중 wireshark프로그램의 경로를 수정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/",
	"title": "2.19 Remote Access VPN구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0118_RemoteAccess-VPN.zip \n[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN연결을 고려하지 않고 사용하면 라우터에서 해당 대역의 IP에 대해서 암호화를 진행해줍니다. 출장을 나갔거나 외부에서 사용하는 사용자들 위한 Remote VPN을 Cisco IOS라우터에 구성해서 사용자별로 VPN환경을 사용할 수 있도록 구성해봅니다. \n[LAB수행조건]  라우터 R1, SW, VPC1,2에 기본 IP설정 참고파일에 올린 pdf문서를 기반으로 R1에 Remote Access VPN설정 Windows7에 Cisco IPSec VPN Client 5.0.07버전 설치. 한번에 정상적으로 설치 안되는 경우가 발생할 수 있는데, 그럴 경우에 Windows 7을 재시작후에 다시 설치해보세요. Windows 7에서 192.168.234.100으로 IPSec연결 VPN Pool에서 IP할당 받아야 함 VPN 정상 연결후 Windows 7에서 10.2.1.0/24대역과 통신됨을 확인    참고파일   2017-01-18 15_19_43-QEMU (Win7).png  (87 ko)   2017-01-18 15_20_57-QEMU (Win7).png  (84 ko)   2017-01-18 15_21_25-.png  (71 ko)   2017-01-18 15_22_36-QEMU (Win7).png  (70 ko)   How to configure a Cisco IOS Remote Access IPSEC VPN.pdf  (227 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.18 IPSec Site-to-Site VPN 구성",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0118_L2L-IPSec_Tunnel.zip \n[LAB의 목적] 본사와 지사간에 공중망을 통해서 데이터전송을 할때 암호화된 트래픽으로 전달하기 위하여 VPN을 사용합니다. 본 LAB은 Cisco IOS기반 라우터를 사용하여 두 지점간에 IPSec VPN터널을 구성하는 방법을 습득합니다. \n[LAB수행조건]  두개의 라우터(R1, R2)를 Cloud(pnet0) 네트워크에 연결해서 구성 두대의 라우터간에 Site-to-Site 터널구성 IPSec터널을 통해서 10.1.1.0/24네트워크와 172.16.20.0/24 네트워크가 통신됨을 확인 debug를 통해서 IPSec세션 로그 확인해보기    참고파일   LAN-to-LAN IPsec Tunnel Between Two Routers.pdf  (281 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/",
	"title": "2.17 L3라우터의 Trunk인터페이스",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: L3-Ro_Trunk.zip \n[LAB의 목적] 물리적으로 단일 링크를 통해서 여러개의 VLAN을 통신하도록 하기 위해서 Trunk를 사용합니다. L3라우터장비에서 Trunk인터페이스를 sub-interface롤 생성하는 방법을 습득하는 LAB입니다. \n[LAB수행조건]  SW1, SW2스위치는 L2스위치로 설정 SW1, SW2스위치 각각에 2개의 VLAN을 생성하고 각각의 VLAN에 VPC를 연결 SW스위치와 Cisco, Juniper라우터간에 trunk를 설정하고 L3인터페이스를 설정 L3라우터에서 trunk로 연결되는 L3인터페이스 생성방법 습득 2대의 라우터간에 라우팅 설정 모든 VPC간에 통신 가능한지 확인  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/",
	"title": "2.16 Juniper Olive 기본명령어 학습",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0115_Juniper-Olive-1.zip \n[LAB의 목적] LAB에서 사용할 수 있는 장비들이 많다면 더 풍부한 테스트환경을 구현할 수 있습니다. Juniper장비를 LAB환경에서 사용하기 위해서 장비의 기본 명령어를 익혀보기위한 LAB입니다. \n[LAB수행조건]  Juniper Olive 이미지 업로드하고 압축해제하기 # tar xvpf Juniper*.ova 이미지 변환하기 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 JunOS\\ Olive-disk1.vmdk hda.qcow2 디렉토리 생성. Juniper이미지는 olive-이름으로 시작해야함. # mkdir -p /opt/unetlab/addons/qemu/olive-12.1R1.9 변환한 이미지 move # mv hda.qcow2 /opt/unetlab/addons/qemu/olive-12.1R1.9 권한수정 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions 구성한 LAB에서 JunOS명령어를 익혀보세요    참고파일   0115_Basic Juniper Router Configuration.pdf  (486 ko)    "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/",
	"title": "2.15 Null0 라우팅",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0113_Routing확장-Lab.zip \n[LAB의 목적] 내부에서 외부로 유해사이트를 접근하는 문제를 급하게 차단을 해야 하는 경우에 방화벽설정이나 ACL설정을 하지 않고 라우팅을 해당사이트에 대해서 Null0로 설정함으로 차단을 설정할 수 있습니다. 본 Lab은 Null0 라우팅을 설정하여 패킷이 drop되는 방법을 습득합니다. \n[LAB수행조건]  Lab구성도는 2.6 Static route설정 LAB을 이용 모든 노드들이 통신이 되도록 구성하기 모든 노드들간에 통신이 정상적임을 확인한 후에 오로지 라우팅 조정으로만 VPC5가 통신이 안되도록 설정  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.14 Etherchannel 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0110_EtherChannel_Lab.zip \n[LAB의 목적] 물리적인 포트 여러개를 묶어서 대역폭을 확장해서 제공하고 물리적인 포트의 장애를 대비할 수 있는 Etherchannel기술을 습득하는 Lab으로서 동일장비에서 설정하는것도 중요하지만 서로다른 제조사의 제품간에 연동도 중요합니다. 따라서, 본 Lab에서는 Cisco스위치와 VyOS간의 설정을 수행합니다. \n[LAB수행조건]  VyOS 리눅스 이미지 추가하기 Lab을 설정할때 etherchannel mode를 여러가지로 변경해보고 debug메시지로 덤프보면서 어떻게 동작하는지 이해하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/",
	"title": "2.13 rsyslogd로 중앙로그서버 구현",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip \n[LAB의 목적] 네트워크장비의 로그는 버퍼의 사이즈때문에 일정시간 지나면 overwrite되버립니다. 따라서, 원격서버에 로그서버를 구성하여 네트워크 장비의 로그를 저장하는것을 중요합니다. 본 LAB에서는 리눅스에서 기본제공되는 rsyslog데몬을 설정하여 네트워크장비의 로그를 수집하는 방법을 습득합니다. \n[LAB수행조건]  우분투에 rsyslog라는 로그서버 데몬이 기본으로 설치되는데 기본적으로 네트워크에 대해서는 LISTEN하도록 설정되어 있지 않습니다. 네트워크에 대해서 LISTEN모드를 활성화하고 네트워크를 통해서 들어오는 syslog패킷을 수집할 수 있도록 구성 장비의 IP별로 로그파일이 별도로 만들어지도록 구성  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/",
	"title": "2.12 DHCP서버와 DHCP네트워크",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip \n[LAB의 목적] 우분투서버에 DHCP서버를 구성하고 3개의 VLAN에 IP를 할당해주는 LAB \n[LAB수행조건]  UnetLab이 설치된 우분투시스템에 isc-dhcp-server패키지를 설치하고 DHCP서버를 구성하여 pnet1인터페이스에서만 LISTEN하도록 구성. pnet0인터페이스와 같이 물리적인 네트워크에 연결된 부분에서 LISTEN하게되면 실제 네트워크레 영향을 줄수 있으므로 반드시 UnetLab 가상머신 내부에서만 사용하는 pnet1에서만 LISTEN하도록 서버를 구성. 백본스위치에 3개 VLAN이 통신되도록 구성 각 VLAN별 스위치 설정 우분투서버에서 Lab환경의 네트워크와 통신할 수 있도록 라우팅설정 백본스위치의 각 VLAN인터페이스에 ip helper를 설정하여 DHCP패킷이 릴레이 되도록 설정 VPC 4,5,6은 DHCP서버에서 해당 네트워크 대역의 IP로 자동할당됨을 확인 VPC7은 DHCP서버에서 IP를 할당받는데 항상 고정된 10.4.4.100을 할당받도록 구성  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.11-tacacs+-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "2.11 TACACS+ 인증서버 구성하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 0104_TACACS-Lab.zip \n[LAB의 목적] TACACS+인증서버 패키지를 저장소설치가 아닌 소스파일로 컴파일해서 설치하는 방법익히기 TACACS+인증서버를 구성하고 장비 접근을 인증서버 통해서 인증하기 \n[습득해야할 내용]  UnetLab이 설치된 우분투시스템에 TACACS+를 소스로 설치하는 방법.  소스로 설치하는 방법  apt-get install build-essential (우분투에서 소스컴파일을 위한 기본 환경설정) 압축풀기 소스파일 압축해제후 설치가이드를 해주는 README나 INSTALL파일을 확인하기 ./configure tac_plus 를 수행하면 시스템의 환경을 파악하여 컴파일 수행을 위한 Makefile생성 make 를 수행하면 만들어진 Makefile을 읽어서 내용대로 컴파일 수행됨 make install 을 수행하여 실행파일들 설치. 설치되는 실행파일의 위치를 확인  pnet1에 IP주소 설정하고 tacacs+데몬을 debug 레벨15로 구동 SW스위치에서 TACACS+인증관련된 기본설정 tac_plus.conf 파일생성 (암호 MD5알고리즘) openssl passwd -l 스트링 tac_plus.conf파일에서 사용자 계정별로 사용할 수 있는 명령어를 제한하는 방법 익히기 인증로그, 수행명령 로그가 기록되는것을 확인   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/",
	"title": "2.10 윈도우이미지 등록하기",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 윈도우 가상머신을 LAB에서 활용할 수 있도록 이미지생성해서 넣기. 추가한 하드디스크영역에 생성한 이미지를 넣고 soft link를 설정하여 운영하는 방법 익히기 \n[습득해야할 내용]  윈도우 가상머신 다운로드하기 90일동안 사용할 수 있는 윈도우 가상머신을 제공하는 사이트에서 적절한 윈도우를(IE10 on Win7, VMWare용) 선택하여 zip파일 다운로드 다운로드한 zip파일을 우분투서버에 업로드하고 압축해제. 사이즈가 큰 관계로 추가로 장착한 하드디스크에서 수행하기를 권고. # unzip IE10.Win7.For.Windows.VMware.ZIP 윈도우 이미지 넣어줄 디렉토리 준비 윈도우 이미지는 win-으로 디렉토리명이 시작해야 하고, /opt/unetlab/addons/qemu/디렉토리 하단에 위치해야 합니다. 하지만, 하드디스크의 용량이 작은 관계로 추가한 하드디스크 영역에 이미지를 넣어주고 디렉토리 링크설정. 신규 HDD를 /data에 마운트한 상태임 \n# mkdir /data/qemu/win-7-IE10 # ln -s /data/qemu/win-7-IE10 /opt/unetlab/addons/qemu/win-7-IE10 # cd /opt/unetlab/addons/qemu/win-7-IE10  이미지 변환하기 다운로드한 zip파일을 /data/temp폴더에 압축해제 했다고 가정, 해당폴더에 *.vmdk이미지가 있음을 확인 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 /data/temp/IE10_-_Win7-disk1.vmdk hda.qcow2 이미지 변환작업이 끝나면 아래와 같이 hda.qcow2파일 있어야함. # ls -al /opt/unetlab/addons/qemu/win-7-IE10/hda.qcow2\n 권한수정하기 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions\n 윈도우 가상머신 LAB에 등록하기 사용해보기\n  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/",
	"title": "2.9 우분투머신에 하드디스크 추가",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] UnetLaB을 돌리기 위하여 우분투 가상머신을 생성할때 20G하드디스크를 생성했는데 이미지를 몇개 추가하다보니 디스트의 용량부족발생. 리눅스에 신규로 하드디스크를 추가했을때 수행되는 작업 익히기 \n[습득해야할 내용]  VMWare가상머신 설정에서 20GB SCSI HDD 한개 추가하기 우분투머신을 부팅하고 dmesg|grep sd명령으로 하드디스크 인식된거 확인 fdisk -l명령으로 디스크 목록 확인하기 fdisk명령으로 추가된 하드디스크 파티션하는 방법 방법익히기 신규로 생성된 파티션을 포맷하는 방법 익히기. 이 부분에서 리눅스의 파티션의 종류에 대해서 알아보기(ext2, ext3, ext4등등) 신규 파티션 마운트할 디렉토리 생성과 수동 마운트 진행해보기 fstab에 부팅시에 자동으로 마운트 되도록 설정하기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/",
	"title": "2.8 VyOS이미지 등록",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] LAB상에서 이용할 vyOS장비하나 추가하기. ova이미지에서 vmdk이미지를 추출하고, 그 추줄한 이미지를 리눅스 kvm상에서 실행할 수 있는 이미지로 변환하는 방법익히기 \n[습득해야할 내용]  VyOS란? VyOS사용자 가이드로 기본 사용법 숙지하기 VyOS ova이미지 다운로드 디렉토리 생성(VyOS이미지의 디렉토리 이름은 vyos-로 시작해야함) mkdir -p /opt/unetlab/addons/qemu/vyos-117 ova 압축풀기 tar xf vyos-1.1.7-amd64-signed.ova vmdk이미지를 qemu이미지로 변환 /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 VyOS-1.1.7-signed-disk1.vmdk hda.qcow2 권한수정 /opt/unetlab/wrappers/unl-wrapper -a fixpermissions  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/",
	"title": "2.7 스위치설정 템플릿2",
	"tags": [],
	"description": "",
	"content": " [LAB의 목적] 네트워크 장비를 설정할때 아래의 사항들은 기본적으로 설정이 필요하여 기본 설정템플릿으로 정의. LAB상에서 스위치나 라우터 설정할때 귀찮다 생각하지 말고 아래의 사항들을 기본적으로 설정하면서 습관을 들이는것이 목적. \n[습득해야할 내용]  장비의 이름(hostname)을 의미있게 부여하였는가? 도메인이름을 설정하였고, ip domain-lookup을 수행하지 않도록 설정하였는가? (no ip domain-lookup을 설정하지 않으면 프롬포트에 오타를 치는 경우 대기시간이 발생) Timezone설정을 수행하였는가? debug, log메시지에 대해서 timestamp를 localtime으로 지정하였는가? VTP domain을 지정하고 VTO mode를 transparent로 변경하였는가? password encryption서비스를 설정하였는가? aaa new-model을 설정하여 사용자계정을 통해서 장비 접근하도록 설정하였는가? 로컬관리자 계정을 생성할때 secret암호를 사용하였는가? enable암호를 설정할때 secret암호를 사용하였는가? 장비접근은 SSH만 가능하도록 하고 SSH Ver2로 설정했는가? 관리자 접근제한 ACL테이블을 생성했는가? SSH, HTTP(s), SNMP접근에 대해서 위에서 생성한 접근제한 ACL을 적용했는가? Login 배너를 설정했는가? 배너를 한글로 설정하는 방법은?  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/",
	"title": "2.6 Static Route 설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 1226_L3-Static-Route.zip \n[LAB의 목적] 본 LAB은 라우팅설정에 대한 이해를 돕기위한 LAB입니다. \n[습득해야할 내용]  모든 통신의 시작은 출발지 시스템의 라우팅테이블을 살펴본는것에서 출발한다는 사실 인지 라우팅테이블에 존재하지 않는 네트워크를 목적지로 하는 경우에는 default-gateway로 전달된다는것 default gateway를 정의하지 말고 LAB상의 모든 L3장비에서 사용하는 네트워크들에 대해서만 라우팅을 설정하여 모두 통신이 되도록 구성할것 supermasking으로 등록하는 라우팅 갯수를 줄일 수 있는 방안  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/",
	"title": "2.5 Trunk환경설정",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 1227_VLAN-Trunk2.zip \n[LAB의 목적] 물리적인 단일 연결을 통해서 여러개의 VLAN통신이 가능하도록 하는 Trunk설정 익히기 \n[습득해야할 내용]  떨어져 있는 건물에 있는 사용자들을 동일한 VLAN으로 묶어주기 위한 Trunk설정 익히기 설정할때 SW2스위치의 관리 IP는 VLAN100에서 할당하고 SW3스위치의 관리 IP는 VLAN200에서 할당하기 스위치에 trunk설정방법 익히기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/",
	"title": "2.4 스위치 기본설정 템플릿",
	"tags": [],
	"description": "",
	"content": " [구성도] \n[LAB의 목적] 2.3장의 LAB을 그대로 이용하여 LAB상의 스위치에 아래의 사항들을 설정해보고 시험하기 \n[습득해야할 내용]  스위치에 Timezone을 설정하고 외부 NTP서버를 지정하여 시간동기화. NTP시간동기화 상태 통신확인하기 debug와 log메시지가 현재 장비시간으로 정확하게 표시되도록 설정하기 설정하는 password가 복호화가 안되도록 암호화 설정하기 원격에서 장비를 연결할때 username과 암호를 물어봐서 로그인하도록 구성하기 호스트OS에서 LAB상의 장비로 telnet연결가능하게 하기(호스트OS에서 LAB상의 장비들을 연결하기 위하여 라우팅을 추가하는 방법 익히기) 모든 스위치에 대해서 원격접속을 SSH로만 가능하도록 설정하기 모든 스위치에 대해서 SSH연결시에 호스트OS에서만 접근가능하도록 ACL설정해보기 호스트OS에 tftp나 ftp데몬을 구동하여 LAB에 구성한 모든 스위치의 config를 백업해보기  "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/",
	"title": "2.3 호스트OS에서 LAB환경 접속하기",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L3-VLAN_Cloud.zip \n[LAB의 목적] 2.2 LAB에서 구성한 환경을 VMWare에서 제공하는 Host-Only(VMNet1)네트워크에 연결해서 HostOS에서 LAB장비를 연결할 수 있는 방법 익히기 \n[습득해야할 내용]  VMWare Plyaer에서 제공하는 Bridge, NAT, Host-only인터페이스 이해하기 자기의 VMWare Player버전에 맞는 vmnetcfg.exe를 받아서 네트워크를 재구성하는 방법 익히기 Bridge, NAT, Host-only인터페이스중 어떤것을 연결하더라도 LAB상의 장비를 연결하는 방법 익히기 \n[VMWare어댑터관계 개념그림]   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/",
	"title": "2.2 VLAN간 ip routing시험",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L3-VLAN.zip \n[LAB의 목적] L3를 수행하는 백본스위치 1대를 놓고 서로 다른 VLAN간에 ip routing을 수행하여 서로 다른 VLAN간에 통신 시험 \n[습득해야할 내용]  Cisco IOL에서 스위치 이미지를 사용할때  L3 라우팅기능을 사용하려면 ip routing L3 스위치에서 default gateway를 지정하려면 ip route 0.0.0.0 0.0.0.0 nexthop으로 지정 L2스위치로만 사용하려면 no ip routing L2 스위치에서 default gateway를 지정하려면 ip default-gateway nexthop으로 지정   "
},
{
	"uri": "http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/",
	"title": "2.1 L2스위치 기본LAB",
	"tags": [],
	"description": "",
	"content": " [구성도] LAB구성파일: 20161222_L2-VLAN.zip \n[LAB의 목적] UnetLAB에 등록한 Cisco IOL이미지가 정상적으로 동작하여 L2스위치의 기능을 수행하는지를 시험 \n[습득해야할 내용]  Cisco스위치의 기본설정 (보안을 고려한 설정으로 기본적으로 설정하는 내용에 대한 설정 템플릿을 만들어 보기) VPC의 기본 IP설정방법과 통신명령 익히기 동일한 VLAN상의 노느들간의 통신확인하기  "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.4-cisco-iou-iol-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/",
	"title": "1.4 Cisco IOU/IOL 이미지 구성하기",
	"tags": [],
	"description": "",
	"content": " Cisco IOU/IOL 이란? Cisco IOU/IOL이미지 추가하기  구성방법은 How To Add Cisco IOU IOL iourc라이선스 파일 만들기 Cisco의 추적?? /etc/hosts에 xml.cisco.com확인 images파일 위치에 복사 permission수정 스크립트  LAB을 생성하고 장비를 추가하여 구동해보기 telnet 기본프로그램을 putty로 변경하기 Windows integration pack을 설치하여 putty를 포함해서 윈도우에서 LAB장비를 연결하는 클라이언트 프로그램들이 설정됨  "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.3-unetlab-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
	"title": "1.3 UnetLab(EVE-NG) 설치하기",
	"tags": [],
	"description": "",
	"content": " Check if Virtualization Technology is available for UnetLab  설치한 VMware Player에 UnetLab을 위한 가상머신을 생성할때 Virtualize Intel VT-x/EPT or AMD-V/RVI기능이 활성화됨을 확인 Open-Source Routing and Network Simulation  Installing UnetLab on a Physical Server  VMWare Player에 가상머신으로 설치하지만 설치방법은 물리적인 서버에 설치하는 방법과 동일하게 설치 설치방법은 Open-Source Routing and Network Simulation를 참조 설치후에 grub를 수정하는 부분 주의할것!!!  설치후에 처음 부팅할때 UnetLab구성하기  설치한 후에 처음으로 부팅하면 UnetLab설정화면이 기본으로 구동되는데 우분투는 root암호를 넣는 부분이 없기때문에 자동으로 구동되는 프로세스를 찾아서 중지한후에 수동으로 설정하는 것을 진행할 필요가 있음  브라우저에서 UnetLab연결하고 기본 사용법 익히기 UnetLab에서 구성하는 장비들을 실제PC에서 자유롭게 접속하고 관리하기 위해서는 VMWare와 우분투, UnetLab간의 네트워크 어댑터 고나계를 정확하게 이해를 해야합니다. 아래의 그림은 Windows 10 PC에서 VMWare Player를 설치하고 우분투 가상머신을 설치하여 그 우분투에 UnetLab을 설치했을때 네트워크 어댑터의 관계를 그린 그림입니다.   "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.2-%EC%96%B4%EB%96%A4-%EB%B0%B0%ED%8F%AC%ED%8C%90%EC%9D%84-%EC%84%A4%EC%B9%98%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80/",
	"title": "1.2 어떤 배포판을 설치할것인가?",
	"tags": [],
	"description": "",
	"content": " UnetLab Requirement  처음 EVE-NG프로그램을 접했을때는 UnetLab이라는 이름으로 배포되었습니다. 시간이 흐르고 흘러 소프트웨어가 정교하게 다듬어지면서 EVE-NG라는 이름으로 변경되더군요. 지금도 Pro패키지가 있지만 완전 상용화가 될까봐 걱정을 하면서 사용중입니다. 초기 시스템 요구사항에 따라서 Ununtu 14.04 LTS버전을 사용했었지만 EVE-NG는 16.04버전을 권장하고 있습니다.  무료로 사용할 수 있는 VMWare Player에 Ubuntu 16.04 LTS버전 설치하기  4GB RAM과 4개의 Processor로 설치진행 향후 LAB을 크게 구성할때를 대비하여 8GB RAM을 사용하는것이 좋습니다.  우분투 일반버전과 LTS버전차이 우분투 Desktop버전과 Server버전차이 우분투리눅스 설치후에 putty로 원격연결하는 방법 우분투리눅스에 연결해서  우분투의 sudo개념 업데이트: apt-get update; apt-get upgrade dist upgrade는 하지말것!!!   "
},
{
	"uri": "http://ssanggu.github.io/ch1/1.1-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8/",
	"title": "1.1 리눅스의 기본",
	"tags": [],
	"description": "",
	"content": " 운영체제란? (OS, Operating System) 커널과 shell Unix의 History: BSD계역과 System-V계열의 유닉스부터 전반적인 유닉스의 발전 히스토리를 설명 리눅스란? 리눅스 배포판이란? 리눅스의 배포판 History 리눅스의 init 왕데몬에 관하여 하지만, 이제는 Systemd가 대세 패키지 관리 명령어  Debian계열(Ubuntu): apt-get RedHat게열(CentOS): yum   리눅스라는 운영체제를 설명하기 위하여 운영체제에 대해서 간략하게 설명하고 사용자가 입력하는 명령어을 받아서 실행하는 명령어해독기(shell)에 대한 설명과 여러가지 shell별로 환경변수를 설정하는 방법을 살펴봅니다. 리눅스의 다양한 배포판들이 존재하는 것을 설명하고 배포판들의 뿌리를 설명할 것입니다. 윈도를 처음 설치하면 반드시 업데이트를 수행해야 하는것처럼, 리눅스도 설치하면 필수적으로 업데이트를 수행해야 합니다. 요즘은 GUI환경으로 설치하면 자동으로 업데이트되지만 CLI환경에서 패키지 관리명령어를 사용하여 업데이트하는 방법을 설명합니다.\n "
},
{
	"uri": "http://ssanggu.github.io/ch0/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84%EA%B0%9C%EC%9A%94/",
	"title": "0.6 네트워크장비개요",
	"tags": [],
	"description": "",
	"content": "네트워크에 사용되는 케이블을 알아보면서 모든 케이블마다 통신할 수 있는 거리제한이 있다는 것을 알게되었습니다. 한 세그먼트의 최대거리에 수용할 수 있는 PC들이 모두 수용되었을떄 추가적인 케이블 세그먼트를 만드는데 이 두 세그먼트간의 통신은 어떻게 할까요? 이렇게 케이블의 물리적인 거리의 한계를 극복하기 위하여 네트워크장비들이 등장하게 됩니다. 등장한 네트워크장비는 Repeater(리피터), Bridge(브리지), Router(라우터)입니다. 우리는 OSI 7 Layer중에서 아래 3계층만 다룬다고 했는데, 등장한 네트워크장비들이 이 3계층에 아래와 같이 매핑됩니다. Repeater \u0026nbsp;\u0026nbsp;:거리연장 + 신호증폭  리피터는 케이블의 물리적인 거리한계를 극복하도록 거리를 연장하는 기능과 감쇠된 신호를 증폭하여 다시 전달할 수 있는 기능을 제공합니다. Bridge \u0026nbsp;\u0026nbsp;:Repeater기능 + MAC Address 필터링  브리지는 리피터가 제공하는 기능을 모두 수용하고 추가적으로 Layer2에서 사용하는 MAC Address에 대해서 테이블을 관리하고 필터링하는 기능을 제공합니다. MAC Address필터링을 통하여 불필요한 트래픽을 줄일 수 있습니다. Router \u0026nbsp;\u0026nbsp;:Bridge기능 + IP Address필터링  라우터는 브리지가 제공하는 기능을 모두 수용하고 추가적으로 Layer3에서 사용하는 IP Address에 대해서 테이블을 관리하고 필터링하는 기능을 제공합니다. 요즘은 HUB(허브)를 볼 수 없지만, 초장기때에는 HUB와 SWITCH를 구분이 필요했습니다. 건물별로 네트워크를 생각할때 어떤 케이블을 사용할 것인가를 선택하고, 사용하는 케이블의 거리제한을 고려하여 센터의 위치를 정해야합니다. 아래의 그림처럼 거리제한이 있는 케이블을 고려하여 통신센터의 위치를 선정하는것이 필요합니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/ethernet%EB%B0%9C%EC%A0%84%EA%B3%BC-%EC%BC%80%EC%9D%B4%EB%B8%94-%EC%95%85%EC%84%B8%EC%82%AC%EB%A6%AC/",
	"title": "0.5 Ethernet발전과 케이블 악세사리",
	"tags": [],
	"description": "",
	"content": "이제까지 10Mbps Ethernet만 살펴봤는데 기본에 충실하면 이후는 동일합니다. 이후로는 Ethernet으로 쭈~~욱 발전한다고 얘기했습니다. 그렇다면 동일한 CSMA/CD방식에 broadcast네트워크라는 점만 알고 있으면 되겠네요. 10Mbps이후로 등장하는것이 100Mbps를 지원하는 FastEthernet방식입니다. FastEthernet에서는 사용하는 케이블 종류에 따라서 아래와 같은 표준안을 사용했는데 각 표준별로 케이블의 최대거리를 잘 살펴보세요.  A동과 B동간의 거리가 600M일때 100Mbps FastEthernet방식으로 구성해보세요.  FastEthernet이 보편화되면서 더 빠른 속도가 필요해서 등장하는것이 1Gbps를 제공하는 GigabitEthernet입니다. GigabitEthernet도 사용하는 케이블의 종류에 따라서 여러가지 표준안이 있으므로 표준별로 케이블의 최대거리를 잘 확인하세요. 자\u0026hellip;이렇게 Ethernet에서 사용하는 케이블을 정리했읍니다. 케이블을 정리하는 마지막에서 언급해야하는것이 악세사리들\u0026hellip; 그중에서도 우리가 자주 접하는 patch panel와 outlet입니다. 아래 그림의 왼쪽처럼 처음 UTP를 사용할때는 센터의 스위치로부터 사용자까지 케이블을 설치하고 양쪽에 RJ45커넥터로 만들어서 사용자 PC를 직접 연결해주었습니다. 이렇게 많은 사용자들이 연결되어서 사용하다가 사용자 이동이 자주 발생하면서 케이블을 다시 포설하거나 커넥터를 다시 찍어주어야 하는 비효율적인 일들이 자주 발생하게 되었죠. 그래서 네트워크센터부터 사용자까지 포설되는 UTP케이블을 사용자의 가까운 위치까지 포설해서 종단처리하고 사용자가 그 부분에서부터 연결할 수 있도록 해준것이 outlet이라는 것이고 outlet에서 사용자 PC를 연결할때 사용하는 케이블을 사용자케이블 (user cable)이라고 불렀습니다.  사용자가 어떤 outlet에 연결할지 모르기 때문에 사용자 수보다 많은 갯수로 outlet을 설계할 수 밖에 없었습니다. 그런데 사용자 수보다 많은 outlet을 모두 연결하기 위해서 스위치를 많이 산다면 돈낭비 스위치의 포트낭비죠. 그래서 네트워크센터측에는 patch panel이라는 것을 설치해서 필요한 포트만 스위치에 연결할 수 있도록 한것이고 patch panel과 스위치를 연결하는 UTP케이블을 패치케이블이라고 부릅니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/cable%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A0%95%EB%A6%AC/",
	"title": "0.4 Cable에 대한 정리",
	"tags": [],
	"description": "",
	"content": "이제까지 가상의 통신모델과 구성형태, 어떠한 방식으로 통신하는지를 정의했으니 이제는 직선으로 표시했던 케이블부분을 정의해보겠습니다. 위의 그림에서 보듯이 처음 교육을 시작할때부터 일직선으로 그린부분이 있는데, 이 일직선이 10Base5케이블을 의미하는 것입니다. 공유매체(공통으로 사용한다)인 케이블을 10Mbps Ethernet에서부터 출발을 해보겠습니다. 위의 그림에 나열된것은 10Mbps Ethernet에서 사용하는 케이블의 종류입니다.케이블 이름에서 맨앞의 10은 10Mbps를 의미하고 Base는 Baseband신호방식(저대역)을 의미하며, 맨 마지막은 케이블의 거리제한을 의미합니다.  Ethernet에서 사용하는 신호방식을 Baseband(저대역)신호방식이라고 하는데 방송국에서 사용하는 MBC, SBS, KBS의 B는 Broadband(광대역)신호방식 입니다. 저대역통신방식과 광대역통신방식간의 차이점이 무엇인지 간략하게 찾아보세요.  10Base5케이블은 굵어서 그런지 Thick cable이라고도 불립니다. 500m의 거리제한이 있고, 2.5m간격마다 표시가 되어 있어서 노드를 연결할 수 있는 포인트가 정해져 있습니다. 끝부분에는 50오옴짜리 Terminator라는 저항을 달아서 전기신호가 소멸되는것을 막고 있습니다. 2.5m간격마다 노드를 연결할때 Tap이라는 것을 달아서 3개의 핀(pin)이 하나는 구리선에 닿고 2개는 피복에 닿도록 하여 연결하고 거기에 트랜시버를 연결해서 Carrier Sense를 하도록 합니다. Ethernet을 접하다보면 세그먼트(Segment)라는 용어를 자주 접하게 되는데요, 세그먼트라고 하면 케이블의 최대거리로 꾸며진 하나의 라인이라고 생각하면 될듯합니다. 아래의 10Base5의 경우에는 세그먼트를 표시하는 그림입니다. 10Base2케이블은 최대거리 182m를 지원하는 케이블로 Thin cable이라고 합니다. 이 케이블은 우리가 집에서 보는 동축 TV선하고 똑같이 생겼지만 규격이름은 다름니다. 어쨌든 모양은 TV선을 생각하면 됩니다. 이 케이블은 PC를 연결하기 위해서 케이블을 끊어서 T커넥터를 연결하고 그 커넥터에 PC의 NIC카드를 연결하는 구조입니다. Thick케이블보다 얇고 관리가 수월해서 초기에 확 도입되다가 사용자들이 자가 PC의 네트워크를 분리한다는것이 T커넥터를 끊는 행위를 많이 해서 전체 네트워크가 안되는 장애가 많이 발생하는 문제로 인하여 사용율이 급격하게 떨어졌습니다. 전기신호를 다루는 케이블을 다루다 보면 주파수라는 말이 많이 나옵니다. 주파수란 전기가 흘러갈때 파도처럼 파형을 그리는데 1초에 몇번의 파도가 치느냐 처럼 진동하는 수를 의미합니다. 10BaseT케이블이 나오면서 이더넷 사용이 활발해졌다고 생각이 듭니다.Thick, Thin케이블들은 관리가 어렵고 만들기도 힘들어서 사용이 어려웠는데 10BaseT케이블이 등장하니 전화선같이 얇고 쉽게 사용할 수 있어서 많이들 사용하게 됩니다. 사용의 편리성때문에 모든 Ethnet표준안이 만들어지면 UTP케이블을 이용하는 표준은 반드시 만들고 있는것입니다. 10BaseT케이블은 UTP케이블이라고도 불리는데 Unshield (쉴드가 되어 있지 않고, STP와 대조) Twisted(꼬여있다. 1쌍으로 케이블이 꼬여있음. 이 꼬임수가 기술. 케이블 끝까지 이 꼬임수를 유지하는것이 필요) Pair(쌍으로 되어 있음. 8가닥 4Pair)의 약자입니다.  10BaseT에서 사용한 UTP케이블은 Category 3케이블인데 이 케이블은 16MHz주파수를 지원하는 케이블입니다. 왜 앞에서 주파수 얘기를 한지 알겠죠.. 100Mbps, 1Gbps, 10Gbps Ethernet에서도 UTP케이블을 사용하는데 지원되는 Category가 틀립니다. 틀린 이유는 당연히 지원되는 주파수가 관건입니다.  STP(Shield Twisted Pair)케이블을 검색해보면서 Shield가 뭔지 찾아보고 UTP는 왜 Unshield라고 하는지 이해해보세요. 그리고, 지금 사용하는 UTP케이블의 피복에 보면 글씨가 써있는데, 그 글씨에서 Category가 뭐라고 쓰여있는지 확인해보고, 그 케이블은 지원되는 주파수가 얼마이고 어떤 Ethernet까지 지원되는지 찾아봅시다.  아래의 그림처럼 UTP는 2가지 타입(T568A, T568B)가 있읍니다. 우리는 T568B타입을 사용하고 있습니다. 오렌지색깔을 1,2번 핀에다 넣기 때문에 오렌지가 1번 pair라고 알고 있었는데..(저만 그럴지도 모르고\u0026hellip;) 1번Pair는 청색, 2번Pair는 오렌지, 3번 Pair는 녹색, 4번Pair는 갈색입니다. T568B표준은 2번 Pair 오렌지를 송신으로 3번 Pair 녹색을 수신으로 사용하는것입니다. UTP케이블은 4Pair중에 실제 통신용으로 2Pair만 사용하기 때문에 초창기에는 아래의 그림처럼 하나의 UTP케이블을 2Pair씩 갈라서 2개의 노드를 연결하는 구조를 많이 사용했었습니다. 하지만, 이 방식은 주파수의 차이때문에 1,3번 Pair를 사용하는 노드들의 연결이 불안정한 부분이 발생해서 요즘은 사용하지 않고 있읍니다. 아래의 그림처럼 A동과 B동을 연결할때 거리가 500m이내라면 10Base5케이블 1세그먼트로 연결하면 됩니다. 하지만 500m를 넘는다면요?? 10Base5케이블을 2개 이어서 하면 되는데(한동안 그런식으로 연결을 했었음), 안정적으로 더 먼거리를 지원하는 케이블이 필요하게 된거죠\u0026hellip; 그래서 등장하는 것이 10BaseF케이블로 MultiMode광케이블을 사용하여 2Km까지 지원을 합니다. 그래서 요즘 동간의 연결은 안정적인 광케이블을 많이 사용하게 됩니다. 광케이블에서 사용하는 용어를 살펴봅시가. 동간에 설치하는 검은색 광케이블은 아래 그림에서 보듯이 여러개의 광섬유 가닥을 묶어놓은 선이라고 보면됩니다. 우리가 사용하는 8Core, 16Core광케이블이다라고 하면 광섬유가닥을 8가닥, 16가닥을 묶어놓은것입니다. 그 묶음에서 광케이블을 이용해서 송신(tx), 수신(rx)을 해야하니깐 2가닥의 광섬유를 사용하는거죠\u0026hellip;하나의 광섬유는 코어와 클래딩이 있는데 광케이블 규격을 말할때 이것의 크기로 말합니다. 광케이블의 규격을 말할때 코어와 클래딩의 사이즈로 말한다고 했습니다. 아래 그림을 보면서 이해해보세요. 또한, 광케이블은 전송방식에 따라서 멀티모드와 싱글모드로 나눕니다. 멀티모드의 경우에는 파형을 크게 그리면서 전파되기때문에 짧은거리를 지원하고 싱글모드는 파형이 거의 직선에 가깝기때문에 장거리를 지원합니다.  8Core광케이블을 건물간에 포설했다면 그 안에 들어있는 8가닥의 광섬유에 대한 종단처리가 필요하겠죠. 그 종단처리를 위해서 필요한것이 FDF와 스플라이싱(splicing)인데요, FDF와 Splicing에 대해서 찾아봅시다.  FDF에 광케이블을 종단처리하면 그 종단처리된 FDF에서 장비를 연결할때 사용하는 광케이블 필요합니다. 광케이블에서 사용하는 케이블 커넥터의 종류는 다양하지만 우리가 주로 사용하는 것은 아래의 그림에서 SC, ST, LC타입을 주로 사용합니다. 커넥터의 모양을 잘 살펴보고 ST-LC타입 광케이블을 찾아오라고 한다면 바로 찾을 수 있어야 겠죠.  A동과 B동간의 광케이블 연결상태를 노트에 그려봅시다. 그림에는 두 건물간에 몇 Core인지, 어떤방식의 광케이블이 포설되었는지, FDF는 몇 Core로 종단처리되었는지, FDF는 무슨 커넥터 타입인지와 FDF에서 장비를 연결하는 광케이블은 어떤 커넥터 타입인지가 표시되도록 그려봅시다.  두 건물간에 8Core 싱글모드 광케이블이 설치되어서 FDF로 종단처리되어 있습니다. FDF에서 장비를 연결하는 광케이블을 멀티모드를 사용하여 연결하면 통신이 될까요?  UTP케이블과 광케이블은 이후 표준안에서 중요한 케이블로 계속 등장하므로 Ethernet규격에 따라서 각각의 타입과 거리제한을 명확하게 알아야 합니다. 이제까지 10Mbps Ethernet에서 사용하는 케이블을 정리했습니다. 말이 10Mbps Ethernet에서 사용하는 케이블이지 UTP와 광케이블의 경우에는 주파수만 틀려지고 이후에 등장하는 모든 Ethernet에서 사용됩니다. "
},
{
	"uri": "http://ssanggu.github.io/ch0/ethernet%EC%9D%B4%EB%9E%80/",
	"title": "0.3 Ethernet이란",
	"tags": [],
	"description": "",
	"content": "구성도를 그리면서 Topology가 무엇인지 어떠한 형태로 연결되는구나\u0026hellip;하는식으로 이해가 좀 되었으면 합니다. \n우리가 앞으로 취급할 부분은 LAN이고\u0026hellip;. LAN에서 사용하는 통신규칙중에 Ethernet을 가장많이 다루게 될것입니다.  Ethernet이란 통신을 하고자 하는 PC들을 선으로 연결해야하는데 어떤선으로 어떤방식으로 연결할것인가, 연결된 PC들끼리 통신을 하려고 하면 어떻게 동작을 해서 통신을 할것인가와 같은 규칙을 정의해놓은것이라고 생각하면 됩니다. 제가 Ethernet을 설명할때는 아래와 같이 2가지로 설명하곤합니다.  Ethernet이란 무엇인가? 라는 질문을 받는다면 CSMA/CD방식의 broadcast네트워크이다. 라고 정의할 수 있습니다. CS(Carrier Sense) Ethernet은 케이블을 기본적으로 공유(share)한다는 개념을 가지고 있습니다. 간단히 예를들면 8포트스위치에 8명을 연결했다면 8명이 스위치에 연결되는 메인라인을 공유하는 개념처럼 케이블 하나에 대해서 여러명을 같이쓴다는 개념을 기본적으로 가진다는 얘기입니다. 그렇다면 같이 사용하는 케이블을 내가 점유해서 쓰려면 다른사람이 사용하지 않는지를 알아야 하겠지요?  그래서 필요한것이 CS(Carrier Sense)입니다.  신호를 감지한다는것인 내가 연결된 물리적인 케이블상에 전기신호가 흐른다고 하면 누군가 데이터를 보내고 있는중이라는 얘기가 되는것입니다. 다른사람이 데이터를 보낼때 같이 사용하는 케이블에 나도 데이터를 보내면 안되니깐 케이블상에 전기신호가 없는지를 계속해서 체크하는 동작이 CS입니다. 그렇게 신호를 감지하다가 전기신호가 없으면 그때 내 데이터를 실어서 보내는것입니다. MA(Multiple Access) 동등권한을 줍니다. 같이 공유해서 사용하는 케이블에 A는 이쁘니깐 한 번 더 전기신호를 보낼수 있도록 해주고, B는 못보내게 하고 이렇게 할 수는 없죠? MA는 공유해서 사용하는 케이블을 여러사람이 동등한 권한으로 동시에 접근할 수 있다는 개념입니다. 누구든지 자신의 데이터를 보내기 위해서 공유로 사용하는 케이블을 동시에 접근할 수 있다..이것이 바로 MA의 개념입니다. CD(Collision Detect) 충돌발생. 동등한 권한으로 동시에 접근할 수 있는 권한이 있으니깐\u0026hellip; A라는 사용자가 케이블에 전기신호가 없다는 것을 감지하고 데이터를 실었는데, 동시에 B라는 사용자도 케이블에 전기신호가 없다는 것을 감지하고 데이터를 같이 보냈다고 했을때 두 신호가 일정한 거리를 흐르다가 만나는 지점이 있을것입니다. 이것을 바로 충돌(Colliosion)이라고 합니다. 충돌이 발생하면 네트워크상에 jam신호가 퍼지고 네트워크에 연결된 모든 PC들은 일정시간동안 기다렸다가 다시 CS부터 시작하는 동작을 합니다.  이렇게 말로 설명한 내용이 아래의 그림에서 플로우차트형식으로 설명하고 있읍니다.  Ethernet은 기본적으로 Collision이라는 개념을 포함하는데 오늘날 사용하는 스위치는 collision이 거의 없습니다. 이것은 반이중(half duplex)과 전이중(full duplex)의 개념때문인데, 반이중과 전이중에 대한 개념을 검색해보고 정리해보세요.  자\u0026hellip;물리적인 CSMA/CD방식의 이해가 되었나요?  그러면, 논리적인 부분으로 가서 Broadcast에 대해서 알아보겠습니다. 나중에 IP Address부분을 설명할때 이부분이 다시 언급이 되어야 하니깐 여기서는 주소의 bit가 1로 설정되면 모든 노드들을 의미한다고 정도 이해하면 될듯 합니다. Ethernet에는 기본적으로 통신을 하기 위해서 연결된 모든 PC들에게 보내야하는 정보들이 있습니다. 그럴때 사용하는 방식이 Broadcast\u0026hellip;  통신방식을 얘기하면 broadcast말고 unicast와 multicast방식도 있는데 3가지 통신방식에 대해서 간략하게 개념정리하고 이해해보세요.  본격적으로 케이블로 들어가기 전에 네트워크의 구성형태를 살펴보겠습니다. 구성형태의 변천에서 볼 수 있는것은 사용자 PC에 설치되는 네트워크카드의 발전이 사용자를 취합하는 백본스위치의 속도를 발전시키는 형태로 발전합니다. 변천사에서 보듯이 10Mbps Ethernet에서 출발해서 FDDI, ATM을 잠깐 사용했지만 그 이후로는 속도만 올라가고 모두 Ethernet방식이라는 것을 알 수 있습니다. 앞으로 발전하는것이 속도는 올라가지만 통신방식은 Ethernet입니다. 따라서, Ethernet의 동작원리를 충분히 이해하는 것이 중요합니다. Ethernet은 CSMA/CD방식이고 Broadcast네트워크 입니다.\n"
},
{
	"uri": "http://ssanggu.github.io/ch0/%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%97%B0%EA%B2%B0%EC%A0%95%EC%9D%98/",
	"title": "0.2 물리적인 연결정의",
	"tags": [],
	"description": "",
	"content": " 통신을 하고자 하는 PC의 내부에는 우리에게 보이지는 않지만 논리적인 통신모델이 만들어진다고 생각합시다. 그 통신모델 맨 꼭대기층(응용계층)에서 사용자 어떤 작업을(브라우저로 사이트 연결)수행하면 맨꼭대기층에서부터 차례로 아래층으로 내리는 작업을 수행하고 물리계층까지 도달해서 전기신호로 보내진다는 것입니다.  통신을 하고자하는 PC에는 네트워크에 연결하기 위해서 어떤 장치가 있어야 합니다. 그것이 유선이든 무선이든.. 그러한 장치를 네트워크카드라고 하는데 내 PC에 어떤 종류의 네트워크카드가 설치되어 있는지 확인할 줄 알아야 합니다. 설치된 네트워크카드는 고유한 하드웨어주소(MAC Address)를 가지는데 장치관리자에서 찾은 네트워크카드와 MAC주소를 연관시켜서 이 MAC은 내 PC에 설치된 어떤 네트워크 카드의 주소이다를 알 수 있어야 합니다.   논리적인 통신모델이 만들어진다는것을 알았으니 이번에는 연결하는 물리적인 방법에 대해서 얘기해봅시다. 아래의 그림처럼 통신하는 2대의 노드사이의 일직선으로 그은 직선에 대해서 얘기할것인데요, 그림으로는 그냥 일직선으로 그렸지만 이 부분이 우리가 많이 다루게 될 물리적인 케이블 연결부분입니다.  케이블을 연결하는 방식을 설명할때 토플로지(Topology)라는 용어를 사용하는데 아래의 그림처럼 케이블을 어떠한 형태로 연결하는지 연결방법을 정의한것이라고 보면 됩니다.  이런식으로 연결된 토플로지들이 계속해서 연결되며서 LAN과 WAN을 구성하게 되는데 요즘은 Metro이터넷이 등장하면서 LAN과 WAN의 구분이 거의 없어졌다고 봐야할듯합니다. 어쨌든 아래의 그림처럼 LAN과 EAN을 나누어 본다면 한 기관의 네트워크를 LAN으로 보고 회선사업자가 연결되는 부분부터는 WAN이라고 구분하면 될듯합니다.  우리는 기관의 네트워크를 설계, 구축, 유지관리를 해주기 때문에 LAN에 국한된다고 생각하면 됩니다. LAN에서 사용하는 통신기술은 아래의 그림처럼 몇가지가 있는데 통신기술이라고 하면 물리적으로 어떻게 연결하고 어떤 방식으로 통신을 하는지 정의를 하는것입니다.  현재는 Ethernet방식만 취급하는데 TokenRing, FDDI가 어떤방식으로 연결하고 어떻게 동작하는지 간단한 기본원리만 찾아볼까요?\n"
},
{
	"uri": "http://ssanggu.github.io/ch0/osi-7-layer/",
	"title": "0.1 OSI 7 Layer",
	"tags": [],
	"description": "",
	"content": "PC A와 B간에 통신을 한다고 하면 아래의 그림처럼 각각의 PC상에 우리에 게 보이지 않는 논리적인 7층짜치 스택이 만들어진다고 보면 됩니다. 이것을 OSI 7 Layer Model이라고 하는데, 통신을 하고자 하는 서로간에 통신방법을 정의하고 체크하기 위한 논리적인 모델이라고 생각하면 될듯합니다. 7층짜리 스택의 맨 상단은 응용게층으로 우리가 일반적으로 인터넷을 접근하기 위하여 사용하는 프로그램들이 존재한다고 보면되는데, 가장많이 사용\u0026gt;하는 인터넷브라우저에서 수행되는 작업들이 이 7층에서 발생한다고 생각하며 됩니다. A \u0026ndash;\u0026gt; B한테 통신을 하려고 시도한다고 하면 아래의 그림처럼 보내는 측에서는 보자기로 짐을 싸는 행동(Encapsulation)을 하고, 받는측에서는 보자기 의 짐을 푸는 행동(Decapsulation)을 하게됩니다. A측의 7층에서 브라우저 데이터를 한층한층 아래로 내려보내면서 해당층을 정상적으로 통과했다는 표시를 하면서 짐을 싸는 작업을 수행하고, B측에서 는 1층부터 도착한 데이터의 보자기를 벗겨보면서 한층한층 올려서 7층까지 올리는 작업을 수행하게 됩니다. 이것이 Encapsulation과 Decapsulation입니다. 아래의 그림은 Encapsulation과 Decapsulation에대한 추가적인 설명인데, 데이터가 한층한층 통과할때마다 해당층을 정상적으로 통과했다는것을 데이\u0026gt;터에 헤더와 꼬리를 붙여서 바로 아래층으로 내려보내게됩니다. 그러면 받는측에서는 해당층에 맞는 헤더와 꼬리를 제거하고 데이터부분만 상단으로 \u0026gt;올리게 됩니다. 예를들어서 4층에서 데이터부분에 헤더와 꼬리를 붙여서 3층으로 내려보냈을때는 3층에서 인식하는 데이터부분은 \u0026ldquo;4층헤더+4층데이터+4층꼬리\u0026rdquo;를 통틀어서 3층에서 데이터로 인식하게됩니다. 통신을 하고자하는 서로간에 이러한 논리적인 모델이 만들어진다는 것을 이해했는지요? 우리눈에는 안보이지만 내부적으로 이러한 모델이 만들어져서 통신준비를 한다는 것을 이해해야 합니다. OSI 7 Layer model은 정말로 이론적인 모델이 어서 시장에서는 사용되지 않고 이론을 설명할때만 등장하는 모델입니다. 실제 시장에서(우리가 취급하는 네트워크 장비들)는 TCP/IP Layer model이 \u0026gt;많이 사용되어서 이것이 표준화가 된것입니다. 따라서, 우리가 보는것은 5계층짜리의 TCP/IP Layer Model입니다. 이론적인 모델에서 우리가 취급하는 장비는 아래의 그림과 같이 3개층만 주로 취급합니다. A \u0026ndash;\u0026gt; B로 통신을 하려고 한다면 사람인 우리는 목적지가 B라는 것을 바로 알수가 있지만, 컴퓨터는 내가 통신을 하려고 하는 목적지를 어떻게 판단할 까요? 컴퓨터가 통신을 하고자 하는 목적지 B라는 것을 판단하는 방법은 주소를 사용합니다. 주소라???? 당신의 집주소는? 우리나라에서 당신의 집주소는 유일한 주소인가요? 우리가 사용하는 집주소는 집을 찾아가기 위한 주소이고 우리나라 아니 전세계적으로 유일하겠죠. 마찬가지로 컴퓨터통신에서 사용하는 주소(Address)도 해당 컴퓨터를 찾아가기 위한 집주소라고 생각하면되고, IP Addres와 MAC Address라는 2가지 체계가 있습니다. 물론, IP Address와 MAC Address도 전세계적으로 유일해야합니다. 위의 2가지 주소(IP Address, MAC Address)는 아래의 그림처럼 OSI 7 Layer에서 2,3층에서 해당되는데 해당층에서 목적지를 판단하여 패킷을 만들때 \u0026gt;사용하게됩니다. 3층에서는 IP Address를 사용하는데 목적지에 대한 IP Address를 찾지 못하면 3층을 통과 못하고, 2층에서 목적지의 MAC Address를 \u0026gt;찾지못하면 2층을 통과하지 못합니다. 해당층을 통과하지 못하면 Encapsulation과정이 수행되지 않기 때문에 패킷이 만들어지지 않고 통신이 안되게 \u0026gt;됩니다. "
},
{
	"uri": "http://ssanggu.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://ssanggu.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]