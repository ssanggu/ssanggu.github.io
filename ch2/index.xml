<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EVE-NG LAB on salgunamu&#39;s LAB Blog</title>
    <link>http://ssanggu.github.io/ch2/</link>
    <description>Recent content in EVE-NG LAB on salgunamu&#39;s LAB Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Mon, 11 Mar 2019 22:32:43 +0900</lastBuildDate>
    
	<atom:link href="http://ssanggu.github.io/ch2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.90 OpenvSwitch설치하기</title>
      <link>http://ssanggu.github.io/ch2/2.90-openvswitch%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 24 Apr 2019 17:39:46 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.90-openvswitch%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] 이번 LAB은 이후에 진행할 SDN(소프트웨어 정의 네트워크) LAB을 꾸밀때 이용할 OpenFlow를 지원하는 스위치를 만드는 LAN입니다. 2.48 우분루 리눅스이미지 생성 LAB에서 만들어놓은 우분투 이미지를 사용하여 OpenvSwitch패키지를 생성하여 별도의 리눅스 이미지를 만들것입니다. 
[LAB수행조건]  우선, 아래의 그리처럼 우분투서버를 인터넷연결이 가능하도록 Cloud에 연결해서 시스템을 구동합니다.  OpenvSwitch설치방법은 Debian패키지설치방법을 참조하여 설치하였습니다.  apt-get update apt-get install openvswitch-switch openvswitch-common openvswitch-switch-dpdk openvswitch-vtep   설치가 완료되면 아래와 같이 설치에 대한 확인을 수행합니다.   dpkg -l |grep openvswitch : openvsdwitch패키지들이 정상적으로 설치됨을 확인 systemctl status openvswitch-switch : openvswitch-switch서비스가 정상적으로 구동됨을 확인 ovs-vsctl show : openvswitch의 제어명령을 통해서 버전정보확인으로 정상적인 설치확인   패키지는 정상적으로 설치되었습니다.</description>
    </item>
    
    <item>
      <title>2.89 VxLAN개념익히기-10</title>
      <link>http://ssanggu.github.io/ch2/2.89-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-10/</link>
      <pubDate>Sun, 24 Mar 2019 14:19:09 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.89-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-10/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190318-080046.zip 
[LAB의 목적] 본 LAB은 802.1X인증시험을 VxLAN환경에 적용하여 시험하는 LAB입니다. 
[LAB수행조건]  LAB구성도는 2.87 VxLAN개념익히기-9에서 정의한 LAB에 하단장비만 VPC에서 802.1X를 시험할 수 있는 라즈베리로 변경했으므로 상단 장비들의 설정은 동일하게 설정하면 됩니다. VyOS 백업한 config파일을 load명령으로 다시 넣어주는 명령들이 있으니깐 한번 기존 config를 받아서 넣어보세요. 각동의 메인스위와 지점의 VyOS-FireWall2장비를 벗어나는 트래픽은 모두 VxLAN터널로 통신해야 합니다. freeradius서버의 사용자구성은 아래와 같이 했읍니다.  각동에 연결된 라즈베리파이 시스템에서 등록된 사용자중 임의로 선택해서 wpa_supplicant를 구성하고 시험했을때 해당 사용자가 소속된 VLAN을 할당받고 해당 네트워크의 IP를 부여받아서 인터넷이 되는것을 확인합니다.</description>
    </item>
    
    <item>
      <title>2.88 802.1X인증시험</title>
      <link>http://ssanggu.github.io/ch2/2.88-802.1x%EC%9D%B8%EC%A6%9D%EC%8B%9C%ED%97%98/</link>
      <pubDate>Sun, 24 Mar 2019 14:02:07 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.88-802.1x%EC%9D%B8%EC%A6%9D%EC%8B%9C%ED%97%98/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190314-064256.zip 
[LAB의 목적] VxLAN다음 단계를 진행하기 위해서 기능시험을 위한 LAB올립니다.  사용자들이 자유롭게 위치를 이동하더라도 자신에게 할당받은 고유한 IP주소를 계속 사용하려면 사용자에 대한 신원확인이 필수적입니다. Cisco ISE에서 동작하는 원리는 차후 더 찾아봐야 하겠지만, 현재 환경에서 RADIUS서버와 스위치의 802.1X인증을 통해서 이와 같은 환경을 구성해봅니다. 
[LAB수행조건]  Cisco 3725 Dynamips이미지가 필요합니다. Dynamips이미지를 만드는 과정을 수행했던것으로 기억하는데 이미지가 없다면 자료를 찾아서 가장 먼저 이 이미지를 올려주세요. 현재 LAB환경에서 802.</description>
    </item>
    
    <item>
      <title>2.87 VxLAN개념익히기-9</title>
      <link>http://ssanggu.github.io/ch2/2.87-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-9/</link>
      <pubDate>Sun, 24 Mar 2019 13:56:25 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.87-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-9/</guid>
      <description> [구성도] LAB구성파일: Exports_unetlab_export-20190307-090516.zip 
[LAB의 목적] 본 LAB에서는 각동의 노드들이 IP를 자동으로 할당받도록 네트워크를 구성할때 어떤 장비에서 dhcp relay를 수행해야하는지를 이해하고 정상적으로 IP할당이 이루어지는지를 확인하는 것입니다. 
[LAB수행조건]  구성도는 2.86 VxLAN개념익히기-8에서 사용한 구성도에 DHCP서버를 추가한 것임 모든 VxLAN에 있는 VPC들이 dhcp서버를 통해서 IP를 자동할당 받도록 구성하기 VyOS에서 DHCP서버구성하는 것과 Broder-GW에서 dhcp relay를 설정해주는 것이 필요  </description>
    </item>
    
    <item>
      <title>2.86 VxLAN개념익히기-8</title>
      <link>http://ssanggu.github.io/ch2/2.86-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-8/</link>
      <pubDate>Sun, 24 Mar 2019 13:50:48 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.86-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-8/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190304-060202.zip 
[LAB의 목적] 본 LAB을 설정하면서 언더레이 네트워크와 오버레이 네트워크에 대한 개념이해가 필요합니다. 각동의 단말들은 오버레이 네트워크를 통해서 Broder-GW까지 와서 다른 네트워크와 통신을 수행한다는 것을 이해하시기 바랍니다. 또한, 방화벽이 있을때 VxLAN캡슐화에 사용되는 UDP 포트만 허용되었을때 정상적인 통신이 되는지를 확인하고자 합니다. 
[LAB수행조건]  Border-GW와 A-Dong-Main, B-Dong-Main, C-Dong-Main, 지점의 VyOS-FireWall2장비간에 VxLAN터널링으로 10.0.100.0/24, 10.0.110.0/24, 10.0.120.0/24, 10.0.130.0/24대역이 서로간에 통신이 되고 Cloud0를 통해서 인터넷도 가능하도록 NAT설정도 해보세요. 추가로 VyOS-FireWall과 vyOS-FireWall2에서 VxLAN터널링이 사용하는 8472/UDP포트만 허락하는 방화벽정책을 설정했을때 정상적으로 통신이 되는지도 확인해보세요.</description>
    </item>
    
    <item>
      <title>2.85 VxLAN개념익히기-7</title>
      <link>http://ssanggu.github.io/ch2/2.85-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-7/</link>
      <pubDate>Sun, 24 Mar 2019 13:44:43 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.85-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-7/</guid>
      <description> [구성도] LAB구성파일: Exports_unetlab_export-20190302-172116.zip 
[LAB의 목적] 엔터프라이즈 네트워크환경에서 peer가 한개 이상일때 peer로 설정할 수 없기때문에 multicast address를 사용하여 구성해야한다는 것을 이해하기 위한 LAB입니다. 
[LAB수행조건]  2.84 VxLAN개념익히기-6에서 설정했던 환경에 한개 동을 더 추가해서 확장한 것입니다. 현재 VyOS는 multicast routing을 지원하지 않아서 백본스위치 용도로 Cisco IOL스위치를 넣었습니다. 본 LAB은 VXLAN문서를 참고하여 설정하였습니다.  </description>
    </item>
    
    <item>
      <title>2.84 VxLAN개념익히기-6</title>
      <link>http://ssanggu.github.io/ch2/2.84-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-6/</link>
      <pubDate>Sun, 24 Mar 2019 13:39:11 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.84-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-6/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190302-135452.zip 
[LAB의 목적] 엔터프라이즈 네트워크환경에서 peer가 한개 이상일때 peer로 설정할 수 없기때문에 multicast address를 사용하여 구성해야한다는 것을 이해하기 위한 LAB입니다. 
[LAB수행조건]  VyOS1을 백본스위치로 간주하고, VyOS2는 동의 메인스위치로 생각했을때 둘간에 VxLAN캡슐화로 통신을 하도록 구성하려고 합니다. 기존까지는 VxLAN에 peer를 지정해서 설정을 했을것입니다. VyOS1 백본스위치에서 구성도처럼 동이 한개만 있다면 peer를 사용해도 되지만 여러개의 동이 구성되면 백본스위치입장에서 peer를 어떤것으로 지정을 해야할까요?? 이 고민으로 출발해보니 multicast를 사용해야하는 이유가 나오더군요. 본 LAB은 peer를 사용하지 마시고 multicast group주소를 사용해서 구성해보세요.</description>
    </item>
    
    <item>
      <title>2.83 VxLAN개념익히기-5</title>
      <link>http://ssanggu.github.io/ch2/2.83-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-5/</link>
      <pubDate>Sun, 24 Mar 2019 13:31:37 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.83-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-5/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190226-045111.zip 
[LAB의 목적] 본 LAB은 하단에 시스코 스위치를 연결하여 VLAN과 VxLAN매핑관계를 이해하기 위한 LAB입니다. 
[개념도] 아래의 그림은 VxLAN과 VLAN이 묶이는 개념도입니다. 
[LAB수행조건] 이번 LAB에서는 기존의 구성을 하단 시스코스위치로 VLAN을 확장해보도록 합니다. VyOS에서 trunk로 tagging되는 vlan정보를 인터페이스에 연결해주는 방법을 이해해야합니다. 그리고, 172.16.241.0/24, 172.16.242.0/24대역에 대한 L3라우팅을 SW13스위치에 올렸는데 SW13에서 해야할지 VyOS2에서 해야할지 어떤것이 좋은 방법인지는 고민을 해봐야할듯합니다.</description>
    </item>
    
    <item>
      <title>2.82 VxLAN개념익히기-4</title>
      <link>http://ssanggu.github.io/ch2/2.82-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-4/</link>
      <pubDate>Sun, 24 Mar 2019 13:24:38 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.82-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-4/</guid>
      <description>[구성도] 
[LAB의 목적] 본 LAB은 2.81 VxLAN개념익히기-3에서 설정한 모든 노드들이 인터넷이 되도록 설정하는것이 목적이고, default route정보를 OSPF로 재분재(redistribution)해주는 방법과 VyOS NAT설정에서 특정대역을 배제(exclude)시키는 방법에 대해서 익히기 위함입니다. 
[LAB수행조건]  ISP에 있는 R1라우터에 각 VMWare의 NAT인터페이스를 연결하고 LAB상의 모든 대역이 연결된 인터페이스로 NAT되도록 구성하기 R1에 설정된 default route정보가 OSPF로 모든 라우터에 뿌려지도록 구성하기(이렇게 구성하면 라우팅 테이블에 존재하지 않는 네트워크로 가는 패킷들은 모두 R1으로 오게되므로 인터넷 통신이 가능) 위와같이 구성이 되면 모든 라우터에서는 인터넷으로 통신이 가능하지만 도커에서는 인터넷 통신이 안됨.</description>
    </item>
    
    <item>
      <title>2.81 VxLAN개념익히기-3</title>
      <link>http://ssanggu.github.io/ch2/2.81-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-3/</link>
      <pubDate>Sun, 24 Mar 2019 13:14:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.81-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-3/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190225-093554.zip

[LAB의 목적] 여러개의 L3장비를 통과하더라고 VxLAN UDP 캡슐화를 통해서 떨어져 있는 장비들을 동일대역으로 묶어서 통신할 수 있다는 것을 이해하기 위한 LAB입니다. 
[LAB수행조건] 두대의 VyOS사이에 조금 복잡해보이는 ISP를 한번 구성해볼까요.
여러대의 라우터를 OSPF로 라우팅을 구성해보세요. 구성을 간단히 하기 위해서 OSPF는 area 0에만 연결하도록 구성합니다. 이 LAB의 목적은 여러개의 L3장비를 통과하더라도 VxLAN UDP캡슐화를 통해서 떨어져 있는 장비들을 동일대역으로 묶어서 통신할 수 있다는것을 이해하기 위함입니다. 
통신이 된다면 아래의 사항들을 수행해보세요.</description>
    </item>
    
    <item>
      <title>2.80 VxLAN개념익히기-2</title>
      <link>http://ssanggu.github.io/ch2/2.80-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-2/</link>
      <pubDate>Sun, 24 Mar 2019 13:07:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.80-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-2/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190401-102502.zip

[LAB의 목적] 본 LAB에서는 VxLAN을 사용하기 위해서는 반드시 Multicast를 사용해야 하는가? 에 대한 해답을 찾기위한 LAB입니다. 
[LAB수행조건] 2.79 VxLAN개념익히기-1의 LAB은 잘 풀어보셨나요??
혹시 Multicast를 사용해서 풀었나요? 그렇다면 아래와 같이 직접연결되었던 VyOS라우터를 L2스위치에 연결해서 통신이 가능한지 시험을 한번 해볼까요? L2스위치는 아무 설정도 없이 기본상태로 두어도 통신이 되어야합니다. 왜냐하면 기본 L2스위치는 IGMP snooping이 기본으로 enable되어있기때문에 multicast패킷을 넘겨야 하거든요.  이 시험의 목적은 VxLAN을 사용하기 위해서는 반드시 Multicast를 사용해야하는가?</description>
    </item>
    
    <item>
      <title>2.79 VxLAN개념익히기-1</title>
      <link>http://ssanggu.github.io/ch2/2.79-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-1/</link>
      <pubDate>Sun, 24 Mar 2019 12:59:37 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.79-vxlan%EA%B0%9C%EB%85%90%EC%9D%B5%ED%9E%88%EA%B8%B0-1/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190306-100108.zip

[LAB의 목적] 2대의 VyOS라우터를 바로 연결해서 VxLAN기본통신에 대한 개념이해를 위한 LAB입니다. 
[개념도] 아래의 그림은 물리적인 포트와 bridge-group, VxLAN인터페이스의 관계를 이해하기 위해서 그린 개념도입니다. 
[LAB수행조건]  172.16.241.0/24대역에 정의된 Docker 4,6끼리 정상통신이 되어야 함 172.16.242.0/24대역에 정의된 Docker 5,7끼리 정상통신이 되어야 함 게이트웨이가 없기때문에 서로다른 네트워크간에는 통신이 안됨 VyOS라우터의 eth0인터페이스에서 패킷을 잡아보면 Encapsulation된 데이터만 보여야함 (내부적으로 실제 통신하는 172.16.241이나 172.16.242대역이 안보임)   [LAB구성후기] SDN에 대한 자료를 수집하면서 그 근간이 되는 VxLAN에 대한 개념이해가 가장 먼저인것을 알고서, VxLAN에 대한 개념이해를 위한 LAB을 시작했읍니다.</description>
    </item>
    
    <item>
      <title>2.78 VyOS라우터 사용법</title>
      <link>http://ssanggu.github.io/ch2/2.78-vyos%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Sun, 24 Mar 2019 12:47:57 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.78-vyos%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>[구성도] 
[LAB의 목적] 본 LAB은 앞으로 진행할 VxLAN에 대한 개념잡기에서 VyOS장비를 사용할 예정이므로 이 장비에 대한 사용법을 익히기 위하여 만든 LAB입니다. 구성도의 환경을 설정하면서 VyOS를 자유롭게 다룰 수 있도록 요구하는 조건말고도 여러가지 설정들을 해보면서 VyOS에 대하여 익숙해지기 바랍니다. 
[LAB수행조건]  VyOS 1.1.8이미지 등록하기  기존에 우리는 VyOS 1.1.7버전을 EVE-NG에 올린적이 있습니다. 1.1.7버전도 VxLAN기능을 지원하는데 최근 버전이 1.1.8버전을 사용할 예정입니다. HowTo add VyOS Vytta 문서를 참고하여 1.1.8이미지를 설치 다운로드할 이미지는 vyos-1.</description>
    </item>
    
    <item>
      <title>2.77 MF2의 이중화회선구성</title>
      <link>http://ssanggu.github.io/ch2/2.77-mf2%EC%9D%98-%EC%9D%B4%EC%A4%91%ED%99%94%ED%9A%8C%EC%84%A0%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sun, 24 Mar 2019 12:38:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.77-mf2%EC%9D%98-%EC%9D%B4%EC%A4%91%ED%99%94%ED%9A%8C%EC%84%A0%EA%B5%AC%EC%84%B1/</guid>
      <description> [구성도] LAB구성파일: Exports_unetlab_export-20190308-035942.zip 
[LAB의 목적] 본 LAB은 MF2방화벽으로 본점과 지점이 IPSec VPN통신을 사용중인데, 회선을 두개 사용중인 Weno_MF2지점방화벽에서 eth1을 주회선으로 IPSec통신을 하다가 회선에 장애가 발생하면 자동으로 eth0 보조회선으로 통신하도록 구성하는 LAB입니다. 
[LAB수행조건]  구성도에 따라서 장비를 설정 본점장비(Center_MF2)와 지점장비(Weno_MF2, Jeju_MF2)간에 IPSec VPN Site-to-Site설정구성 정상적인 통신상태 확인하기 Weno_MF2지점방화벽에서 패킷을 캡처해서 eth1으로 ESP패킷을 주고받는지 확인하기 Weno_MF2지점방화벽에서 eth1인터페이스를 down시키고 IPSec VPN통신이 정상적으로 eth0인터페이스를 통해서 통신되는지 확인하기  </description>
    </item>
    
    <item>
      <title>2.76 MF2의 NAT-IPSec</title>
      <link>http://ssanggu.github.io/ch2/2.76-mf2%EC%9D%98-nat-ipsec/</link>
      <pubDate>Sun, 24 Mar 2019 12:32:02 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.76-mf2%EC%9D%98-nat-ipsec/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190227-091015.zip 
[LAB의 목적] 본 LAB은 MF2의 NAT설정과 IPSec VPN설정관계를 이해하기 위한 것으로, 출발지 IP를 보이지않도록 하기 위하여 출발지 IP를 NAT로 변환한후에 IPSec VPN터널을 사용하도록 설정하는 LAB입니다. 
[LAB수행조건]  PC1(10.10.10.1)에서 ping 200.200.200.1을 수행하면 출발지 IP가 100.100.100.1로 변경되어서 IPSEC터널을 통과하여 20.20.20.1과 통신이 되어야 함 PC2(20.20.20.1)에서 ping 100.100.100.1을 수행하면 출발지 IP가 200.200.200.1로 변경되어서 IPSEC터널을 통과하여 10.10.10.1과 통신이 되어야 함 위의 구성을 성공하였다면 각각의 MF2방화벽에서 default게이트웨이를 제거하고 필요한 네트워크만 라우팅을 설정하여 동일하게 통신이 되도록 구성해보세요.</description>
    </item>
    
    <item>
      <title>2.75 MF2의 802.1Q Trunk</title>
      <link>http://ssanggu.github.io/ch2/2.75-mf2%EC%9D%98-802.1q-trunk/</link>
      <pubDate>Sun, 24 Mar 2019 11:37:26 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.75-mf2%EC%9D%98-802.1q-trunk/</guid>
      <description>[변경전 구성도] LAB구성파일: Exports_unetlab_export-20181213-092218.zip 
[변경후 구성도] 
[LAB의 목적] 본 LAB은 MF2방화벽과 시스코 스위치로 구성된 단일 VLAN환경을 다중 VLAN을 사용할 수 있도록 802.1Q Trunk네트워크로 재설정하는 LAB입니다. 단, 모든 작업을 원격지에서 수행한다는 조건을 붙입니다. 따라서, 네트워크 변경후에 모든 장비들이 정상적으로 연결되어야하므로 네트워크 설정시에 재연결에 대한 고려를 충분히 생각해야 합니다.
[LAB수행조건]  변경전 구성도에 맞추어서 네트워크를 구성하고 모든 장비들이 정상적으로 통신되도록 구성하기 정상적인 통신환경을 확인후에 아래의 조건을 수행하면서 네트워크를 변경하기 VPC5를 VLAN109로 분리 VLAN109, VLAN110에 대한 L3인터페이스를 MF2방화벽에 생성 모든 작업은 원격지에서 설정하기 때문에 콘솔 연결말고 ssh로 연결해서 설정하기   Cisco reload명령어를 이용한 자동 재실행  원격지에 있는 스위치 장비를 설정하던 중에 장비설정이 잘못되어 ssh 또는 telnet연결이 안되는 경우를 대비하여 정해진 시간에 재부팅하여 장비설정이 원래대로 되돌라 가도록 하는 방법.</description>
    </item>
    
    <item>
      <title>2.74 MF2의 IPSec VPN</title>
      <link>http://ssanggu.github.io/ch2/2.74-mf2%EC%9D%98-ipsec-vpn/</link>
      <pubDate>Sun, 24 Mar 2019 11:22:16 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.74-mf2%EC%9D%98-ipsec-vpn/</guid>
      <description>[구성도] 
[LAB의 목적] 본 LAB은 MF2의 라우트모드와 브리지모드를 이해하고, 라우트모드로 동작하는 방화벽과 브리지모드로 동작하는 방화벽간에 IPSec VPN을 구성하여 Site-to-Site VPN구성을 수행하는 LAB입니다. 
[LAB수행조건] LAB을 구성하기전에는 서로 다른 모드간에 당연히 IPSec VPN 터널 구성이 안될것이라고 생각했지만 LAB을 구성하고 시험을 진행해보니 정상적으로 구성이 되었습니다. MF2방화벽에서 두개의 인터페이스를 브리지로 구성하고 br0를 설정할때 해당 인터페이스가 L3모드여서 가능한 것 같습니다. 그냥 L2관리용도면 안될것 같은데 무조건 L3인터페이스로 활성화 됩니다.
  MF2-9117방화벽은 라우트모드로 설정 MF2-4869방화벽은 브리지모드로 설정 R2, R5라우터에는 default route를 설정하지마시고 필요한 네트워크만 설정해주세요.</description>
    </item>
    
    <item>
      <title>2.73 라즈베리파이 qemu이미지</title>
      <link>http://ssanggu.github.io/ch2/2.73-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/</link>
      <pubDate>Sat, 23 Mar 2019 19:10:04 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.73-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/</guid>
      <description>라즈베리파이 데스크톱 OS가 나와서 LAB상에서 사용할 수 있도록 qemu이미지를 생성하여 공유합니다. 불필요한 패키지를 제거했고, 한글언어설정하고 SSH가 연결 가능하도록 설정한 이미지 입니다. 계정은 pi / 12345 로 설정했읍니다.
 가상화 이미지 받기 압축해제하기 업로드한 파일을 아래의 그림처럼 압축해제하여 권한을 수정해줍니다.  LAB상에서 사용하기 LAB에 등록하여 구동하면 아래와 같이 라즈베리파이 데스크톱 OS를 사용할 수 있습니다.   </description>
    </item>
    
    <item>
      <title>2.72 Lubuntu qemu이미지</title>
      <link>http://ssanggu.github.io/ch2/2.72-lubuntu-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/</link>
      <pubDate>Sat, 23 Mar 2019 19:02:05 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.72-lubuntu-qemu%EC%9D%B4%EB%AF%B8%EC%A7%80/</guid>
      <description>LAB상에서 브라우저를 사용할 필요가 있어서 조금 가벼운 Lubuntu 17.10으로 qemu이미지를 생성하고 Firefox브라우저에 Adobe Flash player를 설치하여 이미지를 만들었습니다.
 Lubuntu 가상화 이미지받기
 디렉토리 생성하기
  # cd /opt/unetlab/addons/qemu/ # mkdir linux-lubuntu-17.10.1 # cd linux-lubuntu-17.10.1   압축해제하기 업로드한 파일을 생성한 디렉토리로 이동해서 업축해제하고 md5값 체크후에 이상없으면 zip파일 삭제  # unzip Lubuntu-hda.zip Archive: Lubuntu-hda.zip inflating: hda.qcow2 # md5sum hda.qcow2 d001c8cac8c46bcd28ddebcd2eacf642 hda.qcow2 # rm Lubuntu-hda.zip   장비등록 Lab상에 장비등록하여 사용하면 아래와 같이 Firefox브라우저 구동해서 MF2장비 연결이 가능합니다.</description>
    </item>
    
    <item>
      <title>2.71 MF2-IOS IPSec터널</title>
      <link>http://ssanggu.github.io/ch2/2.71-mf2-ios-ipsec%ED%84%B0%EB%84%90/</link>
      <pubDate>Sat, 23 Mar 2019 18:45:29 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.71-mf2-ios-ipsec%ED%84%B0%EB%84%90/</guid>
      <description>[구성도] LAB구성파일: Exports_unetlab_export-20190323-105009.zip
[LAB의 목적] 본 LAB은 SECUI MF2방화벽과 Cisco IOS라우터간에 IPSec VPN Site-to-Site터널을 구성하는 LAB입니다.</description>
    </item>
    
    <item>
      <title>2.70 MF2 HA구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.70-mf2-ha%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 18:39:26 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.70-mf2-ha%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] [LAB의 목적] 본 LAB은 SECUI MF2방화벽장비에 대한 HA이중화시험을 위한 LAB입니다.
 [HA구성화면]  [가상IP구성화면]   </description>
    </item>
    
    <item>
      <title>2.69 SECUI MF2방화벽</title>
      <link>http://ssanggu.github.io/ch2/2.69-secui-mf2%EB%B0%A9%ED%99%94%EB%B2%BD/</link>
      <pubDate>Sat, 23 Mar 2019 18:33:52 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.69-secui-mf2%EB%B0%A9%ED%99%94%EB%B2%BD/</guid>
      <description>[구성도] [LAB의 목적] 본 LAB은 SECUI MF2방화벽장비를 가상화 장비로 만들어서 LAB상에서 이용할 수 있도록 시험한 LAB입니다. 장비이미지를 만들면서 dd명령으로 이미지를 덤프하여 qcow2가상화 이미지로 변환하여 올리는 작업에 대한 이해가 필요합니다.</description>
    </item>
    
    <item>
      <title>2.68 라우터를 통한 단일VLAN</title>
      <link>http://ssanggu.github.io/ch2/2.68-%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8B%A8%EC%9D%BCvlan/</link>
      <pubDate>Sat, 23 Mar 2019 18:26:08 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.68-%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8B%A8%EC%9D%BCvlan/</guid>
      <description>[구성도] [LAB의 목적] L3라우터로 연결된 2개의 스위치에 설정된 VLAN이 라우터를 통해서 통신이 가능하도록 하는 시험을 위하여 구성한 LAB입니다. ISP망에서 L2스위치 트렁크를 지원해주는 경우에 지점에 설치된 라우터를 통해서 본사의 백본스위치에 설정된 VLAN과 통신을 하고자 하는 목적입니다.</description>
    </item>
    
    <item>
      <title>2.67 HSRP 및 STP환경시험</title>
      <link>http://ssanggu.github.io/ch2/2.67-hsrp-%EB%B0%8F-stp%ED%99%98%EA%B2%BD%EC%8B%9C%ED%97%98/</link>
      <pubDate>Sat, 23 Mar 2019 18:20:06 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.67-hsrp-%EB%B0%8F-stp%ED%99%98%EA%B2%BD%EC%8B%9C%ED%97%98/</guid>
      <description>[구성도] [LAB의 목적] 본 LAB은 서버팜에 추가적인 타벤더 스위치를 연결하면서 Spanning Tree이슈가 발생해서 STP시험을 해보고자 LAB을 구성합니다. 아래와 같이 vIOS L2이미지로 구성을 만들고 HSRP와 STP시험을 할 수 있읍니다. 기본 통신만 되도록 구성하고 STP의 priority, path cost값등을 변경해서 첨부문서의 내용과 비교해서 어떤 포트가 Block되는지 많은 시험을 해보세요. STP(Spanning-Tree Protocol)에 대한 많은 이해를 가졌으면 합니다.
  Attachments   1-Switch1의기본정보.txt  (5 ko)   2-Switch2의기본정보.txt  (5 ko)   3-Switch3의기본정보.</description>
    </item>
    
    <item>
      <title>2.66 Cisco IOSXrv이미지</title>
      <link>http://ssanggu.github.io/ch2/2.66-cisco-iosxrv%EC%9D%B4%EB%AF%B8%EC%A7%80/</link>
      <pubDate>Sat, 23 Mar 2019 18:11:01 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.66-cisco-iosxrv%EC%9D%B4%EB%AF%B8%EC%A7%80/</guid>
      <description>[LAB의 목적] 본 LAB은 Cisco IOSXrv이미지를 추가하여 LAB상에서 스위치를 사용할 수 있도록 준비하는 LAB입니다.
[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법
 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 867M drwxr-xr-x 2 sghan sghan 4.0K Jan 4 09:22 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 867M Jan 4 09:24 iosxrv-k9-demo-6.0.1.qcow2   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 xrv-로 시작되어야 함.</description>
    </item>
    
    <item>
      <title>2.65 Cisco vIOS L2이미지</title>
      <link>http://ssanggu.github.io/ch2/2.65-cisco-vios-l2%EC%9D%B4%EB%AF%B8%EC%A7%80/</link>
      <pubDate>Sat, 23 Mar 2019 18:00:13 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.65-cisco-vios-l2%EC%9D%B4%EB%AF%B8%EC%A7%80/</guid>
      <description>[LAB의 목적] 본 LAB은 Cisco vIOS L2이미지를 추가하여 LAB상애서 L2스위치를 사용할 수 있도록 준비하는 LAB입니다.
[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법
 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 93M drwxr-xr-x 2 sghan sghan 4.0K Jan 3 10:53 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 93M Jan 3 10:48 vios_l2-adventerprisek9-m.vmdk.SSA.152-4.0.55.E   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 viosl2-로 시작되어야 함.</description>
    </item>
    
    <item>
      <title>2.64 Cisco vIOS L3이미지</title>
      <link>http://ssanggu.github.io/ch2/2.64-cisco-vios-l3%EC%9D%B4%EB%AF%B8%EC%A7%80/</link>
      <pubDate>Sat, 23 Mar 2019 17:53:04 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.64-cisco-vios-l3%EC%9D%B4%EB%AF%B8%EC%A7%80/</guid>
      <description>[LAB의 목적] 본 LAB은 Cisco vIOS L3이미지를 추가하여 LAB상애서 L3라우터를 사용할 수 있도록 준비하는 LAB입니다.
[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법
 다운로드한 이미지파일을 eve-ng서버에 업로드하기  root@eve-ng:/home/sghan/temp# ls -alh total 215M drwxr-xr-x 2 sghan sghan 4.0K Jan 3 10:48 . drwxr-xr-x 4 sghan sghan 4.0K Oct 21 10:13 .. -rw-rw-r-- 1 sghan sghan 123M Jan 3 10:49 vios-adventerprisek9-m.vmdk.SPA.156-2.T   가상화 이미지 디렉토리에 디렉토리 생성. 디렉토리 이름은 vios-로 시작되어야 함.</description>
    </item>
    
    <item>
      <title>2.63 Cisco NXOS이미지추가</title>
      <link>http://ssanggu.github.io/ch2/2.63-cisco-nxos%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80/</link>
      <pubDate>Sat, 23 Mar 2019 17:41:41 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.63-cisco-nxos%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80/</guid>
      <description>[LAB의 목적] Cisco Nexus시리즈에서 사용하는 NXOS를 다루어 보기위한 LAB입니다. 최근에 나온 Cisco NXOS9k이미지는 2CPU에 8G메모리를 필요로 하기때문에 LAB상에서 운영은 어려울것 같읍니다. 버전 7대를 이용하여 NXOS를 이해해보기로 합니다.
[LAB 수행조건]  이미지 다운로드하기 이미지 추가하는 방법
 NXOS에 대한 가상화 디렉토리 생성하기. NSOX v9이전의 버전들은 디렉토리명을 titanium-으로 만들어야 함 root@eve-ng:/opt/unetlab/addons/qemu# mkdir titanium-7.3.0.D1.1 생성한 디렉토리로 이동하여 서버에 업로드한 이미지를 해당 디렉토리로 이동함. 파일을 이동할때 이미지의 이름을 변경. qcow2앞에 hda나 virtio로 주는것은 디스크의 종류를 나타내는 이름임.</description>
    </item>
    
    <item>
      <title>2.62 ASAv이미지추가하기</title>
      <link>http://ssanggu.github.io/ch2/2.62-asav%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 17:36:57 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.62-asav%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description> [LAB의 목적] LAB상에서 Cisco ASAv장비를 사용하기 위하여 이미지를 준비하는 LAB입니다.
[LAB 수행조건]  Cisco ASAv 9.5.2이미지 받기 이미지가 qemu가상화 이미지로 제공되기때문에 이미지를 마운트해서 텍스트콘솔로 출력되도록 수정하고 바로 사용하는 방법입니다.  LAB상에서 ASAv장비 추가하고 관리콘솔 연결화면   </description>
    </item>
    
    <item>
      <title>2.61 팔로알토방화벽 이해하기</title>
      <link>http://ssanggu.github.io/ch2/2.61-%ED%8C%94%EB%A1%9C%EC%95%8C%ED%86%A0%EB%B0%A9%ED%99%94%EB%B2%BD-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 17:21:16 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.61-%ED%8C%94%EB%A1%9C%EC%95%8C%ED%86%A0%EB%B0%A9%ED%99%94%EB%B2%BD-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] [LAB의 목적] 본 LAB은 요즘 대세인 차세대 팔로알토방화벽을 이해하기 위한 LAB입니다. 팔로알토방화벽은 라이선스가 들어가야하는데 LAB이므로 라이선스를 구하지 못함. 라이선스 입력하지 않은 상태에서 초기 200개 세션에 대해서 시험을 해볼 수 있다고 합니다. 구성도의 LAB을 구성하고 보안정책과 NAT기능을 설정해서 시험하는것을 진행하면서 방화벽의 기능을 이해해보면 될것 같읍니다.
[LAB 수행조건]  팔로알토방화벽 OVA이미지를 받아서 EVE-NG에 이미미 넣어주기. 첨부파일 HowTo add Palo Alto.pdf문서에서 첫번째 ova파일로 이미지 넣는 방법을 사용하면 됩니다. 관리포트 설정하고 WebUI연결하기 설정을 WebUI를 통해서 설정해야하므로 관리포트를 자신의 VMWare사설인터페이스에 WebUI연결하기 첨부문서 Initial_Configuration-4.</description>
    </item>
    
    <item>
      <title>2.60 WCCP와 SQUID캐시서버</title>
      <link>http://ssanggu.github.io/ch2/2.60-wccp%EC%99%80squid%EC%BA%90%EC%8B%9C%EC%84%9C%EB%B2%84/</link>
      <pubDate>Sat, 23 Mar 2019 17:11:40 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.60-wccp%EC%99%80squid%EC%BA%90%EC%8B%9C%EC%84%9C%EB%B2%84/</guid>
      <description>[구성도] [LAB의 목적] 본 LAB은 wccp프로토콜을 사용하여 사용자의 http, https연결을 캐시서버로 보내서 캐시를 참조하도록 만들어보는 LAB입니다. squid서버를 구성하여 캐시서버 기능을 수행하도록 하였고, Cisco IOS라우터에서 wccp프로토콜을 설정하는 방법에 대한 이해가 필요합니다.
[LAB 수행조건]  wccp프로토콜을 사용하면 사용자의 http, https연결을 캐시서버로 보내서 캐시를 참조하도록 만들수 있는 기능입니다. 프록시서버를 사용하면 되는데 굳이 wccp를 왜 사용하는지 의문을 가졌는데 시험을 하는 동안 이유를 알게 되었습니다. 그냥 프록시서버를 구성하면 사용자의 브라우저마다 프록시설정을 해주어야하는데 클라이언트들이 거치는 라우터에 wccp를 설정하면 클라이언트의 설정 필요없이 트래픽을 가로채서 캐시서버로 보내는 기능을 해줍니다.</description>
    </item>
    
    <item>
      <title>2.59 GRE터널 구성하기-2</title>
      <link>http://ssanggu.github.io/ch2/2.59-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-2/</link>
      <pubDate>Sat, 23 Mar 2019 16:57:56 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.59-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-2/</guid>
      <description> [구성도] [LAB의 목적] 본 LAB은 Cisco IOS라우터와 리눅스간에 GRE터널을 구성해보는 LAB입니다.
[LAB 수행조건]  Linux머신의 인터페이스 구성입니다. 파일을 수정하지마시고 수동으로 IP를 입력하는 방식으로 테스트를 진행해보세요.  Linux머신의 라우팅테이블입니다. 리눅스에서 두개 인터페이스간에 라우팅을 하기 위해서는 ip_forward값 조정이 필요합니다.  GRE터널을 구성하기 위해서 사용했던 명령어입니다.   </description>
    </item>
    
    <item>
      <title>2.58 GRE터널 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.58-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 16:43:17 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.58-gre%ED%84%B0%EB%84%90-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] [LAB의 목적] 본 LAB은 Cisco IOS라우터간에 GRE터널을 구성해보는 LAB입니다. 구성도에 따라서 R5와 R6라우터간에 GRE터널을 구성해보세요.
[LAB 수행조건]  R4, R5, R6라우터에 default route를 설정하지 마시고 아래와 같이 인접한 네트워크에 대한 라우팅만 설정해주세요. GRE터널을 구성하기전에 VPC들이 속한 네트워크들은 라우팅테이블에 없기때문에 서로간에 통신이 안됩니다. 터널을 구성하고 VPC네트워크들은 터널 인터페이스를 통해서 라우팅을 잡아주면 GRE터널을 통해서 통신이 가능하도록 만드는것입니다.  터널을 통해서 VPC시스템이 서로간에 통신하는 화면입니다.   </description>
    </item>
    
    <item>
      <title>2.57 익스트림장비 이미지 컨버팅</title>
      <link>http://ssanggu.github.io/ch2/2.57-%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9E%A5%EB%B9%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%8C%85/</link>
      <pubDate>Sat, 23 Mar 2019 16:34:18 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.57-%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9E%A5%EB%B9%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%8C%85/</guid>
      <description> [구성도] LAB구성파일: Exports-unetlab_export-20171017-114907.zip
[LAB의 목적] 본 LAB은 LAB에서 활용할 익스트림장비를 준비하는 LAB입니다. V22.xx버전은 통신이 안되는 문제가 발생하여 V16이미지로 구성하였습니다.
[LAB 수행조건]  이미지 버전받기: ISO설치경로에서 GNS3를 qcow2이미지를 받으면 됩니다. 이미지 디렉토리 생성하기
root@eve-ng:/home/sghan/temp# cd /opt/unetlab/addons/qemu/ root@eve-ng:/opt/unetlab/addons/qemu# mkdir extremexos-16.1.1.4 root@eve-ng:/opt/unetlab/addons/qemu# cd extremexos-16.1.1.4  이미지 변환하기
root@eve-ng:/opt/unetlab/addons/qemu/extremexos-16.1.1.4# qemu-img convert -c -O qcow2 ~sghan/temp/EXOS-VM_v16.1.1.4-disk1.qcow2 hda.qcow2  퍼미션변경하기
root@eve-ng:/opt/unetlab/addons/qemu/extremexos-16.1.1.4# /opt/unetlab/wrappers/unl_wrapper -a fixpermissions   </description>
    </item>
    
    <item>
      <title>2.56 PBR설정해보기</title>
      <link>http://ssanggu.github.io/ch2/2.56-pbr%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 16:25:05 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.56-pbr%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid>
      <description> [구성도] [LAB의 목적] 모든 통신이 목적지(destination)에 대한 라우팅을 기반으로 이루어지는데, 때로는 출발지를 기준으로 라우팅을 수행하길 원하는 경우가 발생합니다. 그런경우에 사용하는것이 PBR(Policy Based Routing)이고, 본 LAB은 PBR기능을 시험하기 위한 LAB입니다.
[LAB 수행조건]  VLAN 10 (10.10.10.0/24) 네트워크 대역은 VM 네트워크를 통해 통신하도록 설정 (NAT사용) VLAN 172(172.16.10.0/24) 네트워크 대역은 회사 네트워크를 통해 통신하도록 설정 (NAT사용) docker13와 docker14간에 서로 통신되도록 설정  </description>
    </item>
    
    <item>
      <title>2.55 RemixOS를 사용하기</title>
      <link>http://ssanggu.github.io/ch2/2.55-remixos%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 16:13:40 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.55-remixos%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] LAB에서 윈도우환경을 사용할 수 있도록 하기 위해서 찾아보다가 RemixOS(PC에서 안드로이드를 사용할 수 있도록 만든 OS)를 선택했는데 가볍지 않은것 같습니다. 일단은 PC에서 안드로이드를 테스트해볼 수 있다는 의미도 있으므로 설치한번 해보세요.
[LAB 수행조건] EVE-NG에서 직접 가상머신을 만들려고 했지만 설치를 실패해서 아래와 같은 방법으로 구성했습니다.  1. 윈도우 VMWare에서 RemixOS를 설치하여 PC에서 RemixOS를 사용할 수 있는 환경을 구성 2. PC의 설치된 vmdk파일을 EVE-NG로 가져감 3. EVE-NG에서 vmdk파일을 qcow2파일로 변환해서 사용</description>
    </item>
    
    <item>
      <title>2.54 SSH를 통해서 파티션마운트</title>
      <link>http://ssanggu.github.io/ch2/2.54-ssh%EB%A5%BC-%ED%86%B5%ED%95%B4%EC%84%9C-%ED%8C%8C%ED%8B%B0%EC%85%98%EB%A7%88%EC%9A%B4%ED%8A%B8/</link>
      <pubDate>Sat, 23 Mar 2019 15:57:25 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.54-ssh%EB%A5%BC-%ED%86%B5%ED%95%B4%EC%84%9C-%ED%8C%8C%ED%8B%B0%EC%85%98%EB%A7%88%EC%9A%B4%ED%8A%B8/</guid>
      <description>[구성도] LAB구성파일: Exports-unetlab_export-20170831-115104.zip

[LAB의 목적] 리눅스에서 다른 시스템의 파티션을 SSH를 통해서 마운트해서 사용하는 SSHFS를 시험하는 LAB입니다.
[LAB 수행조건]  구성도처럼 네트워크를 구성을 완료하기 모든 도커시스템이 인터넷이 되고 SSH서버가 구동되도록 설정하기 SSH-Server6은 라우터에서 static NAT로 포트번호 20022로 연결되도록 구성 도커시스템 서로간에 ssh연결이 되는지 확인 SSH-Server4서버에 SSH-Server5,6의 /data디렉토리를 SSHFS를 통해서 마운트할것  리눅스에서 SSHFS파일시스템을 사용하려면 FUSE모듈이 지원되어야합니다. FUSE는 유닉스계열 OS에서 적재하는 커널모듈로 Filesystem in Userspace의 약자임. FUSE를 이용하면 컴퓨터에 OS와 같은 권한이 아닌 사용자가 커널을 건드리지않고 자신의 파일시스템을 만들수 있읍니다.</description>
    </item>
    
    <item>
      <title>2.53 Snort IDS환경구성</title>
      <link>http://ssanggu.github.io/ch2/2.53-snort-ids%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 23 Mar 2019 14:23:15 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.53-snort-ids%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] LAB구성파일: Exports-unetlab_export-20170829-101155.zip

[LAB의 목적] 본 LAB은 우분투 리눅스머신에 공개용 Snort IDS를 구축하고 도커시스템에서 스캔이나 공격등을 수행했을때 탐지되는 상황을 보기위한 LAB입니다.
구성도 처럼 환경을 꾸며보세요. R1라우터의 NAT기능을 통해서 LAB안의 도커나 linux시스템이 인터넷 접근이 가능해야합니다. 패키지를 설치해야하기때문에요.. Snort가 설치되는 linux는 도커시스템이 아니고 지난번에 생성한 우분투 리눅스시스템으로 하고, 이더넷 카드 하나를 더 추가해야합니다. 리눅스머신이 서로 다른 2개의 네트워크에 패킷을 전달하기 위해서는 라우팅모드로 만들어야합니다 (ip_forward값설정)  첨부 pdf문서는 우분투에 snort를 설치하는 메뉴얼입니다.</description>
    </item>
    
    <item>
      <title>2.52 Ostinato 트래픽생성기 사용</title>
      <link>http://ssanggu.github.io/ch2/2.52-ostinato-%ED%8A%B8%EB%9E%98%ED%94%BD%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Sat, 23 Mar 2019 14:06:50 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.52-ostinato-%ED%8A%B8%EB%9E%98%ED%94%BD%EC%83%9D%EC%84%B1%EA%B8%B0-%EC%82%AC%EC%9A%A9/</guid>
      <description>[구성도] LAB구성파일: Exports-unetlab_export-20170829-033356.zip

[LAB의 목적] LAB상이나 실제 네트워크상에서 다양한 시험을 위해서 트래픽생성기가 필요할 경우가 있습니다.  예를들면 A에서 B로 SSH연결에 대한 트래픽을 만든다던지 등등&amp;hellip; 이렇게 사용자가 원하는 트래픽을 생성해서 시험을 할때 사용하는 Traffic Generator로 eve-ng에서 오픈소스 Ostinato를 지원합니다. Ostinato는 dron(에이전트)과 제어시스템으로 나누어집니다. LAB상에 위치하는 Ostinato는 에이전트 역할을 하는 drone들로서 제어시스템의 설정값을 받아서 실제 패킷을 생성하는 시스템입니다. 제어프로그램은 윈도우용이므로 자신의 윈도우 시스템에서 LAB에 있는 drone이 연결될 수 있도록 LAB을 구성해야합니다.</description>
    </item>
    
    <item>
      <title>2.51 ASA와 IOS간 L2L VPN설정</title>
      <link>http://ssanggu.github.io/ch2/2.51-asa%EC%99%80ios%EA%B0%84-l2l-vpn/</link>
      <pubDate>Sat, 23 Mar 2019 13:59:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.51-asa%EC%99%80ios%EA%B0%84-l2l-vpn/</guid>
      <description> [구성도] 
[LAB의 목적] Site-to-Site VPN은 가능한 다양한 장비간의 연동을 수행해보는것이 좋은것 같습니다. 본 LAB은 Cisco ASA장비와 IOS라우터간에 Site-to-Site VPN을 구성하여 연동시험하는 LAB입니다. ASA 8.4버전의 경우와 8.2버전의 IPSec VPN구성방식이 다른것 같습니다. 첨부문서를 확인하고 구성을 진행해보세요.
  Attachments   Cisco ASA84 to PIX6x site to site VPN.pdf  (86 ko)    </description>
    </item>
    
    <item>
      <title>2.50 OpenVPN으로 L2L VPN구성</title>
      <link>http://ssanggu.github.io/ch2/2.50-openvpn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-site-to-site-vp%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 23 Mar 2019 13:52:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.50-openvpn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-site-to-site-vp%EA%B5%AC%EC%84%B1/</guid>
      <description> [구성도] 
[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN에 대해서 신경쓰지 않고 암호화된 통신을 사용할 수 있도록 합니다. OpenVPN을 이용하여 Site-to-Site VPN을 구성하는 것이 가능합니다. LAB구성도처럼 떨어져있는 2개의 지점을 OpenVPN시스템을 통해서 Site-to-Site VPN으로 구성하여 두지점의 내부네트워크들이 VPN터널을 통해서 암호화 통신이 되도록 구성하는 LAB입니다.

[LAB수행조건]  VPN터널을 통해서 두지점간의 통신이 완료되었다면 172.16.10.0/24대역의 시스템들이 모든 통신을 본점의 OpenVPN서버를 통해서 통신이 되도록 구성하려면 어떻게 할까요?  </description>
    </item>
    
    <item>
      <title>2.49 OpenVPN서버 구축하기</title>
      <link>http://ssanggu.github.io/ch2/2.49-openvpn%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 13:38:48 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.49-openvpn%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] OpenVPN서버는 SSLVPN기반이기때문에 OpenVPN으로 VPN서버를 구축해보면 상용으로 판매되는 SSL VPN장비의 동작원리를 이해할 수 있습니다. 
자신의 VMWare NAT인터페이스에 연결되는 라우터와 라우터 내부에 스위치와 앞서 설치한 우분투서버, 테스트시스템 한대를 연결하는 LAB을 구성해서 LAB상의 장비에서 인터넷이 되도록 구성한 후에 아래의 링크를 참고해서 우분투서버에 OpenVPN서버를 구성해보세요.
 Setting Up An OpenVPN Server on the Raspberry Pi OpenVPN을 이용한 VPN 환경 구축  
[LAB수행조건]  LAB상의 우분투서버에 OpenVPN서버가 구성되면 PC에 OpenVPN클라이언트 프로그램을 받아서 설치하고 클라이언트 프로그램에 배포해주는 클라이언트 구성파일 만들기 (*.</description>
    </item>
    
    <item>
      <title>2.48 우분투 리눅스이미지 생성</title>
      <link>http://ssanggu.github.io/ch2/2.48-%EC%9A%B0%EB%B6%84%ED%88%AC-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Sat, 23 Mar 2019 13:31:46 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.48-%EC%9A%B0%EB%B6%84%ED%88%AC-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/</guid>
      <description>[LAB의 목적] 이번 LAB은 다음에 이어질 OpenVPN서버를 구축하기 위해서 우분투 리눅스 이미지를 생성하는 LAB입니다. 
이제까지 Docker시스템을 많이 활용했는데 VPN서버구축과 같은 작업은 네트워크 디바이스를 접근해야하는 권한 문제등으로 Docker에서 실행하는것을 성공하지 못했읍니다. 그래서 실제적인 리눅스시스템이 필요해서 많이 사용중인 우분투 리눅스이미지를 생성하기로 했읍니다.

[LAB수행조건] Docker는 메모리나 CPU점유율이 높지않기때문에 향후 진행되는 LAB들에서 Docker는 여전히 많이 사용할것입니다. 지금 설치하는 우분투리눅스는 2G메모리의 가상시스템을 실제 설치하는것이기때문에 메모리점유율이 있을수 있읍니다. Docker처럼 여러개의 노드 등록이 어려울것이라는거죠.. 암튼 우분투리눅스 이미지 하나를 만들어놓으면 Docker에서 구현하지 못하는 실습이 가능할것으로 보이니 잘 구현해보세요.</description>
    </item>
    
    <item>
      <title>2.47 PortACL설정하기</title>
      <link>http://ssanggu.github.io/ch2/2.47-portacl%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 23 Mar 2019 13:16:09 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.47-portacl%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] 
[LAB의 목적] 서버팜스위치에 연결된 서버들간에 접근제한이 필요한 경우가 있습니다. 이런경우에 서버팜스위치에서 port ACL을 적용하여 접근제한을 수행할 수 있습니다. 구성도의 구성내역에 아래의 조건을 만족하는 ACL을 생성하여 설정해보세요.

[LAB수행조건]  SSH연결이외에 다른 통신은 정상적으로 수행되어야합니다. 물리적인 스위치에서 Port ACL은 아무런 문제가 없이 잘 동작하여 LAB상에서도 이상이 없으리라고 생각했는데 근본적으로 안되는것이 맞다는 생각이 듭니다. L2스위치는 IP를 볼수 없는 장비 이기때문에 port에 ip나 tcp,udp포트번호로 ACL을 생성하여 적용하면 ACL이 동작이 안하는 것이 맞는것 같읍니다.</description>
    </item>
    
    <item>
      <title>2.46 Cisco IOL IPSec VPN구성</title>
      <link>http://ssanggu.github.io/ch2/2.46-cisco-iol-ipsecvpn%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Wed, 20 Mar 2019 21:42:12 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.46-cisco-iol-ipsecvpn%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] 
[LAB의 목적] 이번 LAB은 Cisco IOS에서 IPSec VPN Remote Access서버를 구성해보는 LAB입니다. 구성도는 2.45 VyOS로 L2TP VPN서버구성의 구성도와 동일한데 VyOS부분에 Cisco IOS라우터를 넣은것입니다. 구성은 첨부한 pdf문서를 참고하여 아래의 순서대로 설정을 하면됩니다.

[LAB수행조건]  VPN사용자 계정 생성 및 aaa로그인옵션 설정 ISAKMP그룹인증관련 설정과 SplitDNS관련 트래픽 정의 ESP데이터암호화를 위한 암호화 알고리즘정의 crypto map정의 인터페이스에 정의한 map설정 PC에 Cisco IPSec VPN클라이언트 프로그램 설치  L2TP over IPSec은 윈도우에서 기본으로 제공하는 기능으로 사용했고, IPSec VPN은 이렇게 별도의 클라이언트 프로그램이 설치되어 사용되어야 합니다.</description>
    </item>
    
    <item>
      <title>2.45 VyOS L2TP VPN서버구성</title>
      <link>http://ssanggu.github.io/ch2/2.45-vyos%EB%A1%9C-l2tp-vpn%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Mon, 18 Mar 2019 23:14:30 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.45-vyos%EB%A1%9C-l2tp-vpn%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] 
[LAB의 목적] 이제까지 Site-to-Site VPN만 구성해봤지만 실제로 사용자별로 연결하는 Remote Access VPN기능을 많이 사용합니다. Remote Access VPN은 PPTP, L2TP, IPSec, SSLVPN등이 있는데 IPSec, SSLVPN은 차차 LAB을 진행할 것입니다. 그전에 윈도우에서 기본으로 제공해주는 L2TP over IPSec기능을 통해서 Remote Access VPN의 기본동작원리를 이해하기 위해서 이번 LAB을 만들었읍니다.
IPSec의 설정 흐름은 기본적으로 아래 순서를 따른다고 보면 됩니다. 첨부된 pdf문서를 보면서 순서대로 따라서 설정해보세요&amp;hellip; 
[LAB수행조건]  VPN서버구성. ipsec적용 인터페이스 선택 client에 할당해주는 ip pool정의 공유키와 인증 사용자 정의     Attachments   Configure Remote Access VPN Service on a Vyatta Appliance.</description>
    </item>
    
    <item>
      <title>2.44 컨테이너에서 iptables사용하기</title>
      <link>http://ssanggu.github.io/ch2/2.44-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-iptables%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 18 Mar 2019 23:07:13 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.44-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-iptables%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] 리눅스시스템의 자체 방화벽 기능을 사용하려면 iptables명령을 사용해야 합니다. 도커 컨테이너에서 iptables명령을 시험해보면 좋은데 UnetLab에서 구동하는 도커 컨테이너에서는 iptables명령을 실행할 권한이 들어가지 않읍니다. 그래서 이 권한을 수정해주는 방법을 검색해보았습니다. 
LAB은 한대의 스위치에 우분투 클라이언트 2대와 ssh서버 1대를 동일 네트워크 대역으로 연결해서 한대의 클라이언트에서만 ssh서버로 ssh연결이 가능하도록 제어하는 방법을 보여주도록 구성해봤읍니다. 아래에 첨부한 영상은 다음과 같은 순서로 진행됩니다. 영상에 설명자막을 넣었으니 영상 재생시에 자막을 on하시고 보시기 바랍니다.
 ubuntu_client이미지로부터 임시 컨테이너를 생성하여 openssh-server, iptables, sudo패키지를 설치</description>
    </item>
    
    <item>
      <title>2.43 Multi-LAB IPSec</title>
      <link>http://ssanggu.github.io/ch2/2.43-multi-lab-ipsec/</link>
      <pubDate>Mon, 18 Mar 2019 22:57:13 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.43-multi-lab-ipsec/</guid>
      <description> [구성도] 
[LAB의 목적] 본 LAB은 UNetLab을 사용하고 있는 3명의 사용자 시스템을 연동하여 통신하도록 구성하는 LAB으로 다수의 사용자 LAB을 통신하도록 설정하면서 더욱 효율적으로 장비설정을 해볼수가 있읍니다. 
[LAB수행조건]  2.40 NAT와 IPSec터널 동시구성 LAB을 각자 해결한 2명의 사용자의 Ubuntu노트북을 통해서 구성도의 그림과 같이 연결하여 LAB을 확장하여 구성하고 통신시험을 완료하여 구성을 올려봅니다. 여러명의 사용자들의 LAB을 연결해서 시험을 해보니 더 효과적인듯 하네요. NAT담당하는 라우터와 IPSec Peer담당하는 라우터는 2.40 NAT와 IPSec터널 동시구성의 조건과 동일 POD#1과 POD#2간의 IPSec VPN터널구성하여 통신 POD#3와 POD#4간의 IPSec VPN터널구성하여 통신 POD#1과 POD#3간의 IPSec VPN터널구성하여 통신 모든 LAB상의 장비가 인터넷통신 가능  </description>
    </item>
    
    <item>
      <title>2.42 Docker의 commit기능</title>
      <link>http://ssanggu.github.io/ch2/2.42-docker%EC%9D%98-commit%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Mon, 18 Mar 2019 22:39:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.42-docker%EC%9D%98-commit%EA%B8%B0%EB%8A%A5/</guid>
      <description>[LAB의 목적] Docker로 서버를 만들기 위해서 Dockerfile을 작성하고 build를 수행했는데, 이 방법이 Dockerfile작성하기도 어렵고, 잘 안만들어지더군요.. 그래서 이번에 소개하는 내용은 docker의 commit의 기능을 이용하는 방법입니다. 
우분투 시스템에서 docker를 실행하면 컨테이너가 생성되고 인터넷이 가능한 도커시스템이 만들어집니다. 이 컨테이너에서 우리가 패키지 설치하는 방법으로 패키지를 설치한 다음에 정상적으로 서비스 구동되는것을 확인하고, 이 컨테이너를 그대로 이미지를 만드는 방법입니다. 이 방법을 이용해서 apache2와 mysql서버, ssh서버가 구동되는 이미지를 작성하는 방법을 보여드릴께요..
  현재 이미지를 확인해보면 우리가 일반적으로 사용하는 명령어들을 설치했던 ubuntu_client이미지가 있읍니다.</description>
    </item>
    
    <item>
      <title>2.41 PuppyLinux이미지 설치하기</title>
      <link>http://ssanggu.github.io/ch2/2.41-puppylinux%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 18 Mar 2019 22:32:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.41-puppylinux%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description> [LAB의 목적] LAB에서 사용하는 클라이언트에서 테스트를 위해서 윈도우환경이 필요할때가 있습니다. 리눅스의 X-Windows를 실행하거나 윈도우가상시스템을 구동하기에는 메모리가 부족할 수 있는데 상대적으로 적은 메모리를 사용하면서 윈도우 환경을 제공할 수 있는 PuppyLinux가 있어서 아래의 절차에 따라서 이미지를 등록하는 작업을 수행하는 LAB입니다. 
[LAB수행조건]  아래 절차에 따라서 PuppyLinux이미지를 등록하기   </description>
    </item>
    
    <item>
      <title>2.40 NAT와 IPSec터널 동시구성</title>
      <link>http://ssanggu.github.io/ch2/2.40-nat%EC%99%80-ipsec%ED%84%B0%EB%84%90-%EB%8F%99%EC%8B%9C%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Mon, 18 Mar 2019 22:22:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.40-nat%EC%99%80-ipsec%ED%84%B0%EB%84%90-%EB%8F%99%EC%8B%9C%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] 
[LAB의 목적] 본 LAB은 Cisco IOS라우터에서 NAT와 IPSec터널을 동시에 구성하는 LAB입니다. IPSec VPN터널을 맺는 Peer가 NAT를 수행하는 장비의 안쪽에 위치했을때 VPN Peer를 어떻게 맺는지 습득하는 LAB입니다. 
[LAB수행조건]  Client1측에서 R3이후의 외부로 나갈때는 R3 e0/0인터페이스 IP로 NAT변환이 되어서 나가야 함. 확인할때는 Client1에서 R2로 telnet연결해서 who명령으로 접속자 ip를 확인하면 150.10.10.1로 나타나는것으로 확인함 Client2측에서 R1이후의 외부로 나갈때는 R1 e0/1인터페이스 IP로 NAT변환이 되어서 나가야 함. 확인할때는 Client2에서 R2로 telnet연결해서 who명령으로 접속자 ip를 확인하면 200.</description>
    </item>
    
    <item>
      <title>2.39 SAMBA서버 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.39-samba%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 18 Mar 2019 22:08:31 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.39-samba%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0321_install-samba.zip 
[LAB의 목적] 본 LAB은 리눅스에 SAMBA(삼바)서버를 구성해서 윈도우를 사용하는 호스트OS와 파일공유하는 방법을 습득하는 LAB입니다. 도커에 samba패키지를 설치하고 samba기본 설정하는 방법을 이해해야합니다. 
[LAB수행조건]  SAMBA-server는 ubuntu-client이미지로 컨테이너를 생성하여 인터넷이 접근가능한 상태에서 samba패키지를 설치하고 구성 호스트OS의 윈도우시스템에서 SAMBA-server가 연결되도록 라우팅을 설정하기 SAMBA서버에 사용자 계정을 생성하고 SAMBA구성에도 해당 사용자정보를 구성 호스트OS 윈도우시스템에서 SAMBA서버에서 생성한 사용자로 로그인해서 사용자의 홈디렉토리를 마운트패서 사용할 수 있도록 구성 윈도우 파일탐색기와 서버의 shell상에서 만든 한글파일이름이 서로간에 깨지지않고 정상적으로 보이는지 확인하기  </description>
    </item>
    
    <item>
      <title>2.38 Configuring Basic OSPF-2</title>
      <link>http://ssanggu.github.io/ch2/2.38-configuring-basic-ospf-2/</link>
      <pubDate>Mon, 18 Mar 2019 21:46:44 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.38-configuring-basic-ospf-2/</guid>
      <description>[구성도] LAB구성파일: 0304_Configure-OSPF1.zip 
[LAB의 목적] 본 LAB은 2.37 Configuring Basic OSPF-1 LAB구성도에서 다음 OSPF기능을 차례대로 설정하면서 OSPF의 기능을 익히는 LAB입니다. 
[LAB수행조건]  Configuring OSPF priority Hub-and-Spoke구조에서 Spoke라우터들(R2,R4,R5)의 ospf priority를 0으로 설정하여 BR/BDR이 되지 않도록 하여 항상 R1이 DR이 되도록 설정. R2, R4, R5애서 show ip ospf neighbor명령어로 R1이 DR임을 확인하기.
 Configuring OSPF Network Types Hub-and-Spoke Frame Relay에 연결된 R1, R2, R4, R5라우터의 인터페이스에 ospf network type을 point-to-multipoint로 변경해서 DR/BDR 선출과정이 필요없도록 설정하기</description>
    </item>
    
    <item>
      <title>2.37 Configuring Basic OSPF-1</title>
      <link>http://ssanggu.github.io/ch2/2.37-configuring-basic-ospf-1/</link>
      <pubDate>Sun, 17 Mar 2019 13:49:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.37-configuring-basic-ospf-1/</guid>
      <description>[구성도] LAB구성파일: 0304_Configure-OSPF1.zip 
[LAB의 목적] 본 LAB은 Frame Relay망과 Ethernet이 혼합된 네트워크상에서 OSPF라우팅 프로토콜의 기본동작을 숙지하기위한 LAB입니다. 
[LAB수행조건]  LAB구성도에 따라서 LAB상의 장비들을 설정하세요. 본 LAB에서는 인접한 장비끼리만 통신되도록 구성합니다.(R1, R2, R4, R5는 인접하니깐 서로 통신 가능, R1과 R3는 한단계 거쳐서 있으므로 통신불가. R4와 SW1은 통신가능 등) OSPF에 대한 기본개념과 기본용어를 찾아보고 시작하세요.  OSPF is a link state protocol and each router maintains a topology map of their configured area ABR, ASBR, DR, BDR DROTHER의 의미파악 ospf protocol number: 89 multicast address 사용용도(224.</description>
    </item>
    
    <item>
      <title>2.36 Frame Relay Switch</title>
      <link>http://ssanggu.github.io/ch2/2.36-frame-relay-switch/</link>
      <pubDate>Sun, 17 Mar 2019 13:33:17 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.36-frame-relay-switch/</guid>
      <description>[구성도] LAB구성파일: 0302_Frame-Relay1.zip 
[LAB의 목적] 본 LAB은 WAN기술중에 Frame Relay망으로 라우터들을 연결하여 통신설정하는 방법을 습득하기 위한 LAB입니다. 하단에 참조한 페이지는 본 LAB을 설정하는 방법을 단계적으로 설명한 페이지입니다. 문서의 내용에 따라서 설정하면서 Frame Relay설정방법을 이해하시기 바랍니다. 
[LAB수행조건]  Frame Relay망에 대한 기본개념 이해하기 Frame Relay에서 사용하는 용어 이해하기  PVC(Permanent Cirtual Circuit) SVC(Switched Virtual Circuit) DLCI(Data-Link Connection Identifier) LMI(Local Management Interface)  Cisco IOL한대를 Frame Relay스위치로 설정하여 WAN구간으로 사용하므로 Cisco라우터를 Frame Relay스위치로 활용하는 방법을 이해하기</description>
    </item>
    
    <item>
      <title>2.35 Port Security</title>
      <link>http://ssanggu.github.io/ch2/2.35-port-security/</link>
      <pubDate>Sun, 17 Mar 2019 13:20:18 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.35-port-security/</guid>
      <description>[구성도] LAB구성파일: 0228_port-Security.zip 
[LAB의 목적] 네트워크를 운영하다보면 특정포트에 허브를 연결해서 다수의 시스템을 사용하는것을 제어할 경우가 발생합니다. Cisco의 port secuirty기능을 사용하여 스위치 포트에 Learning되는 mac address갯수를 제한해서 하단에 허브사용을 제어해보는 LAB입니다. 
[LAB수행조건]  HUB2, HUB3장비는 SW1과 동일한 Cisco IOL이미지를 사용했지만, HUB처럼 생각하기 위해서 no ip routing설정만하고 다른 설정은 아무것도 하지 마세요. SW1스위치의 e0/0포트는 1개의 mac만 허락하도록 설정하고 VPC4, 5, 6중 가장 먼저 Learning되는 노드만 통신이 되고 나머지는 통신이 안되도록 구성하기 SW1스위치의 e0/1포트는 1개의 mac만 허락하도록 설정하고 상상 VPC8만 통신이 되도록 구성하기 HUB가 Cisco IOL이미지로 구성함에 다라서 의도하지 않은 문제가 발생할 것입니다.</description>
    </item>
    
    <item>
      <title>2.34 SSL VPN with ASA</title>
      <link>http://ssanggu.github.io/ch2/2.34-ssl-vpn-with-asa/</link>
      <pubDate>Sun, 17 Mar 2019 13:01:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.34-ssl-vpn-with-asa/</guid>
      <description>[구성도] LAB구성파일: 0218_Use-ASA.zip 
[LAB의 목적] Cisco ASA에서 제공하는 AnyConnect SSL VPN기능을 활성화하여 SSL VPN을 시험하는 LAB입니다. 사용자가 IPSec VPN을 사용할때는 별도 IPSec VPn Client를 설치해야하지만 SSL VPN은 웹브라우저로 연결하여 Active-X로 내려받는 클라이언트를 설치하여 사용하는 방식에 대한 이해도 필요합니다. 
[LAB수행조건]  LAB구성도는 2.33 Cisco ASA이미지구성 LAB에서 사용한 구성도를 그대로 이용 ASDM 관리툴의 마법사(Wizard)기능을 사용하여 AnyConnect SSL VPN설정하기.(처음 설정시에 CLI방식으로 설정하는데 어려움이 있기때문에 마법사를 통하여 설정했을때 어떤부분이 config상에 들어가는지 확인하는것도 좋은 방법) VPN Pool은 10.</description>
    </item>
    
    <item>
      <title>2.33 Cisco ASA이미지구성</title>
      <link>http://ssanggu.github.io/ch2/2.33-cisco-asa%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sun, 17 Mar 2019 12:52:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.33-cisco-asa%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B5%AC%EC%84%B1/</guid>
      <description> [구성도] LAB구성파일: 0218_Use-ASA.zip 
[LAB의 목적] Cisco ASA이미지를 UnetLab에 구성하여 LAB상에서 방화벽장비로 이용하기 위한 LAB입니다. ASA이미지를 구성한후에 기본적인 설정과 ASDM을 통해서 ASA방화벽을 연결한후 기본적인 사용법을 익혀보세요. 
[LAB수행조건]  Cisco ASA이미지를 unetLab에 환경구성하기 모든 노드가 통신이 가능하도록 환경구성하기 ASA의 방화벽정책을 ALL Permit정책으로 설정하기 ASA 관리포트 연결이 호스트OS에서 가능하도록 구성하기  http server enable http 접근ip허용  호스트OS에서 ASA관리 연결 및 기본 사용법 숙지하기   </description>
    </item>
    
    <item>
      <title>2.32 FTP에 대한 ACL설정</title>
      <link>http://ssanggu.github.io/ch2/2.32-ftp%EC%97%90-%EB%8C%80%ED%95%9C-acl%EC%84%A4%EC%A0%95/</link>
      <pubDate>Sun, 17 Mar 2019 12:35:23 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.32-ftp%EC%97%90-%EB%8C%80%ED%95%9C-acl%EC%84%A4%EC%A0%95/</guid>
      <description>[구성도] LAB구성파일: 0212_FTP_mode-ACL.zip 
[LAB의 목적] FTP프로토콜은 passive mode와 active mode로 동작할때 사용되는 port번호가 다르고 요청하는 방향이 달라지기때문에 보안정책을 설정하는데 까다로운 프로토콜입니다. IOS라우터의 ACL기반에서 FTP프로토콜에 대한 ACL정책을 설정하면서 FTP프로토콜에 대한 이해를 돕고자하는 LAB입니다. 
[LAB수행조건]  FTP의 Active Mode와 Passive Mode이해하기 vsftpd환경설정에서 Active Mode와 Passive Mode설정하는 방법 익히기 ftp클라이언트 프로그램(우분투의 ftp명령어)에서 active mode와 passive mode전환 방법 익히기 두 시스템이 정상 통신 되도록 환경구성하기 FTP는 제어포트와 데이터포트를 다르게 사용하기 때문에 연결후에 디렉토리 목록 확인이 필요함 Active Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 Passive Mode로 ubuntu-client에서 FTP서버로 연결했을때 WireShark 패킷캡처로 포트번호 사용 체크하기 R1 e0/1인터페이스 inbound에 ACL을 적용해서 FTP연결만 허용하도록 정책설정    Attachments   FTP Active 모드와 Passive 모드의 차이점.</description>
    </item>
    
    <item>
      <title>2.31 Cacti와 SNMP V3</title>
      <link>http://ssanggu.github.io/ch2/2.31-cacti%EC%99%80-snmp-v3/</link>
      <pubDate>Sun, 17 Mar 2019 12:20:47 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.31-cacti%EC%99%80-snmp-v3/</guid>
      <description>[구성도] LAB구성파일: 0207_NTP-Time-Sync.zip 
[LAB의 목적] 오픈소스 Cacti프로그램은 SNMP기반으로 장비의 상태모니터링과 누적 트래픽그래프를 제공할 수 있는 훌륭한 프로그램입니다. 우분투시스템에 Cacti프로그램으로 모니터링 시스템을 구축하는 방법을 습득하고 LAB상의 장비에 SNMP V3설정하는 방법과 Cacti에 장비를 등록하여 모니터링하는 방법을 배우고자 합니다. 
[LAB수행조건]  LAB구성도는 2.30 NTP서버구성 및 시간동기화에서 사용한 LAB을 그대로 이용 R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server에 cacti패키지를 설치하고 구성하기 R1에 Static NAT설정: R1 e0/0 80/TCP &amp;mdash;-&amp;gt; 10.</description>
    </item>
    
    <item>
      <title>2.30 NTP서버구성 및 시간동기화</title>
      <link>http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/</link>
      <pubDate>Sat, 16 Mar 2019 23:28:31 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.30-ntp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EC%8B%9C%EA%B0%84%EB%8F%99%EA%B8%B0%ED%99%94/</guid>
      <description>[구성도] LAB구성파일: 0207_NTP-Time-Sync.zip 
[LAB의 목적] 네트워크 장비나 보안장비등 로그를 모니터링 해야하는 시스템의 시간은 중요한 항목입니다. 따라서, 장비에 NTP서버를 통한 시간동기화는 필수라고 할 수 있습니다. 본 LAB은 Docker시스템에 NTP서버를 구성하여 장비들의 시간을 동기화하는 LAB입니다. 다양한 시스템별로 NTP시간동기화 설정을 어떻게 하는지 방법을 익혀보세요. 
[LAB수행조건]  R1의 e0/0에 pnet0를 연결하고 NAT를 설정하여 LAB상의 모든 시스템이 인터넷이 가능하도록 설정 NTP-server와 ubuntu-client는 우분투 클라이언트 이미지를 사용한 컨테이너로 동작 NTP-server에 인터넷으로부터 NTP패키지를 설치하여 time서버를 구동 Cisco장비(R1, SW1), Juniper(Olive-R), Ubuntu Linux(ubuntu-client)시스템별로 10.</description>
    </item>
    
    <item>
      <title>2.29 Extended ACL</title>
      <link>http://ssanggu.github.io/ch2/2.29-extended-acl/</link>
      <pubDate>Sat, 16 Mar 2019 23:19:14 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.29-extended-acl/</guid>
      <description>[구성도] LAB구성파일: 0206_Extended-ACL.zip 
[LAB의 목적] 단순한 ACL을 만들어봤으니 프로토콜과 서비스 포트번호를 포함하여 좀 더 복잡한 보안정책을 구성해보는 LAB입니다. 
[LAB수행조건]  R1 e0/0에 pnet0를 연결하고 NAT설정하여 LAB상의 시스템들이 인터넷 가능하도록 설정 아래 정책으로 Static NAT설정  192.168.234.90 80/TCP &amp;mdash;-&amp;gt; 10.0.100.10 80/TCP 192.168.234.90 10022/TCP &amp;mdash;-&amp;gt; 10.0.100.20 22/TCP  아래의 보안정책을 Extended ACL로 생성하고 인터페이스 적용하기  내부(10.0.100.0/24) &amp;mdash;-&amp;gt; 외부는 모든 통신 permit 외부 &amp;mdash;-&amp;gt; 10.0.100.10 80/TCP permit 외부 &amp;mdash;-&amp;gt; 10.</description>
    </item>
    
    <item>
      <title>2.28 Juniper의 Packet Filtering</title>
      <link>http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/</link>
      <pubDate>Sat, 16 Mar 2019 23:12:58 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.28-juniper%EC%9D%98-packet-filtering/</guid>
      <description> [구성도] LAB구성파일: 2.27 Standard ACL에서 사용한 LAB에서 R1라우터를 Olive Router로 교체 
[LAB의 목적] 다양한 장비에서 보안정책 설정하는 방법을 경험하기를 추천합니다!!!

[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  10.0.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절  아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.  192.168.100.100호스트만 모든 통신을 허락 그 이외의 모든 통신은 거절   </description>
    </item>
    
    <item>
      <title>2.27 Standard ACL</title>
      <link>http://ssanggu.github.io/ch2/2.27-standard-acl/</link>
      <pubDate>Sat, 16 Mar 2019 22:58:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.27-standard-acl/</guid>
      <description>[구성도] LAB구성파일: 0206_Standard-ACL.zip 
[LAB의 목적] 향후 방화벽의 복잡한 보안정책을 무리없이 설정할 수 있도록 하기위해서 라우터의 IOS기반 ACL(Access Control List)기능을 사용하여 보안정책을 적용하는 방법을 배우고자하는 LAB입니다. ACL테이블을 작성하고 인터페이스의 inbound정책과 outbound정책에 따라 어떤 변화가 있는지 주의깊게 살펴보세요. 저의 생각으로는 보안정책을 적용받는 대상에 가장 가까운 인터페이스의 방향에 적용하는것이 효율적으로 봅니다.

[LAB수행조건]  네트워크를 구성하고 모든 ubuntu-client에서 네트워크장비로 ping, telnet과 다른 client로 ping이 정상임을 확인 아래의 보안정책을 생성하고 어떤 인터페이스에 적용할 것인가를 고민해보세요.</description>
    </item>
    
    <item>
      <title>2.26 WireShark로 패킷캡처-II</title>
      <link>http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/</link>
      <pubDate>Sat, 16 Mar 2019 22:48:56 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.26-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98-ii/</guid>
      <description>[구성도] LAB구성파일: 0201_Docker-make-server.zip 
[LAB의 목적] 본 LAB은 2.25 Docker로 서버구현하기에서 구성한 LAB을 그대로 이용하여 클라이언트와 서버간에 TCP통신이 수행될때 WireShark로 패킷을 잡아보고 패킷을 분석해보는 LAB입니다. 패킷을 ASCII형태로 decode했을때 어떻게 보이는지와 Flow Graph에서 서버와 클라이언트가 사용하는 TCP Port번호를 주의깊게 살펴보세요.

[LAB수행조건]  WireShark캡처 실행하는 방법 다시한번 숙지하기 ubuntu-client(10.0.0.100)에서 SW1(10.0.0.5)로 telnet, ssh연결에 대한 capture ubuntu-client(10.0.0.100)에서 ftp-server(10.0.0.20)로 ftp, sftp연결에 대한 capture ubuntu-client(10.0.0.100)에서 www-server(10.0.0.10)로 http연결에 대한 capture    Attachments   31장_Wireshark로 패킷 Capture하기.</description>
    </item>
    
    <item>
      <title>2.25 Docker로 서버구현하기</title>
      <link>http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 22:37:53 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.25-docker%EB%A1%9C-%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0201_Docker-make-server.zip 
[LAB의 목적] 본 LAB은 UnetLab에서 이용할 각종 서버를 Docker시스템을 통하여 구현하고 클라이언트에서 각 서버들을 연결할 수 있는 환경을 구성하는 LAB입니다.

[LAB수행조건]  R1라우터에 VMWare NAT인터페이스를 e0/0에 연결하고 NAT설정을 수행하여 LAB이 인터넷 사용이 가능하도록 구성 SW1스위치는 기본설정 ubuntu-client는 Docker 기본이미지로 만들어진 컨테이너를 사용. 인터넷까지 정상통신되는것을 확인 www-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용. 컨테이너 실행상태에서 apache2, ssh서버를 패키지로 설치하여 서부구성하고 테스트계정 생성하기 ftp-server는 ubuntu-client와 동일한 이미지로 만들어진 컨테이너를 사용.</description>
    </item>
    
    <item>
      <title>2.24 Docker에서 인터넷 사용하기</title>
      <link>http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 22:30:39 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.24-docker%EC%97%90%EC%84%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0201_Docker-use-internet.zip 
[LAB의 목적] LAB에 추가하는 Docker시스템에 다른 패키지를 설치하거나 설치된 패키지를 업데이트 하기 위해서는 인터넷 연결이 필요합니다. 라우터의 NAT설정을 통해서 Docker에서 인터넷 연결이 가능하도록 설정해보세요.

[LAB수행조건]  LAB에서 생성하는 Docker시스템에서 인터넷을 접근해서 패키지 설치가 가능하도록 설정 R1라우터의 e0/0인터페이스를 VMWare의 NAT인터페이스(pnet0)에 연결하고 ip를 자동할당으로 받도록 설정 R1라우터에 NAT를 설정하여 내부네트워크(10.0.0.0/24)가 외부로 통신할때 e0/0인터페이스 IP로 PAT변환이 수행되도록 설정 우분투 클라이언트 시스템에서 패키지 업데이트를 수행  </description>
    </item>
    
    <item>
      <title>2.23 UnetLab에서 Docker활용하기</title>
      <link>http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 21:33:32 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.23-unetlab%EC%97%90%EC%84%9C-docker%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0131_Use-Docker.zip 
[LAB의 목적] 컨테이너 기술을 사용하여 경량의 시스템을 구현해주는 도커시스템을 UnetLab에 추가함으로써 다수의 서버를 LAB상에 올릴수 있도록 합니다. 
도커(Docker)란? Docker에 대한 개념정리는 도커 무작정 따라하기를 참조했습니다. 
[LAB수행조건]  UnetLab이 설치된 우분투 리눅스에 Docker설치하기 본 LAB을 구성할때 참조한 How To Adding and Run Docker Container on UnetLab 문서는 여전히 참조할만 하지만 우분투에 docker설치하는 내용은 최근 우분투에 repository를 이용하여 설치하는 방법을 이용해야 합니다. 재검색을 통해서 Installing Docker in EVE-NG 사이트를 찾았습니다.</description>
    </item>
    
    <item>
      <title>2.22 Cisco IOS NAT 설정</title>
      <link>http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/</link>
      <pubDate>Sat, 16 Mar 2019 21:22:30 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.22-cisco-ios-nat%EC%84%A4%EC%A0%95/</guid>
      <description>[구성도] LAB구성파일: 0123_CiscoIOS-NAT.zip 
[LAB의 목적] 본 LAB에서는 Cisco IOS라우터에서 NAT설정하는 방법을 습득합니다. 내부의 노드들이 외부로 통신할때 TCP port기반의 NAT를 통해서 주소변환이 발생하도록 설정하고, 외부에서 내부측의 장비로 원격연결을 하기 위한 inside destination NAT를 설정하는 방법을 습득합니다. 
[LAB수행조건]  LAB상의 모든 노드가 통신이 가능하도록 설정 스위치가 원격접속이 가능하도록 설정 SW1에서 SW2로 telnet, SW2에서 SW1으로 telnet 접속하고 who명령을 통해서 출발지 IP주소를 확인하기 10.0.0.0/24대역에서 10.10.0.0/24대역으로 통신할때 192.168.200.200 IP로 PAT변환이 되어서 통신되도록 NAT설정 NAT설정후에 SW1스위치에서 SW2스위치로 telnet 연결하고 who명령으로 출발지 IP확인했을때 192.</description>
    </item>
    
    <item>
      <title>2.21 Cisco HSRP이중화 구성</title>
      <link>http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 16 Mar 2019 14:42:17 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.21-cisco-hsrp%EC%9D%B4%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] LAB구성파일: 0120_Cisco-HSRP-Networks.zip 
[LAB의 목적] Cisco IOS 백본스위치에 대한 장애를 대비하기 위하여 이중화로 구성하고 게이트웨이 이중화 프로토콜인 HSRP를 사용하여 이중화 네트워크를 구성합니다. 
[LAB수행조건]  VRRP(Virtual Router Redundancy Protocol)와 HSRP(Hot Stanby Router Protocol)는 동일하게 게이트웨이를 이중화하는 프로토콜로 VRRP는 모든 제조사에서 사용가능 하지만 HSRP는 Cisco에서만 사용 가능 HSRP 기본구성 문서를 참조하여 LAB장비를 설정 VLAN100은 BACKBONE1이 Master, VLAN200은 BACKBONE2가 Master가 되도록 설정 show stanby brief로 HSRP상태확인 모든 노드에서 LAB상의 모든 IP로(slave ip address를 포함) 통신이 되는것을 확인 BACKBONE2를 stop했을때 HSRP Master가 BACKBONE1으로 전환되면서 네트워크 끊김이 없음을 보이려 했으나 사용한 이미지상의 버그로 인하여 fail-over시험은 완료 못함</description>
    </item>
    
    <item>
      <title>2.20 WireShark로 패킷 캡처</title>
      <link>http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/</link>
      <pubDate>Sat, 16 Mar 2019 13:53:16 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.20-unetlab%EC%97%90%EC%84%9C-wireshark%EB%A1%9C-%ED%8C%A8%ED%82%B7%EC%BA%A1%EC%B2%98/</guid>
      <description>[LAB의 목적] UnetLab에 구성하는 LAB자체에서 WireShark를 통한 패킷을 캡처가 가능합니다. LAB에서 WireShark를 사용할 수 있도록 구성하는 LAB입니다. 우분투에서는 sudo개념을 사용하고 있기때문에 root암호를 생성하는 과정이 필요합니다. 
[LAB수행조건]  네이버블로그에서 UNL에서 와이어샤크를 이용한 패킷캡처 라는 잘 정리된 글을 통해서 본 LAB을 잘 꾸밀 수 있읍니다. 원리: plink를 이용하여 UNL서버에 SSH터널을 구성하여 tcpdump데이터를 받아오는 구조
  UnetLab사이트에서 Windows Client Side을 다운로드해서 설치하면 기본프로그램에 대한 레지스크리 등록 수행 wireshark_wrapper.bat파일에 USERNAME과 PASSWORD항목이 있는데 ssh로 연결해서 tcpdump를 실행할 수 있는 권한이 있어야 하므로 root계정정보를 입력해야함 우분투는 sudo개념을 사용함으로 root에 대한 암호설정 필요 ssh데몬의 config파일에서 root로 로그인할 수 있도록 설정 변경 필요 윈도우에 Wireshark프로그램 설치하고, wireshark_wrapper.</description>
    </item>
    
    <item>
      <title>2.19 Remote Access VPN구성</title>
      <link>http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sat, 16 Mar 2019 13:37:42 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.19-remote-access-vpn%EA%B5%AC%EC%84%B1/</guid>
      <description>[구성도] LAB구성파일: 0118_RemoteAccess-VPN.zip 
[LAB의 목적] Site-to-Site VPN은 사용자들이 VPN연결을 고려하지 않고 사용하면 라우터에서 해당 대역의 IP에 대해서 암호화를 진행해줍니다. 출장을 나갔거나 외부에서 사용하는 사용자들 위한 Remote VPN을 Cisco IOS라우터에 구성해서 사용자별로 VPN환경을 사용할 수 있도록 구성해봅니다. 
[LAB수행조건]  라우터 R1, SW, VPC1,2에 기본 IP설정 참고파일에 올린 pdf문서를 기반으로 R1에 Remote Access VPN설정 Windows7에 Cisco IPSec VPN Client 5.0.07버전 설치. 한번에 정상적으로 설치 안되는 경우가 발생할 수 있는데, 그럴 경우에 Windows 7을 재시작후에 다시 설치해보세요.</description>
    </item>
    
    <item>
      <title>2.18 IPSec Site-to-Site VPN 구성</title>
      <link>http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 13:26:20 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.18-ipsec-site-to-site-vpn%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0118_L2L-IPSec_Tunnel.zip 
[LAB의 목적] 본사와 지사간에 공중망을 통해서 데이터전송을 할때 암호화된 트래픽으로 전달하기 위하여 VPN을 사용합니다. 본 LAB은 Cisco IOS기반 라우터를 사용하여 두 지점간에 IPSec VPN터널을 구성하는 방법을 습득합니다. 
[LAB수행조건]  두개의 라우터(R1, R2)를 Cloud(pnet0) 네트워크에 연결해서 구성 두대의 라우터간에 Site-to-Site 터널구성 IPSec터널을 통해서 10.1.1.0/24네트워크와 172.16.20.0/24 네트워크가 통신됨을 확인 debug를 통해서 IPSec세션 로그 확인해보기    참고파일   LAN-to-LAN IPsec Tunnel Between Two Routers.pdf  (281 ko)    </description>
    </item>
    
    <item>
      <title>2.17 L3라우터의 Trunk인터페이스</title>
      <link>http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</link>
      <pubDate>Sat, 16 Mar 2019 13:18:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.17-l3%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%9D%98-trunk%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</guid>
      <description> [구성도] LAB구성파일: L3-Ro_Trunk.zip 
[LAB의 목적] 물리적으로 단일 링크를 통해서 여러개의 VLAN을 통신하도록 하기 위해서 Trunk를 사용합니다. L3라우터장비에서 Trunk인터페이스를 sub-interface롤 생성하는 방법을 습득하는 LAB입니다. 
[LAB수행조건]  SW1, SW2스위치는 L2스위치로 설정 SW1, SW2스위치 각각에 2개의 VLAN을 생성하고 각각의 VLAN에 VPC를 연결 SW스위치와 Cisco, Juniper라우터간에 trunk를 설정하고 L3인터페이스를 설정 L3라우터에서 trunk로 연결되는 L3인터페이스 생성방법 습득 2대의 라우터간에 라우팅 설정 모든 VPC간에 통신 가능한지 확인  </description>
    </item>
    
    <item>
      <title>2.16 Juniper Olive 기본명령어 학습</title>
      <link>http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 11:15:00 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.16-juniper-olive-%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B5%ED%9E%88%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0115_Juniper-Olive-1.zip 
[LAB의 목적] LAB에서 사용할 수 있는 장비들이 많다면 더 풍부한 테스트환경을 구현할 수 있습니다. Juniper장비를 LAB환경에서 사용하기 위해서 장비의 기본 명령어를 익혀보기위한 LAB입니다. 
[LAB수행조건]  Juniper Olive 이미지 업로드하고 압축해제하기 # tar xvpf Juniper*.ova 이미지 변환하기 # /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 JunOS\ Olive-disk1.vmdk hda.qcow2 디렉토리 생성. Juniper이미지는 olive-이름으로 시작해야함. # mkdir -p /opt/unetlab/addons/qemu/olive-12.1R1.9 변환한 이미지 move # mv hda.qcow2 /opt/unetlab/addons/qemu/olive-12.1R1.9 권한수정 # /opt/unetlab/wrappers/unl_wrapper -a fixpermissions 구성한 LAB에서 JunOS명령어를 익혀보세요    참고파일   0115_Basic Juniper Router Configuration.</description>
    </item>
    
    <item>
      <title>2.15 Null0 라우팅</title>
      <link>http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/</link>
      <pubDate>Sat, 16 Mar 2019 11:04:41 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.15-null0%EB%9D%BC%EC%9A%B0%ED%8C%85/</guid>
      <description> [구성도] LAB구성파일: 0113_Routing확장-Lab.zip 
[LAB의 목적] 내부에서 외부로 유해사이트를 접근하는 문제를 급하게 차단을 해야 하는 경우에 방화벽설정이나 ACL설정을 하지 않고 라우팅을 해당사이트에 대해서 Null0로 설정함으로 차단을 설정할 수 있습니다. 본 Lab은 Null0 라우팅을 설정하여 패킷이 drop되는 방법을 습득합니다. 
[LAB수행조건]  Lab구성도는 2.6 Static route설정 LAB을 이용 모든 노드들이 통신이 되도록 구성하기 모든 노드들간에 통신이 정상적임을 확인한 후에 오로지 라우팅 조정으로만 VPC5가 통신이 안되도록 설정  </description>
    </item>
    
    <item>
      <title>2.14 Etherchannel 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 10:56:42 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.14-etherchannel-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 0110_EtherChannel_Lab.zip 
[LAB의 목적] 물리적인 포트 여러개를 묶어서 대역폭을 확장해서 제공하고 물리적인 포트의 장애를 대비할 수 있는 Etherchannel기술을 습득하는 Lab으로서 동일장비에서 설정하는것도 중요하지만 서로다른 제조사의 제품간에 연동도 중요합니다. 따라서, 본 Lab에서는 Cisco스위치와 VyOS간의 설정을 수행합니다. 
[LAB수행조건]  VyOS 리눅스 이미지 추가하기 Lab을 설정할때 etherchannel mode를 여러가지로 변경해보고 debug메시지로 덤프보면서 어떻게 동작하는지 이해하기  </description>
    </item>
    
    <item>
      <title>2.13 rsyslogd로 중앙로그서버 구현</title>
      <link>http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/</link>
      <pubDate>Sat, 16 Mar 2019 10:48:24 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.13-rsyslogd%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A4%91%EC%95%99%EB%A1%9C%EA%B7%B8%EC%84%9C%EB%B2%84%EA%B5%AC%ED%98%84/</guid>
      <description> [구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip 
[LAB의 목적] 네트워크장비의 로그는 버퍼의 사이즈때문에 일정시간 지나면 overwrite되버립니다. 따라서, 원격서버에 로그서버를 구성하여 네트워크 장비의 로그를 저장하는것을 중요합니다. 본 LAB에서는 리눅스에서 기본제공되는 rsyslog데몬을 설정하여 네트워크장비의 로그를 수집하는 방법을 습득합니다. 
[LAB수행조건]  우분투에 rsyslog라는 로그서버 데몬이 기본으로 설치되는데 기본적으로 네트워크에 대해서는 LISTEN하도록 설정되어 있지 않습니다. 네트워크에 대해서 LISTEN모드를 활성화하고 네트워크를 통해서 들어오는 syslog패킷을 수집할 수 있도록 구성 장비의 IP별로 로그파일이 별도로 만들어지도록 구성  </description>
    </item>
    
    <item>
      <title>2.12 DHCP서버와 DHCP네트워크</title>
      <link>http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</link>
      <pubDate>Sat, 16 Mar 2019 10:36:57 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.12-dhcp%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%EA%B3%BC-dhcp%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/</guid>
      <description>[구성도] LAB구성파일: 0104_DHCP-Network-Lab.zip 
[LAB의 목적] 우분투서버에 DHCP서버를 구성하고 3개의 VLAN에 IP를 할당해주는 LAB 
[LAB수행조건]  UnetLab이 설치된 우분투시스템에 isc-dhcp-server패키지를 설치하고 DHCP서버를 구성하여 pnet1인터페이스에서만 LISTEN하도록 구성. pnet0인터페이스와 같이 물리적인 네트워크에 연결된 부분에서 LISTEN하게되면 실제 네트워크레 영향을 줄수 있으므로 반드시 UnetLab 가상머신 내부에서만 사용하는 pnet1에서만 LISTEN하도록 서버를 구성. 백본스위치에 3개 VLAN이 통신되도록 구성 각 VLAN별 스위치 설정 우분투서버에서 Lab환경의 네트워크와 통신할 수 있도록 라우팅설정 백본스위치의 각 VLAN인터페이스에 ip helper를 설정하여 DHCP패킷이 릴레이 되도록 설정 VPC 4,5,6은 DHCP서버에서 해당 네트워크 대역의 IP로 자동할당됨을 확인 VPC7은 DHCP서버에서 IP를 할당받는데 항상 고정된 10.</description>
    </item>
    
    <item>
      <title>2.11 TACACS&#43; 인증서버 구성하기</title>
      <link>http://ssanggu.github.io/ch2/2.11-tacacs&#43;-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 16 Mar 2019 10:10:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.11-tacacs&#43;-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description>[구성도] LAB구성파일: 0104_TACACS-Lab.zip 
[LAB의 목적] TACACS+인증서버 패키지를 저장소설치가 아닌 소스파일로 컴파일해서 설치하는 방법익히기 TACACS+인증서버를 구성하고 장비 접근을 인증서버 통해서 인증하기 
[습득해야할 내용]  UnetLab이 설치된 우분투시스템에 TACACS+를 소스로 설치하는 방법.  소스로 설치하는 방법  apt-get install build-essential (우분투에서 소스컴파일을 위한 기본 환경설정) 압축풀기 소스파일 압축해제후 설치가이드를 해주는 README나 INSTALL파일을 확인하기 ./configure tac_plus 를 수행하면 시스템의 환경을 파악하여 컴파일 수행을 위한 Makefile생성 make 를 수행하면 만들어진 Makefile을 읽어서 내용대로 컴파일 수행됨 make install 을 수행하여 실행파일들 설치.</description>
    </item>
    
    <item>
      <title>2.10 윈도우이미지 등록하기</title>
      <link>http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Fri, 15 Mar 2019 21:29:52 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.10-%EC%9C%88%EB%8F%84%EC%9A%B0%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/</guid>
      <description>[LAB의 목적] 윈도우 가상머신을 LAB에서 활용할 수 있도록 이미지생성해서 넣기. 추가한 하드디스크영역에 생성한 이미지를 넣고 soft link를 설정하여 운영하는 방법 익히기 
[습득해야할 내용]  윈도우 가상머신 다운로드하기 90일동안 사용할 수 있는 윈도우 가상머신을 제공하는 사이트에서 적절한 윈도우를(IE10 on Win7, VMWare용) 선택하여 zip파일 다운로드 다운로드한 zip파일을 우분투서버에 업로드하고 압축해제. 사이즈가 큰 관계로 추가로 장착한 하드디스크에서 수행하기를 권고. # unzip IE10.Win7.For.Windows.VMware.ZIP 윈도우 이미지 넣어줄 디렉토리 준비 윈도우 이미지는 win-으로 디렉토리명이 시작해야 하고, /opt/unetlab/addons/qemu/디렉토리 하단에 위치해야 합니다.</description>
    </item>
    
    <item>
      <title>2.9 우분투머신에 하드디스크 추가</title>
      <link>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</link>
      <pubDate>Thu, 14 Mar 2019 22:01:43 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.9-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A8%B8%EC%8B%A0%EC%97%90-%ED%95%98%EB%93%9C%EB%94%94%EC%8A%A4%ED%81%AC%EC%B6%94%EA%B0%80/</guid>
      <description> [LAB의 목적] UnetLaB을 돌리기 위하여 우분투 가상머신을 생성할때 20G하드디스크를 생성했는데 이미지를 몇개 추가하다보니 디스트의 용량부족발생. 리눅스에 신규로 하드디스크를 추가했을때 수행되는 작업 익히기 
[습득해야할 내용]  VMWare가상머신 설정에서 20GB SCSI HDD 한개 추가하기 우분투머신을 부팅하고 dmesg|grep sd명령으로 하드디스크 인식된거 확인 fdisk -l명령으로 디스크 목록 확인하기 fdisk명령으로 추가된 하드디스크 파티션하는 방법 방법익히기 신규로 생성된 파티션을 포맷하는 방법 익히기. 이 부분에서 리눅스의 파티션의 종류에 대해서 알아보기(ext2, ext3, ext4등등) 신규 파티션 마운트할 디렉토리 생성과 수동 마운트 진행해보기 fstab에 부팅시에 자동으로 마운트 되도록 설정하기  </description>
    </item>
    
    <item>
      <title>2.8 VyOS이미지 등록</title>
      <link>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</link>
      <pubDate>Thu, 14 Mar 2019 21:50:03 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.8-vyos%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D/</guid>
      <description> [LAB의 목적] LAB상에서 이용할 vyOS장비하나 추가하기. ova이미지에서 vmdk이미지를 추출하고, 그 추줄한 이미지를 리눅스 kvm상에서 실행할 수 있는 이미지로 변환하는 방법익히기 
[습득해야할 내용]  VyOS란? VyOS사용자 가이드로 기본 사용법 숙지하기 VyOS ova이미지 다운로드 디렉토리 생성(VyOS이미지의 디렉토리 이름은 vyos-로 시작해야함) mkdir -p /opt/unetlab/addons/qemu/vyos-117 ova 압축풀기 tar xf vyos-1.1.7-amd64-signed.ova vmdk이미지를 qemu이미지로 변환 /opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 VyOS-1.1.7-signed-disk1.vmdk hda.qcow2 권한수정 /opt/unetlab/wrappers/unl-wrapper -a fixpermissions  </description>
    </item>
    
    <item>
      <title>2.7 스위치설정 템플릿2</title>
      <link>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</link>
      <pubDate>Thu, 14 Mar 2019 21:40:27 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF2/</guid>
      <description>[LAB의 목적] 네트워크 장비를 설정할때 아래의 사항들은 기본적으로 설정이 필요하여 기본 설정템플릿으로 정의. LAB상에서 스위치나 라우터 설정할때 귀찮다 생각하지 말고 아래의 사항들을 기본적으로 설정하면서 습관을 들이는것이 목적. 
[습득해야할 내용]  장비의 이름(hostname)을 의미있게 부여하였는가? 도메인이름을 설정하였고, ip domain-lookup을 수행하지 않도록 설정하였는가? (no ip domain-lookup을 설정하지 않으면 프롬포트에 오타를 치는 경우 대기시간이 발생) Timezone설정을 수행하였는가? debug, log메시지에 대해서 timestamp를 localtime으로 지정하였는가? VTP domain을 지정하고 VTO mode를 transparent로 변경하였는가? password encryption서비스를 설정하였는가?</description>
    </item>
    
    <item>
      <title>2.6 Static Route 설정</title>
      <link>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</link>
      <pubDate>Thu, 14 Mar 2019 21:32:55 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.6-static-route%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1226_L3-Static-Route.zip 
[LAB의 목적] 본 LAB은 라우팅설정에 대한 이해를 돕기위한 LAB입니다. 
[습득해야할 내용]  모든 통신의 시작은 출발지 시스템의 라우팅테이블을 살펴본는것에서 출발한다는 사실 인지 라우팅테이블에 존재하지 않는 네트워크를 목적지로 하는 경우에는 default-gateway로 전달된다는것 default gateway를 정의하지 말고 LAB상의 모든 L3장비에서 사용하는 네트워크들에 대해서만 라우팅을 설정하여 모두 통신이 되도록 구성할것 supermasking으로 등록하는 라우팅 갯수를 줄일 수 있는 방안  </description>
    </item>
    
    <item>
      <title>2.5 Trunk환경설정</title>
      <link>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</link>
      <pubDate>Wed, 13 Mar 2019 21:15:19 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.5-trunk%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/</guid>
      <description> [구성도] LAB구성파일: 1227_VLAN-Trunk2.zip 
[LAB의 목적] 물리적인 단일 연결을 통해서 여러개의 VLAN통신이 가능하도록 하는 Trunk설정 익히기 
[습득해야할 내용]  떨어져 있는 건물에 있는 사용자들을 동일한 VLAN으로 묶어주기 위한 Trunk설정 익히기 설정할때 SW2스위치의 관리 IP는 VLAN100에서 할당하고 SW3스위치의 관리 IP는 VLAN200에서 할당하기 스위치에 trunk설정방법 익히기  </description>
    </item>
    
    <item>
      <title>2.4 스위치 기본설정 템플릿</title>
      <link>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</link>
      <pubDate>Wed, 13 Mar 2019 21:07:18 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.4-%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8%EC%84%A4%EC%A0%95-%ED%85%9C%ED%94%8C%EB%A6%BF/</guid>
      <description> [구성도] 
[LAB의 목적] 2.3장의 LAB을 그대로 이용하여 LAB상의 스위치에 아래의 사항들을 설정해보고 시험하기 
[습득해야할 내용]  스위치에 Timezone을 설정하고 외부 NTP서버를 지정하여 시간동기화. NTP시간동기화 상태 통신확인하기 debug와 log메시지가 현재 장비시간으로 정확하게 표시되도록 설정하기 설정하는 password가 복호화가 안되도록 암호화 설정하기 원격에서 장비를 연결할때 username과 암호를 물어봐서 로그인하도록 구성하기 호스트OS에서 LAB상의 장비로 telnet연결가능하게 하기(호스트OS에서 LAB상의 장비들을 연결하기 위하여 라우팅을 추가하는 방법 익히기) 모든 스위치에 대해서 원격접속을 SSH로만 가능하도록 설정하기 모든 스위치에 대해서 SSH연결시에 호스트OS에서만 접근가능하도록 ACL설정해보기 호스트OS에 tftp나 ftp데몬을 구동하여 LAB에 구성한 모든 스위치의 config를 백업해보기  </description>
    </item>
    
    <item>
      <title>2.3 호스트OS에서 LAB환경 접속하기</title>
      <link>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 13 Mar 2019 20:42:40 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.3-hostos%EC%97%90%EC%84%9C-lab%ED%99%98%EA%B2%BD-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN_Cloud.zip 
[LAB의 목적] 2.2 LAB에서 구성한 환경을 VMWare에서 제공하는 Host-Only(VMNet1)네트워크에 연결해서 HostOS에서 LAB장비를 연결할 수 있는 방법 익히기 
[습득해야할 내용]  VMWare Plyaer에서 제공하는 Bridge, NAT, Host-only인터페이스 이해하기 자기의 VMWare Player버전에 맞는 vmnetcfg.exe를 받아서 네트워크를 재구성하는 방법 익히기 Bridge, NAT, Host-only인터페이스중 어떤것을 연결하더라도 LAB상의 장비를 연결하는 방법 익히기 
[VMWare어댑터관계 개념그림]   </description>
    </item>
    
    <item>
      <title>2.2 VLAN간 ip routing시험</title>
      <link>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</link>
      <pubDate>Wed, 13 Mar 2019 20:34:06 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.2-vlan%EA%B0%84-ip-routing%EC%8B%9C%ED%97%98/</guid>
      <description> [구성도] LAB구성파일: 20161222_L3-VLAN.zip 
[LAB의 목적] L3를 수행하는 백본스위치 1대를 놓고 서로 다른 VLAN간에 ip routing을 수행하여 서로 다른 VLAN간에 통신 시험 
[습득해야할 내용]  Cisco IOL에서 스위치 이미지를 사용할때  L3 라우팅기능을 사용하려면 ip routing L3 스위치에서 default gateway를 지정하려면 ip route 0.0.0.0 0.0.0.0 nexthop으로 지정 L2스위치로만 사용하려면 no ip routing L2 스위치에서 default gateway를 지정하려면 ip default-gateway nexthop으로 지정   </description>
    </item>
    
    <item>
      <title>2.1 L2스위치 기본LAB</title>
      <link>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</link>
      <pubDate>Wed, 13 Mar 2019 20:23:12 +0900</pubDate>
      
      <guid>http://ssanggu.github.io/ch2/2.1-l2%EC%8A%A4%EC%9C%84%EC%B9%98-%EA%B8%B0%EB%B3%B8lab/</guid>
      <description> [구성도] LAB구성파일: 20161222_L2-VLAN.zip 
[LAB의 목적] UnetLAB에 등록한 Cisco IOL이미지가 정상적으로 동작하여 L2스위치의 기능을 수행하는지를 시험 
[습득해야할 내용]  Cisco스위치의 기본설정 (보안을 고려한 설정으로 기본적으로 설정하는 내용에 대한 설정 템플릿을 만들어 보기) VPC의 기본 IP설정방법과 통신명령 익히기 동일한 VLAN상의 노느들간의 통신확인하기  </description>
    </item>
    
  </channel>
</rss>